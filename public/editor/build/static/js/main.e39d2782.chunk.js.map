{"version":3,"sources":["Components/MenuBar/MenuBar.jsx","Components/ExpandableList/ExpandableList.jsx","Components/NewButton/NewButton.jsx","Components/PotionsList/PotionsList.jsx","actions/types.js","actions/index.js","Components/ObjectListColumn/ObjectListColumn.jsx","utilities/potionTypes.js","Components/PotionForm/PotionForm.jsx","Components/DisplayForm/DisplayForm.jsx","Components/DetailView/DetailView.jsx","Components/App/App.jsx","reducers/potionsReducer.js","reducers/detailReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["MenuBar","props","renderLogin","bind","renderGameLink","this","auth","href","type","key","className","React","Component","connect","state","ExpandableList","expanded","setExpansion","currentState","setState","onClick","getTitle","getNewButton","displayContents","NewButton","PotionsList","setDisplayForm","potions","newPotions","map","potion","console","log","dispatch","form","fetchUser","a","axios","get","res","payload","data","fetchPotions","ObjectListColumn","componentDidMount","actions","potionTypes","PotionForm","potionType","value","action","id","method","htmlFor","name","placeholder","maxLength","min","max","getPotionOptions","process","EDITOR_API_KEY","class","getForm","DetailView","getDetailForm","formType","detail","App","initialState","targetId","edit","combineReducers","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e39d2782.chunk.js","sourcesContent":["import React from 'react';\nimport './MenuBar.css';\n\nimport { connect } from 'react-redux';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderGameLink = this.renderGameLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderGameLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"gameLink\"><a className=\"GameLink\" href=\"/\">game</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderGameLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './ExpandableList.css';\n\nclass ExpandableList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false\n    }\n\n    this.setExpansion = this.setExpansion.bind(this);\n  }\n\n  getNewButton() {\n    return ''\n  }\n\n  getTitle() {\n    return 'Item'\n  }\n\n  setExpansion() {\n    const currentState = this.state.expanded;\n    this.setState({\n      expanded: !currentState\n    });\n  }\n\n  displayContents() {\n    return (\n      <div>\n        <p>contents</p>\n        <p>contents</p>\n        <p>contents</p>\n      </div>\n    )\n  }\n  \n  render() {\n    return (\n      <div className=\"ExpandableList\">\n        <div className=\"TitleBar\">\n          <span className=\"expansionBtn\" onClick={this.setExpansion}>\n            {this.state.expanded ? '-' : '+'}\n          </span>\n          <span className=\"ExpanderTitle\">{this.getTitle()}</span>\n          {this.getNewButton()}\n        </div>\n        {this.state.expanded ? this.displayContents() : ''}\n      </div>\n    )\n  }\n}\n\nexport default ExpandableList;","import React from 'react';\nimport './NewButton.css';\n\nclass NewButton extends React.Component {\n  render() {\n    return (\n      <div className=\"NewButton\">\n        <div className=\"buttonIcon\">+</div>\n      </div>\n    )\n  }\n}\n\nexport default NewButton;","import React from 'react';\nimport './PotionList.css';\n\nimport ExpandableList from '../ExpandableList/ExpandableList';\nimport NewButton from '../NewButton/NewButton';\n\n// redux imports\nimport { connect  } from 'react-redux';\nimport { SET_DETAIL_FORM } from '../../actions/types';\n\nclass PotionsList extends ExpandableList {\n  constructor(props) {\n    super(props);\n\n    this.displayContents = this.displayContents.bind(this);\n    this.getNewButton = this.getNewButton.bind(this);\n  }\n\n  getTitle() {\n    return 'Potions'\n  }\n\n  getNewButton() {\n    return (\n      <div className=\"NewPotionButton\" onClick={() => this.props.setDisplayForm('potion')}>\n        <NewButton />\n      </div>\n    )\n  }\n\n  displayContents() {\n    if (!this.props.potions) {\n      return '';\n    } else {\n      const newPotions = this.props.potions;\n      return (\n        <div className=\"detailList\">\n          { newPotions.map(potion => {\n            console.log(potion);\n            return (\n              <div>\n                <span className=\"ListDetail\" onClick={() => this.props.setDisplayForm('potion')}>{potion.type}</span>\n              </div>\n            )\n            })}\n        </div>);\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    potions: state.potions.potions\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDisplayForm: (form) => dispatch({ type: SET_DETAIL_FORM, form: form })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PotionsList);","export const FETCH_USER = \"FETCH_USER\";\nexport const SET_POTIONS = \"SET_POTIONS\";\nexport const SET_DETAIL_FORM = \"SET_DETAIL_FORM\";","import axios from 'axios';\nimport { FETCH_USER, SET_POTIONS } from './types';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n}\n\nexport const fetchPotions = () => async dispatch => {\n  const res = await axios.get('/potions');\n  dispatch({ type: SET_POTIONS, payload: res.data});\n}","import React from 'react';\nimport './ObjectListColumn.css';\n\n// component imports\n// import ExpandableList from '../ExpandableList/ExpandableList';\nimport PotionsList from '../PotionsList/PotionsList';\n\n// redux imports\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass ObjectListColumn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchPotions();\n  }\n\n  render() {\n    return (\n      <div className=\"ObjectListColumn\">\n        <PotionsList />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    potions: state.potions.potions\n  }\n}\n\nexport default connect(mapStateToProps, actions)(ObjectListColumn);","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import React from 'react';\nimport './PotionForm.css';\n\n// import endpoint for Post request\n// import endpoints from '../../utilities/endpoints';\n\nimport potionTypes from '../../utilities/potionTypes';\n\nimport DisplayForm from '../DisplayForm/DisplayForm';\n\nclass PotionForm extends DisplayForm {\n  getPotionOptions() {\n    return potionTypes.map(potionType => {\n      return <option value={potionType}>{potionType}</option>\n    })\n  }\n\n  getForm() {\n    return (\n      <div className=\"PotionForm\">\n        <h2 className=\"form-heading\">New Potion</h2>\n        <form action={'/potions'}\n          className=\"input-fields-area\"\n          id=\"PotionPostForm\"\n          method=\"POST\">\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"name\">Name</label>\n              <input type=\"text\" name=\"name\" id=\"name\" className=\"input-text\" placeholder=\"potion name\"\n                maxLength=\"26\"></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"value\">Value</label>\n              <input type=\"number\" name=\"value\" id=\"value\" className=\"input-number\" placeholder=\"#\"\n                min=\"1\" max=\"10000\"></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"details\">Details</label>\n              <input type=\"text\" name=\"details\" id=\"details\" className=\"input-text\" placeholder=\"details...\"\n                maxLength=\"200\"></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"type\">Type</label>\n              <select className=\"potion-select\" name=\"type\" id=\"type\">\n                {this.getPotionOptions()}\n              </select>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"level\">Level</label>\n              <input type=\"number\" name=\"level\" id=\"level\" className=\"input-number\" placeholder=\"#\"></input>\n            </div>\n            <input type=\"hidden\" name=\"key\" id=\"key\" value={process.env.EDITOR_API_KEY}></input>\n            <input type=\"submit\" value=\"Create Potion\" class=\"button create-button\"></input>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default PotionForm;","import React from 'react';\nimport './DisplayForm.css';\n\nclass DisplayForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getForm = this.getForm.bind(this);\n  }\n\n  getForm() {\n    return ''\n  }\n  \n  render() {\n    return (\n      <div className=\"DisplayForm\">\n        {this.getForm()}\n      </div>\n    )\n  }\n}\n\nexport default DisplayForm;","import React from 'react';\nimport './DetailView.css';\n\nimport PotionForm from '../PotionForm/PotionForm';\n\nimport { connect } from 'react-redux';\n\nclass DetailView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDetailForm = this.getDetailForm.bind(this);\n  }\n\n  getDetailForm() {\n    if (!this.props.formType) {\n      return (<div className=\"BlankForm\">no details to display</div>);\n    }\n\n    switch(this.props.formType) {\n      case 'potion':\n        return <PotionForm />;\n      default:\n        return (<div className=\"BlankForm\">detail type unknown</div>)\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"DetailView\">\n        {this.getDetailForm()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    formType: state.detail.type\n  }\n}\n\nexport default connect(mapStateToProps)(DetailView);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport MenuBar from '../MenuBar/MenuBar';\nimport ObjectListColumn from '../ObjectListColumn/ObjectListColumn';\nimport DetailView from '../DetailView/DetailView';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        <div className=\"AppContainer\">\n          <ObjectListColumn />\n          <DetailView />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, actions)(App);\n","import { SET_POTIONS } from '../actions/types';\n\nconst initialState = {\n  potions: null\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_POTIONS:\n      return {\n        ...state,\n        potions: action.payload\n      }\n    default:\n      return state;\n  }\n}","import { SET_DETAIL_FORM } from '../actions/types';\n\nconst initialState = {\n  type: false,\n  targetId: null,\n  edit: false\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case SET_DETAIL_FORM:\n      return {\n        ...state,\n        type: action.form\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport potionsReducer from './potionsReducer';\nimport detailReducer from './detailReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  potions: potionsReducer,\n  detail: detailReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}