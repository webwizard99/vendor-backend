{"version":3,"sources":["Components/MenuBar/MenuBar.jsx","Components/ExpandableList/ExpandableList.jsx","Components/NewButton/NewButton.jsx","Components/PotionsList/PotionsList.jsx","actions/types.js","actions/index.js","Components/ObjectListColumn/ObjectListColumn.jsx","utilities/potionTypes.js","Components/DisplayForm/DisplayForm.jsx","Components/CloseFormButton/CloseFormButton.jsx","Components/PotionForm/PotionForm.jsx","Components/DisplayStatic/DisplayStatic.jsx","Components/EditButton/EditButton.jsx","Components/DeleteButton/DeleteButton.jsx","utilities/deleteRequests.js","Components/PotionDisplay/PotionDisplay.jsx","Components/DetailView/DetailView.jsx","Components/DialogBox/DialogBox.jsx","Components/App/App.jsx","reducers/potionsReducer.js","reducers/detailReducer.js","reducers/dialogReducer.js","reducers/stateReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["MenuBar","props","renderLogin","bind","renderGameLink","this","auth","href","type","key","className","React","Component","connect","state","ExpandableList","expanded","setExpansion","currentState","setState","onClick","getTitle","getNewButton","displayContents","NewButton","PotionsList","setDisplayForm","form","edit","targetId","potions","newPotions","map","potion","potionClass","id","item","name","detail","dispatch","payload","fetchUser","a","axios","get","res","data","fetchPotions","ObjectListColumn","componentDidMount","nextProps","dialogActive","setDetailForm","allDispatches","actions","dialog","active","potionTypes","DisplayForm","getForm","getMethod","handleCloseButton","CloseFormButton","PotionForm","potionType","value","e","preventDefault","displayId","newHeading","newName","newValue","newDetails","newPotionType","newLevel","thisPotion","find","details","level","action","method","htmlFor","placeholder","maxLength","defaultValue","min","max","getPotionOptions","class","DisplayStatic","getDisplay","getDeleteButton","handleYes","EditButton","DeleteButton","deleteRequests","makeRequest","deleteType","deleteId","fetch","PotionDisplay","window","dialogRef","setDialog","text","console","log","delRes","location","reload","DetailView","getDetail","getPotionDetail","detailUpdate","setDetailUpdate","formType","val","DialogBox","handleNo","clicked","target","classList","contains","ref","yesCallback","noCallback","App","getDialog","initialState","combineReducers","newTargetId","newEdit","newForm","Boolean","hostname","match","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5eff8e93.chunk.js","sourcesContent":["import React from 'react';\nimport './MenuBar.css';\n\nimport { connect } from 'react-redux';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderGameLink = this.renderGameLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderGameLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"gameLink\"><a className=\"GameLink\" href=\"/\">game</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderGameLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './ExpandableList.css';\n\nclass ExpandableList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expanded: false\n    }\n\n    this.setExpansion = this.setExpansion.bind(this);\n  }\n\n  getNewButton() {\n    return ''\n  }\n\n  getTitle() {\n    return 'Item'\n  }\n\n  setExpansion() {\n    const currentState = this.state.expanded;\n    this.setState({\n      expanded: !currentState\n    });\n  }\n\n  displayContents() {\n    return (\n      <div>\n        <p>contents</p>\n        <p>contents</p>\n        <p>contents</p>\n      </div>\n    )\n  }\n  \n  render() {\n    return (\n      <div className=\"ExpandableList\">\n        <div className=\"TitleBar\">\n          <span className=\"expansionBtn\" onClick={this.setExpansion}>\n            {this.state.expanded ? '-' : '+'}\n          </span>\n          <span className=\"ExpanderTitle\">{this.getTitle()}</span>\n          {this.getNewButton()}\n        </div>\n        {this.state.expanded ? this.displayContents() : ''}\n      </div>\n    )\n  }\n}\n\nexport default ExpandableList;","import React from 'react';\nimport './NewButton.css';\n\nclass NewButton extends React.Component {\n  render() {\n    return (\n      <div className=\"NewButton\">\n        <div className=\"buttonIcon\">+</div>\n      </div>\n    )\n  }\n}\n\nexport default NewButton;","import React from 'react';\nimport './PotionList.css';\n\nimport ExpandableList from '../ExpandableList/ExpandableList';\nimport NewButton from '../NewButton/NewButton';\n\n// redux imports\nimport { connect  } from 'react-redux';\nimport { SET_DETAIL_FORM } from '../../actions/types';\n\nclass PotionsList extends ExpandableList {\n  constructor(props) {\n    super(props);\n\n    this.displayContents = this.displayContents.bind(this);\n    this.getNewButton = this.getNewButton.bind(this);\n  }\n\n  getTitle() {\n    return 'Potions'\n  }\n\n  getNewButton() {\n    return (\n      <div className=\"NewPotionButton\" onClick={() => this.props.setDisplayForm({ form: 'potion', edit: false, targetId: null })}>\n        <NewButton />\n      </div>\n    )\n  }\n\n  displayContents() {\n    if (!this.props.potions) {\n      return '';\n    } else {\n      const newPotions = this.props.potions;\n      return (\n        <div className=\"detailList\">\n          { newPotions.map(potion => {\n            let potionClass = \"ListDetail\";\n            if (this.props.form === \"potion\" && this.props.targetId === potion.id) {\n              potionClass += \" activeItem\"\n            }\n            return (\n              <div>\n                <span className={potionClass} onClick={() => this.props.setDisplayForm({ form: 'potion', edit: false, targetId: potion.id })}>{potion.item.name}</span>\n              </div>\n            )\n            })}\n        </div>);\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    potions: state.potions.potions,\n    form: state.detail.type,\n    targetId: state.detail.targetId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDisplayForm: (payload) => dispatch({ type: SET_DETAIL_FORM, payload: payload })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PotionsList);","export const FETCH_USER = \"FETCH_USER\";\nexport const SET_POTIONS = \"SET_POTIONS\";\nexport const SET_DETAIL_FORM = \"SET_DETAIL_FORM\";\nexport const SET_DIALOG = \"SET_DIALOG\";\nexport const SET_DETAIL_UPDATE = \"SET_DETAIL_UPDATE\";","import axios from 'axios';\nimport { FETCH_USER, SET_POTIONS } from './types';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n}\n\nexport const fetchPotions = () => async dispatch => {\n  const res = await axios.get('/potions');\n  dispatch({ type: SET_POTIONS, payload: res.data});\n}","import React from 'react';\nimport './ObjectListColumn.css';\n\n// component imports\n// import ExpandableList from '../ExpandableList/ExpandableList';\nimport PotionsList from '../PotionsList/PotionsList';\n\n// redux imports\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\nimport { SET_DETAIL_FORM } from '../../actions/types';\n\nclass ObjectListColumn extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidUpdate(nextProps) {\n    if (this.props.dialogActive && !this.nextProps.dialogActive) {\n      this.props.setDetailForm({\n        type: false,\n        targetId: null,\n        edit: false\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchPotions();\n  }\n\n  render() {\n    return (\n      <div className=\"ObjectListColumn\">\n        <PotionsList />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    potions: state.potions.potions,\n    dialogActive: state.dialog.active\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDetailForm: (payload) => dispatch({ type: SET_DETAIL_FORM, payload: payload })\n  }\n}\n\nconst allDispatches = {\n  ...mapDispatchToProps,\n  ...actions\n}\n\nexport default connect(mapStateToProps, allDispatches)(ObjectListColumn);","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import React from 'react';\nimport './DisplayForm.css';\n\nclass DisplayForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getForm = this.getForm.bind(this);\n    this.getMethod = this.getMethod.bind(this);\n    this.handleCloseButton = this.handleCloseButton.bind(this);\n  }\n\n  getForm() {\n    return '';\n  }\n\n  getMethod() {\n    return ''\n  }\n\n  handleCloseButton() {\n\n  }\n  \n  render() {\n    return (\n      <div className=\"DisplayForm\">\n        {this.getForm()}\n      </div>\n    )\n  }\n}\n\nexport default DisplayForm;","import React from 'react';\nimport './CloseFormButton.css';\n\nclass CloseFormButton extends React.Component {\n  render() {\n    return (\n      <div className=\"CloseFormButton\">\n        <p className=\"closeButtonIcon\">X</p>\n      </div>\n    )\n  }\n}\n\nexport default CloseFormButton;","import React from 'react';\nimport './PotionForm.css';\n\nimport potionTypes from '../../utilities/potionTypes';\n\nimport DisplayForm from '../DisplayForm/DisplayForm';\nimport CloseFormButton from '../CloseFormButton/CloseFormButton';\n\n// redux imports\nimport { connect } from 'react-redux';\nimport { SET_DETAIL_FORM } from '../../actions/types';\n\nclass PotionForm extends DisplayForm {\n  getPotionOptions() {\n    return potionTypes.map(potionType => {\n      return <option value={potionType}>{potionType}</option>\n    })\n  }\n\n  getMethod() {\n    if (!this.props.edit) {\n      return '_post'\n    } else {\n      return '_put'\n    }\n  }\n\n  handleCloseButton(e) {\n    e.preventDefault();\n    if (this.props.edit === false) {\n      this.props.setDisplayForm({ form: false, targetId: null, edit: false });\n    } else {\n      this.props.setDisplayForm({ form: 'potion', targetId: this.props.displayId, edit: false});\n    }\n  }\n\n  getForm() {\n    let newHeading = 'New Potion';\n    let newName = '';\n    let newValue = '';\n    let newDetails = '';\n    let newPotionType = '';\n    let newLevel = '';\n\n    if (this.props.edit) {\n      const allPotions = this.props.potions;\n      const thisPotion = allPotions.find(potion => potion.id === this.props.displayId);\n      newName = thisPotion.item.name;\n      newValue = thisPotion.item.value;\n      newDetails = thisPotion.item.details;\n      newPotionType = thisPotion.type;\n      newLevel = thisPotion.level;\n      newHeading = newName;\n    }\n    \n    return (\n      <div className=\"PotionForm\">\n        <div className=\"form-heading-bar\">\n          <h2 className=\"form-heading\">{newHeading}</h2>\n          <div className=\"close-potion-btn\" onClick={this.handleCloseButton}>\n            <CloseFormButton />\n          </div>\n        </div>\n        \n        <form action={'/potions'}\n          className=\"input-fields-area\"\n          id=\"PotionPostForm\"\n          method=\"POST\">\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"name\">Name</label>\n              <input type=\"text\" name=\"name\" id=\"name\" className=\"input-text\" placeholder=\"potion name\"\n                maxLength=\"26\" defaultValue={newName}></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"value\">Value</label>\n              <input type=\"number\" name=\"value\" id=\"value\" className=\"input-number\" placeholder=\"#\"\n                min=\"1\" max=\"10000\" defaultValue={newValue}></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"details\">Details</label>\n              <input type=\"text\" name=\"details\" id=\"details\" className=\"input-text\" placeholder=\"details...\"\n                maxLength=\"200\" defaultValue={newDetails}></input>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"type\">Type</label>\n              <select className=\"potion-select\" name=\"type\" id=\"type\" defaultValue={newPotionType}>\n                {this.getPotionOptions()}\n              </select>\n            </div>\n            <div className=\"input-group\">\n              <label className=\"item-label\" htmlFor=\"level\">Level</label>\n              <input type=\"number\" name=\"level\" id=\"level\" className=\"input-number\" placeholder=\"#\" defaultValue={newLevel}></input>\n            </div>\n            <input type=\"hidden\" name=\"_METHOD\" value={this.getMethod()}/>\n            <input type=\"submit\" value=\"Create Potion\" class=\"button create-button\"></input>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    edit: state.detail.edit,\n    potions: state.potions.potions,\n    displayId: state.detail.targetId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDisplayForm: (payload) => dispatch({ type: SET_DETAIL_FORM, payload: payload })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PotionForm);","import React from 'react';\nimport './DisplayStatic.css';\n\nclass DisplayStatic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDisplay = this.getDisplay.bind(this);\n    this.getDeleteButton = this.getDeleteButton.bind(this);\n    this.handleYes = this.handleYes.bind(this);\n  }\n\n  getDisplay() {\n    return '';\n  }\n\n  getDeleteButton() {\n    return '';\n  }\n\n  handleYes() {\n\n  }\n  \n  render() {\n    return (\n      <div className=\"DisplayStatic\">\n        {this.getDisplay()}\n        {this.getDeleteButton()}\n      </div>\n    )\n  }\n}\n\nexport default DisplayStatic;\n\n","import React from 'react';\nimport './EditButton.css';\n\nclass EditButton extends React.Component {\n  render() {\n    return (\n      <div className=\"EditButton\">\n        <div className=\"editButtonIcon\">edit</div>\n      </div>\n    )\n  }\n}\n\nexport default EditButton;","import React from 'react';\nimport './DeleteButton.css';\n\nclass DeleteButton extends React.Component {\n  render() {\n    return (\n      <div className=\"DeleteButton\">\n        <div className=\"deletButtonIcon\">\n          DELETE\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DeleteButton;","const deleteRequests = (function(){\n  return {\n    makeRequest: function(deleteType, deleteId) {\n      const deleteRes = fetch(`/${deleteType}/${deleteId}`, {\n        method: 'DELETE'\n      });\n      return deleteRes;\n    }\n  }\n}());\n\nexport default deleteRequests;","import React from 'react';\nimport './PotionDisplay.css';\n\nimport DisplayStatic from '../DisplayStatic/DisplayStatic';\nimport EditButton from '../EditButton/EditButton';\nimport DeleteButton from '../DeleteButton/DeleteButton';\n\n// redux imports\nimport { connect } from 'react-redux';\nimport { SET_DETAIL_FORM, SET_DIALOG } from '../../actions/types';\n\n// js utility imports\nimport deleteRequests from '../../utilities/deleteRequests';\n\nclass PotionDisplay extends DisplayStatic {\n  getDeleteButton() {\n    const thisRef = this;\n    window.dialogRef = thisRef;\n    return (\n      <div className=\"DeletePotionButton\" \n        onClick={() => this.props.setDialog({\n          active: true,\n          text: 'Delete Potion from Database?'\n      })}>\n        <DeleteButton />\n      </div>\n    )\n  }\n\n  handleYes() {\n    console.log('Delete handler in potion display component reached!');\n    const delRes = deleteRequests.makeRequest('potion', this.props.displayId);\n    console.log(delRes);\n    window.location.reload(false);\n    this.props.setDialog({ active: false, text: ''});\n  }\n  \n  getDisplay() {\n    const allPotions = this.props.potions;\n    const thisPotion = allPotions.find(potion => potion.id === this.props.displayId);\n    const name = thisPotion.item.name;\n    const value = thisPotion.item.value;\n    const details = thisPotion.item.details;\n    const potionType = thisPotion.type;\n    const level = thisPotion.level;\n    \n    return (\n      <div className=\"PotionDisplay\">\n        <div className=\"heading-bar\">\n          <h2 className=\"display-heading\">{name}</h2>\n          <div className=\"PotionEditButton\" onClick={()=> this.props.setDisplayForm({ form: 'potion', edit: true, targetId: thisPotion.id })}>\n            <EditButton />\n          </div>\n        </div>\n        \n        <div className=\"display-fields-area\">\n          <div className=\"display-group\">\n            <span className=\"display-label\">Name</span>\n            <span className=\"display-text\">{name}</span>\n          </div>\n          <div className=\"display-group\">\n            <span className=\"display-label\">Value</span>\n            <span className=\"display-number\">{value}</span>\n          </div>\n          <div className=\"display-group\">\n            <span className=\"display-label\">Details</span>\n            <span className=\"display-text\">{details}</span>\n          </div>\n          <div className=\"display-group\">\n            <span className=\"display-label\">Type</span>\n            <span className=\"display-text\">{potionType}</span>\n          </div>\n          <div className=\"display-group\">\n            <span className=\"display-label\">Level</span>\n            <span className=\"display-number\">{level}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    potions: state.potions.potions,\n    displayId: state.detail.targetId\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDisplayForm: (payload) => dispatch({ type: SET_DETAIL_FORM, payload: payload }),\n    setDialog: (payload) => dispatch({ type: SET_DIALOG, payload: payload })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PotionDisplay);","import React from 'react';\nimport './DetailView.css';\n\nimport PotionForm from '../PotionForm/PotionForm';\nimport PotionDisplay from '../PotionDisplay/PotionDisplay';\n\n// redux imports\nimport { connect } from 'react-redux';\nimport { SET_DETAIL_UPDATE } from '../../actions/types';\n\nclass DetailView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDetail = this.getDetail.bind(this);\n    this.getPotionDetail = this.getPotionDetail.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.props.detailUpdate) {\n      this.props.setDetailUpdate(false);\n    }\n  }\n\n  getPotionDetail() {\n    if (this.props.targetId === null || this.props.edit) {\n      return <PotionForm />\n    } else {\n      return <PotionDisplay />\n    }\n  }\n\n  getDetail() {\n    if (!this.props.formType) {\n      return (<div className=\"BlankForm\">no details to display</div>);\n    }\n\n    switch(this.props.formType) {\n      case 'potion':\n        return this.getPotionDetail();\n      default:\n        return (<div className=\"BlankForm\">detail type unknown</div>)\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"DetailView\">\n        {this.getDetail()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    formType: state.detail.type,\n    targetId: state.detail.targetId,\n    edit: state.detail.edit,\n    detailUpdate: state.state.detailUpdate\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDetailUpdate: (val) => dispatch({ type: SET_DETAIL_UPDATE, val: val })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailView);","import React from 'react';\nimport './DialogBox.css';\n\nimport { connect } from 'react-redux';\nimport { SET_DIALOG } from '../../actions/types';\n\nclass DialogBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNo = this.handleNo.bind(this);\n    this.handleYes = this.handleYes.bind(this);\n  }\n  \n  handleNo(e) {\n    const clicked = e.target.classList;\n    if (clicked.contains('DialogBoxContainer') || clicked.contains('dialog-no-btn')) {\n      this.props.setDialog({ active: false, text: '', ref: null, yesCallback: null, noCallback: null })\n    }\n  }\n\n  handleYes() {\n    // dialogRef is attached to window method in component method\n    // that invokes dialogReducer to bring up dialog box\n    window.dialogRef.handleYes();\n  }\n  \n  render() {\n    return (\n      <div className=\"DialogBoxContainer\" \n        onClick={this.handleNo}>\n        <div className=\"DialogBox\">\n          <div className=\"dialog-heading-bar\">\n            <h2 className=\"dialog-heading\">Confirm Choice</h2>\n          </div>\n          <div className=\"dialog-prompt\">\n            {this.props.text}\n          </div>\n          <div className=\"dialog-button-bar\">\n            <button className=\"dialog-no-btn\" onClick={this.handleNo}>\n              NO\n            </button>\n            <button className=\"dialog-yes-btn\" onClick={this.handleYes}>\n              YES\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    text: state.dialog.text\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDialog: payload => dispatch({ type: SET_DIALOG, payload: payload })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DialogBox);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport MenuBar from '../MenuBar/MenuBar';\nimport ObjectListColumn from '../ObjectListColumn/ObjectListColumn';\nimport DetailView from '../DetailView/DetailView';\nimport DialogBox from '../DialogBox/DialogBox';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.getDialog = this.getDialog.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getDialog() {\n    if (!this.props.dialogActive) {\n      return ''\n    } else {\n      return <DialogBox />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        <div className=\"AppContainer\">\n          <ObjectListColumn />\n          <DetailView />\n        </div>\n        {this.getDialog()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    dialogActive: state.dialog.active\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);\n","import { SET_POTIONS } from '../actions/types';\n\nconst initialState = {\n  potions: null\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_POTIONS:\n      return {\n        ...state,\n        potions: action.payload\n      }\n    default:\n      return state;\n  }\n}","import { SET_DETAIL_FORM } from '../actions/types';\n\nconst initialState = {\n  type: false,\n  targetId: null,\n  edit: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DETAIL_FORM:\n      let newTargetId = action.payload.targetId;\n      let newEdit = action.payload.edit;\n      let newForm = action.payload.form;\n      // if (!newTargetId && newTargetId !== 0) {\n      //   newTargetId = state.targetId;\n      // }\n      // if (!newEdit) {\n      //   newEdit = state.edit;\n      // }\n      // if (!newForm) {\n      //   newForm = state.form;\n      // }\n      return {\n        ...state,\n        type: newForm,\n        targetId: newTargetId,\n        edit: newEdit\n      }\n    default:\n      return state;\n  }\n}","import { SET_DIALOG } from '../actions/types';\n\nconst initialState = {\n  active: false,\n  text: ''\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DIALOG:\n      return {\n        ...state,\n        active: action.payload.active,\n        text: action.payload.text\n      }\n    default:\n      return state;\n  }\n}","import { SET_DETAIL_UPDATE } from '../actions/types';\n\nconst initialState = {\n  detailUpdate: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DETAIL_UPDATE:\n      return {\n        ...state,\n        detailUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport authReducer from './authReducer';\nimport potionsReducer from './potionsReducer';\nimport detailReducer from './detailReducer';\nimport dialogReducer from './dialogReducer';\nimport stateReducer from './stateReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  potions: potionsReducer,\n  detail: detailReducer,\n  dialog: dialogReducer,\n  state: stateReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}