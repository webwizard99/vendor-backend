{"version":3,"sources":["Utilities/itemTypes.js","Utilities/potionTypes.js","game_modules/items.js","game_modules/storeInventory.js","actions/types.js","Components/StoreInventory/StoreInventory.jsx","game_modules/store.js","game_modules/days.js","game_modules/supplies.js","game_modules/suppliers.js","actions/index.js","Components/Store/Store.jsx","Components/SupplierBuyButton/SupplierBuyButton.jsx","Components/Supplier/Supplier.jsx","Components/Suppliers/Suppliers.jsx","Components/Days/Days.jsx","Components/Details/Details.jsx","Containers/GameScreen/GameScreen.jsx","Components/Title/Title.jsx","game_modules/main.js","Containers/StartScreen/StartScreen.jsx","Components/MenuBar/MenuBar.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/suppliersReducer.js","reducers/suppliesReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["itemTypes","potion","weapon","armor","potionTypes","items","ItemTypes","PotionTypes","allItems","itemTypeIndex","lastIndex","Item","payload","type","name","value","prototypeId","this","id","Potion","level","Weapon","damage","Armor","createItem","itemPayload","newItem","newPotionType","console","log","newPotionLevel","potionPayload","newWeaponDamage","newWeaponLevel","weaponPayload","newArmorArmor","newArmorLevel","armorPayload","push","getItem","thisItem","find","item","getItemType","getItemTypeIndex","createTestPotion","lvl","healing","getItemTypes","storeInventory","inventory","composeInventory","composedInventory","forEach","gameItems","itemId","markup","addItem","undefined","newStoreItem","getStoreInventory","updateStoreInventory","store","dispatch","dispatchStoreInventory","getComposedInventory","getFilteredInventory","newFilter","toLowerCase","filter","getFilteredStoreItems","markupFilteredStoreItems","newMarkup","markupAmount","inventoryItem","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","filteredInventory","length","filterActive","storeFilter","map","composedPrice","Math","floor","className","key","React","Component","connect","state","storeState","inventoryCount","storeNeedsUpdate","needsUpdate","gameStore","gold","chargeGold","amount","getName","setName","newName","getStartingGold","getGold","setGold","newGold","updateGold","dispatchStoreGold","days","day","getDay","setDay","newDay","resetDay","supplies","suppliesPool","supplyLevel","itemTypesArr","Object","values","itemTypeCount","itemSpawnCount","fetchItemArrForSupplyPool","a","typeToFetch","maxLvl","fetchURL","fetch","possibleItems","json","getItemForSupplyPool","newItems","then","itemsOfLevel","dispatchSpawned","catch","err","spawnSupply","typeIndex","random","typeToSpawn","newSupplyArr","Array","isArray","Items","getSupplies","fillSupplies","i","dispatchReady","fillSupplyPool","typeItem","depleteSupply","supplyIndex","indexOf","splice","setSupplyLevel","suppliers","currentId","Supplier","offerings","prototype","rankFavorites","bestOfferings","offeringsCount","sort","off1","off2","rankedOfferings","sellItem","price","itemIndex","dispatchSuppliers","newSuppliers","fetchSuppliers","initSuppliers","getSuppliers","initializeSuppliers","maxSuppliers","next","drainSuppliers","pushIndex","newSupplier","supplierPayload","thisSupplier","supplier","takeSupplierTurn","remainingSupplies","supplyTypes","supplyValues","remainingSupply","supplyItem","currentSupplier","supplierCount","remSupply","remNum","supplierTries","thisIndex","taken","supplierIndex","favorites","thisSupply","takeSupplies","dispatchSupplyReady","refSupplier","sellPayload","updateSuppliers","fetchUser","axios","get","res","data","fetchGold","fetchDay","Store","componentDidMount","toggleFilter","getFilter","handleFilter","getIncrementButtons","handleIncrease","handleDecrease","e","currentType","target","setStoreFilter","gameInventory","toggleStoreUpdateStatus","dir","onPointerDown","handlePress","onClick","defaultValue","onChange","itemType","newValue","setStoreFilterActive","storeName","role","aria-label","setStoreGold","SupplierBuyButton","getSuppllierInventory","handlePurchase","ids","storeGold","sellId","gameSuppliers","gameStoreInventory","initialized","thisInventory","inventoryGroups","valueGroups","typeGroups","idGroups","composedItems","entries","count","item1","item2","nameA","toUpperCase","nameB","findIndex","offering","composedValue","supplyReady","ready","Suppliers","suppliersInitialized","componentDidUpdate","supplySpawned","gameSupplies","gameSupplier","setState","currentSuppliers","suppliersDisplay","renderSupplier","spawned","Days","handleNextDay","currentDay","Details","GameScreen","Title","main","init","startingGold","getGameLevel","StartScreen","handleStart","handleNameInput","game","setStarted","charCode","htmlFor","val","setStoreName","onKeyPress","started","gameState","MenuBar","renderLogin","renderEditorLink","auth","href","App","getMainView","actions","initialState","storeUpdate","combineReducers","action","updates","newCount","newStatus","number","Boolean","window","location","hostname","match","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5b672677.chunk.js","sourcesContent":["const itemTypes = {\n  potion: 'potion',\n  weapon: 'weapon',\n  armor: 'armor'\n}\n\nexport default itemTypes;","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import ItemTypes from '../Utilities/itemTypes';\nimport PotionTypes from '../Utilities/potionTypes';\n\nconst items = (function(){\n  const itemTypes = ItemTypes;\n  const potionTypes = PotionTypes;\n\n  let allItems = [];\n  let itemTypeIndex = {};\n  let lastIndex = 0;\n  \n  const Item = function(payload) {\n    const { type, name, value, prototypeId } = payload;\n    this.type = type;\n    this.name = name;\n    this.value = value;\n    this.prototypeId = prototypeId;\n    this.id = lastIndex;\n    itemTypeIndex[lastIndex] = type;\n    lastIndex++;\n  }\n\n  const Potion = function(payload) {\n    const { type, level } = payload;\n    this.type = type;\n    this.level = level;\n  }\n\n  const Weapon = function(payload) {\n    const { damage, level } = payload;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  const Armor = function(payload) {\n    const { armor, level } = payload;\n    this.armor = armor;\n    this.level = level;\n  }\n  \n  return {\n    createItem: function(payload) {\n      let { type, name, value, itemPayload } = payload;\n      if (!itemTypes[type]) {\n        console.log('invalid item type passed to items.createItem()');\n        return;\n      }\n      \n      const newPayload = { type: type , name: name , value: value }\n      const newItem = new Item(newPayload);\n      \n      switch (newItem.type) {\n        case itemTypes.potion:\n          const newPotionType = itemPayload.type;  \n          if (!newPotionType) {\n            console.log('attempted to create invalid potion type');\n            return;\n          }\n          const newPotionLevel = itemPayload.level;\n          if (!newPotionLevel) {\n            console.log('attempted to create a potion with an invalid level');\n            return;\n          }\n          const potionPayload = { type: newPotionType, level: newPotionLevel };\n          newItem[newItem.type] = new Potion(potionPayload);\n          break;\n        case itemTypes.weapon:\n          const newWeaponDamage = itemPayload.damage;\n          if (!newWeaponDamage) {\n            console.log('attempted to create a weapon without damage');\n            return;\n          }\n          const newWeaponLevel = itemPayload.level;\n          if (!newWeaponLevel) {\n            console.log('attempted to create a weapon with an invalid level');\n            return;\n          }\n          const weaponPayload = { damage: newWeaponDamage, level: newWeaponLevel };\n          newItem[newItem.type] = new Weapon(weaponPayload);\n          break;\n        case itemTypes.armor:\n          const newArmorArmor = itemPayload.armor;\n          if (!newArmorArmor) {\n            console.log('attempted to make a new armor without an armor value');\n            return;\n          }\n          const newArmorLevel = itemPayload.level;\n          if (!newArmorLevel) {\n            console.log('attempted to make a new armor without a level value');\n            return;\n          }\n          const armorPayload = { armor: newArmorArmor, level: newArmorLevel };\n          newItem[newItem.type] = new Armor(armorPayload);\n          break;\n        default:\n          break;\n      }\n\n      allItems.push(newItem);\n      return newItem.id;\n    },\n\n    getItem(id) {\n      let thisItem = allItems.find(item => item.id === id);\n      if (thisItem) {\n        return thisItem;\n      } else {\n        console.log('attempted to retrieve invalid item.')\n      }\n    },\n\n    getItemType(id) {\n      if (itemTypeIndex[id] !== null) {\n        return itemTypeIndex[id];\n      } else {\n        return false;\n      }\n    },\n\n    getItemTypeIndex() {\n      return itemTypeIndex;\n    },\n\n    createTestPotion: function(lvl) {\n      const newItem = new Item({ type: itemTypes.potion, name: 'Healing Potion', value: 60});\n      newItem[itemTypes.potion] = new Potion({ type: potionTypes.healing, level: lvl});\n      return newItem;\n    },\n\n    getItemTypes: function() {\n      return itemTypes;\n    }\n  }\n}());\n\nexport default items;","// redux imports\nimport { store } from '../index';\nimport { SET_STORE_INVENTORY } from '../actions/types';\n\n// game module imports\nimport gameItems from './items';\n\nconst storeInventory = (function(){\n  // {\n  //   itemId: Number,\n  //   markup: number\n  // }\n  let inventory = [];\n\n  const maxMarkup = 4000;\n\n  const dispatchStoreInventory = function() {\n    const payload = {\n      type: SET_STORE_INVENTORY,\n      inventory: inventory\n    }\n    store.dispatch(payload);\n  }\n\n  const composeInventory = function() {\n    let composedInventory = [];\n      inventory.forEach(item => {\n        let thisItem = gameItems.getItem(item.itemId);\n        composedInventory.push({ ...thisItem, markup: item.markup });\n      });\n      return composedInventory;\n  }\n\n  const filterInventory = function(filter) {\n    let filteredInventory = composeInventory().filter(item => item.type === filter);\n    return filteredInventory;\n  }\n\n  const filterStoreItems = function(filter) {\n    let filteredIds = inventory.filter(item => {\n      return storeInventory.getItemType(item.itemId) === filter\n    });\n    return filteredIds;\n  }\n\n  const markupFilteredItems = function(filter, newMarkup) {\n    inventory.forEach(inventoryItem => {\n      if (filter.toLowerCase() === 'all' || gameItems.getItemType(inventoryItem.itemId) === filter) {\n        inventoryItem.markup += newMarkup;\n        if (inventoryItem.markup > maxMarkup) {\n          inventoryItem.markup = maxMarkup;\n        }\n        if (inventoryItem.markup < 0) {\n          inventoryItem.markup = 0;\n        }\n      }\n    });\n  }\n\n  return {\n    addItem: function(id) {\n      if (id === null || id === undefined) {\n        return false;\n      }\n      const newStoreItem = { itemId: id,\n        markup: 150\n      }\n      inventory.push(newStoreItem);\n    },\n\n    getStoreInventory: function() {\n      return inventory;\n    },\n\n    updateStoreInventory: function() {\n      dispatchStoreInventory();\n    },\n\n    getComposedInventory: function() {\n      return composeInventory();\n    },\n\n    getFilteredInventory: function(newFilter) {\n      if (!newFilter || newFilter.toLowerCase() === 'all') {\n        return composeInventory();\n      }\n      else {\n        return filterInventory(newFilter);\n      }\n    },\n    \n    getFilteredStoreItems: function(newFilter) {\n      return filterStoreItems(newFilter);\n    },\n\n    markupFilteredStoreItems: function(payload) {\n      let { filter:newFilter, markup:markupAmount } = payload;\n      markupFilteredItems(newFilter, markupAmount);\n    }\n  }\n}());\n\nexport default storeInventory;","export const SET_DAY = \"SET_DAY\";\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\nexport const SET_UPDATES = \"SET_UPDATES\";\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\nexport const SET_STORE_INVENTORY = \"SET_STORE_INVENTORY\";\nexport const FETCH_USER = \"FETCH_USER\";\nexport const SET_SUPPLIERS = \"SET_SUPPLIERS\";\nexport const SET_SUPPLY_READY = \"SET_SUPPLY_READY\";\nexport const SET_SUPPLY_SPAWNED = \"SET_SUPPLY_SPAWNED\";\nexport const SET_STORE_FILTER = \"SET_STORE_FILTER\";\nexport const SET_STORE_FILTER_ACTIVE = \"SET_STORE_FILTER_ACTIVE\";\nexport const SET_STORE_UPDATE_STATUS = \"SET_STORE_UPDATE_STATUS\";","import React from 'react';\nimport './StoreInventory.css';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_INVENTORY } from '../../actions/types';\n\nimport storeInventory from '../../game_modules/storeInventory';\n// import storeItems from '../../game_modules/items';\n\nclass StoreInventory extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.getInventoryItems = this.getInventoryItems.bind(this);\n  }\n\n  componentDidMount() {\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\n    this.props.setInventory(newInventory);\n  }\n\n  getInventoryItems() {\n    if (this.props.inventory && this.props.inventory.length > 0) {\n      let filteredInventory;\n      if (!this.props.filterActive || this.props.storeFilter === 'all') {\n        filteredInventory = storeInventory.getComposedInventory();\n      } else {\n        filteredInventory = storeInventory.getFilteredInventory(this.props.storeFilter);\n      }\n      return (\n        <div>{filteredInventory.map(item => {\n          const composedPrice = Math.floor(item.value * (1 + (item.markup / 1000)));\n          return (\n            <div className=\"InventoryItem itemBackground\" key={item.id}>\n              <span className=\"InventoryItemName\">{item.name}</span>\n              <div className=\"ItemValueGroup\">\n                <span className=\"CoinSymbol\">&#x2689; </span>\n                <span className=\"InventoryItemValue\">{composedPrice}</span>\n              </div>\n              \n            </div>\n          )\n        })}</div>\n      )     \n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"StoreInventory\">\n        {this.getInventoryItems()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.storeState.inventory,\n    inventoryCount: state.storeState.inventoryCount,\n    filterActive: state.storeState.filterActive,\n    storeFilter: state.storeState.filter,\n    storeNeedsUpdate: state.storeState.needsUpdate\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","// redux imports\nimport { store } from '../index';\nimport { SET_STORE_GOLD } from '../actions/types';\n\nconst gameStore = (function(){\n  let name = '';\n\n  const startingGold = 1000;\n  let gold = startingGold;\n\n  const dispatchStoreGold = function() {\n    const payload = {\n      type: SET_STORE_GOLD,\n      amount: gold\n    }\n    store.dispatch(payload);\n  }\n  \n  return {\n    chargeGold: function(amount) {\n      if (gold < amount) {\n        console.log('attempted to charge more gold than vendor owns')\n        return false;\n      }\n      gold -= amount;\n    },\n    getName: function() {\n      return name;\n    },\n\n    setName: function(newName) {\n      name = newName;\n    },\n\n    getStartingGold: function() {\n      return startingGold;\n    },\n\n    getGold: function() {\n      return gold;\n    },\n\n    setGold: function(newGold) {\n      gold = newGold;\n    },\n    updateGold: function() {\n      dispatchStoreGold();\n    }\n  }\n}());\n\nexport default gameStore;","const days = (function (){\n  const startDay = 1;\n  let day = startDay;\n\n  return {\n    getDay: function() {\n      return day;\n    },\n\n    setDay: function(newDay) {\n      if (typeof newDay !== \"number\") {\n        console.log(\"trying to set day to a non number value!\");\n        return;\n      }\n      day = newDay;\n    },\n\n    resetDay: function() {\n      day = startDay;\n    }\n  }\n}());\n\nexport default days;","import ItemTypes from '../Utilities/itemTypes';\nimport Items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst supplies = (function(){\n  let supplies = [];\n\n  let suppliesPool = {};\n  let supplyLevel = 1;\n\n  const itemTypesArr = Object.values(ItemTypes);\n  const itemTypeCount = itemTypesArr.length;\n  let itemSpawnCount = 0;\n\n  const dailySupplies = 10;\n\n  const dispatchReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSpawned = function(value) {\n    const payload = {\n      type: SET_SUPPLY_SPAWNED,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  // fill supply pool\n  const fetchSupplyPool = function() {\n    // produce array of type strings and choose one at random\n    itemSpawnCount = 0;\n    itemTypesArr.forEach(typeItem => {\n      if (suppliesPool[typeItem] == null) {\n        suppliesPool[typeItem] = [];\n      }\n      suppliesPool[typeItem].length = 0;\n    });\n\n    getItemForSupplyPool();\n    return true;\n  }\n\n  // fetch an item from backend\n  const fetchItemArrForSupplyPool = async function() {\n    let lvl = supplyLevel;\n    if (!lvl) return;\n\n    let typeToFetch = itemTypesArr[itemSpawnCount];\n\n    if (typeToFetch !== 'armor') {\n      typeToFetch += 's';\n    }\n\n    const minLvl = 1;\n    const maxLvl = lvl;\n\n    const fetchURL = `/${typeToFetch}-in-level-range?min-level=${minLvl}&max-level=${maxLvl}`;\n    \n    let possibleItems;\n    try {\n      possibleItems = await fetch(fetchURL);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (possibleItems) {\n      possibleItems = possibleItems.json();\n    }\n\n    return possibleItems;\n  }\n\n  // take an item that was fetched from backend and create it\n  // with item constructors and put it into state\n  const getItemForSupplyPool = function() {\n    if (itemSpawnCount >= itemTypeCount) {\n      return;\n    }\n    let newItems;\n    fetchItemArrForSupplyPool()\n      .then(itemsOfLevel => {\n        newItems = itemsOfLevel;\n      \n        // initialize field on pool if need be\n        if (suppliesPool[itemTypesArr[itemSpawnCount]] === null) {\n          suppliesPool[itemTypesArr[itemSpawnCount]] = [];\n        }\n        // push item id into supplies\n        suppliesPool[itemTypesArr[itemSpawnCount]].push(newItems);\n\n        itemSpawnCount++;\n        if (itemSpawnCount === itemTypeCount) {\n          dispatchSpawned(true);\n        }\n        getItemForSupplyPool();\n        return true;\n      }).catch(err => console.log(err));\n  }\n\n  const spawnSupply = function() {\n    // produce array of type strings and choose one at random\n    let typeIndex = Math.floor(Math.random() * itemTypesArr.length);\n    let typeToSpawn = itemTypesArr[typeIndex];\n    const newSupplyArr = suppliesPool[typeToSpawn];\n    let randomChoice = Math.floor(Math.random() * newSupplyArr.length);\n    let newItem = newSupplyArr[randomChoice];\n\n    if (Array.isArray(newItem)) {\n      newItem = newItem[0];\n    }\n\n    // compose payload for Item constructor\n    let itemPayload = {};\n    itemPayload.level = newItem.level;\n    switch(newItem.item.type) {\n      case ItemTypes.potion:\n        itemPayload.type = newItem.type;\n        break;\n      case ItemTypes.weapon:\n        itemPayload.damage = newItem.damage;\n        break;\n      case ItemTypes.armor:\n        itemPayload.armor = newItem.armor;\n        break;\n      default:\n        break;\n    }\n    let payload = {};\n    payload.itemPayload = itemPayload;\n    payload.type = newItem.item.type;\n    payload.name = newItem.item.name;\n    payload.value = newItem.item.value;\n    payload.prototypeId = newItem.item.id;\n\n    // create item and add to total inventory in Items module\n    let itemId = Items.createItem(payload);\n    supplies.push(itemId);\n\n  }\n  \n  return {\n    getSupplies: function() {\n      return supplies;\n    },\n    fillSupplies: function() {\n      for (let i = 0; i < dailySupplies; i++) {\n        spawnSupply();\n      }\n      dispatchReady(true);\n    },\n    fillSupplyPool: function() {\n      fetchSupplyPool();\n    },\n    depleteSupply: function(id) {\n      let supplyIndex = supplies.indexOf(id);\n      if (supplyIndex >= 0) {\n        let chosenSupply = supplies.splice(supplyIndex, 1);\n        return chosenSupply;\n      }\n    },\n    setSupplyLevel: function(lvl) {\n      supplyLevel = lvl;\n    }\n  }\n}());\n\nexport default supplies;","// game imports\nimport supplies from './supplies';\nimport items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLIERS, SET_SUPPLY_READY } from '../actions/types';\n\nconst suppliers = (function(){\n\n  let suppliers = [];\n\n  let currentId = 0;\n\n  const startingGold = 1000;\n\n  const Supplier = function(payload) {\n    const { name, offerings } = payload;\n    this.name = name;\n    this.offerings = offerings;\n    this.inventory = [];\n    this.id = currentId;\n    currentId++;\n  }\n\n  Supplier.prototype.rankFavorites = function() {\n    let bestOfferings = [];\n    const offeringsCount = this.offerings.length;\n    for (let i = 0; i < offeringsCount; i++) {\n      bestOfferings.push(this.offerings[i]);\n    }\n    bestOfferings.sort((off1, off2) => {\n      return off1.markup - off2.markup;\n    });\n    this.rankedOfferings = bestOfferings;\n  }\n\n  Supplier.prototype.sellItem = function(payload) {\n    let { id, price } = payload;\n\n    const itemIndex = this.inventory.indexOf(id);\n    if (!itemIndex && itemIndex !== 0) {\n      return false;\n    }\n\n    this.inventory.splice(itemIndex, 1);\n    this.gold += price;\n\n    return true;\n  }\n\n  const dispatchSuppliers = function(newSuppliers) {\n    const payload = {\n      type: SET_SUPPLIERS,\n      payload: newSuppliers\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSupplyReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const fetchSuppliers = async function() {\n    let initSuppliers;\n      try {\n        initSuppliers = await fetch('/suppliers');\n      } catch (err) {\n        console.log(err);\n      }\n      if (initSuppliers) {\n        initSuppliers = initSuppliers.json();\n      }\n      return initSuppliers;\n  }\n\n  const getSuppliers = function*() {\n    yield fetchSuppliers();\n  }\n\n  const takeSupplies = function() {\n    // copy supplies to local array\n    const remainingSupplies = JSON.parse(JSON.stringify(supplies.getSupplies()));\n    let supplyTypes = [];\n    let supplyValues = [];\n    remainingSupplies.forEach(remainingSupply => {\n      const supplyItem = items.getItem(remainingSupply);\n      supplyTypes.push(supplyItem.type);\n      supplyValues.push(supplyItem.value);\n    });\n    let currentSupplier = 0;\n    const supplierCount = suppliers.length;\n    // loop through each supply item\n    remainingSupplies.forEach((remSupply, remNum) => {\n      // create an order based on last supplier to take an\n      // item and proceeded sequentially to include all\n      // suppliers\n      let supplierTries = [];\n      for (let i = 0; i < supplierCount; i++) {\n        let thisIndex = currentSupplier + i;\n        if (thisIndex >= supplierCount) {\n          thisIndex -= supplierCount;\n        }\n        supplierTries.push(thisIndex);\n      }\n      let taken = false;\n      \n      // check with each supplier if type of current supply is\n      // in their offerings\n      supplierTries.forEach(supplierIndex => {\n        let favorites = suppliers[supplierIndex].rankedOfferings;\n        for (let fave of favorites) {\n          // if type of supplier's offering equals type of this supply\n          if (fave.type === supplyTypes[remNum]) {\n            if (!taken && suppliers[supplierIndex].gold >= supplyValues[remNum]) {\n              // if supplier inventory not initialized, set to empty array\n              if (suppliers[supplierIndex].inventory === null) {\n                suppliers[supplierIndex].inventory = [];\n              }\n\n              // remove item from supply\n              let thisSupply = supplies.depleteSupply(remSupply);\n              if (Array.isArray(thisSupply)) {\n                thisSupply = thisSupply[0];\n              }\n\n              suppliers[supplierIndex].gold -= supplyValues[remNum];\n\n              // put item in supplier's inventory\n              suppliers[supplierIndex].inventory.push(thisSupply);\n\n              // mark item taken;\n              taken = true;\n              currentSupplier = supplierIndex + 1;\n              if (currentSupplier > supplierCount) {\n                currentSupplier = 0;\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    initializeSuppliers: async function(maxSuppliers) {\n      const gGetSuppliers = getSuppliers();\n      gGetSuppliers.next().value\n        .then(initSuppliers => {\n          if (initSuppliers) {\n            let drainSuppliers = initSuppliers;\n            while (suppliers.length < maxSuppliers && drainSuppliers.length > 0) {\n              const pushIndex = Math.floor(Math.random() * drainSuppliers.length);\n              let newSupplier = drainSuppliers.splice(pushIndex, 1);\n              newSupplier = newSupplier[0];\n              const supplierPayload = { name: newSupplier.name, offerings: newSupplier.offerings };\n              let thisSupplier = new Supplier(supplierPayload);\n              thisSupplier.gold = startingGold;\n              suppliers.push(thisSupplier);\n            }\n            suppliers.forEach(supplier => supplier.rankFavorites());\n            dispatchSuppliers(suppliers);\n            return suppliers;\n          }\n        });\n    },\n    getSuppliers: function() {\n      return suppliers;\n    },\n    takeSupplierTurn: function() {\n      takeSupplies();\n      dispatchSuppliers(suppliers);\n      dispatchSupplyReady(false);\n    },\n    sellItem: function (payload) {\n      const { id, itemId, price} = payload;\n      \n      const thisSupplier = suppliers.find(refSupplier => refSupplier.id === id);\n      if (!thisSupplier) {\n        return false;\n      }\n      const sellPayload = {\n        id: itemId,\n        price: price\n      }\n\n      const resSale = thisSupplier.sellItem(sellPayload);\n      if (!resSale) {\n        return false;\n      }\n      return true;\n    },\n    updateSuppliers: function() {\n      dispatchSuppliers(suppliers);\n    }\n  }\n}());\n\nexport default suppliers;","import axios from 'axios';\nimport { FETCH_USER, SET_STORE_GOLD, SET_DAY, SET_SUPPLIERS } from './types';\n\n// game imports\nimport gameStore from '../game_modules/store';\nimport days from '../game_modules/days';\nimport suppliers from '../game_modules/suppliers';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchGold = () => async dispatch => {\n  const gold = await gameStore.getGold();\n  dispatch({ type: SET_STORE_GOLD, amount: gold });\n}\n\nexport const fetchDay = () => async dispatch => {\n  const day = await days.getDay();\n  dispatch({ type: SET_DAY, day: day });\n}\n\nexport const fetchSuppliers = () => async dispatch => {\n  const newSuppliers = await suppliers.getSuppliers();\n  dispatch({ type: SET_SUPPLIERS, payload: newSuppliers });\n}","import React from 'react';\nimport './Store.css';\n\n// import game modules\n// import gameStore from '../../game_modules/store';\nimport gameInventory from '../../game_modules/storeInventory';\n\n\n// import components\nimport ItemTypes from '../../Utilities/itemTypes';\nimport StoreInventory from '../StoreInventory/StoreInventory';\n\n\n// redux imports\nimport { SET_STORE_GOLD,\n  SET_STORE_FILTER, \n  SET_STORE_FILTER_ACTIVE,\n  SET_STORE_UPDATE_STATUS } from '../../actions/types';\nimport { fetchGold } from '../../actions';\nimport { connect } from 'react-redux';\n\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.toggleFilter = this.toggleFilter.bind(this);\n    this.getFilter = this.getFilter.bind(this);\n    this.handleFilter = this.handleFilter.bind(this);\n    this.getIncrementButtons = this.getIncrementButtons.bind(this);\n    this.handleIncrease = this.handleIncrease.bind(this);\n    this.handleDecrease = this.handleDecrease.bind(this);\n  }\n\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  \n  componentDidMount() {\n    this.props.fetchGold();\n  }\n\n  handleFilter(e) {\n    let currentType = e.target.value;\n    this.props.setStoreFilter(currentType);\n  }\n\n  handleIncrease() {\n    const payload = {\n      filter: this.props.storeFilter,\n      markup: 50\n    }\n    gameInventory.markupFilteredStoreItems(payload);\n    gameInventory.updateStoreInventory();\n    this.props.toggleStoreUpdateStatus();\n  }\n\n  handleDecrease() {\n    const payload = {\n      filter: this.props.storeFilter,\n      markup: -50\n    }\n    gameInventory.markupFilteredStoreItems(payload);\n    gameInventory.updateStoreInventory();\n    this.props.toggleStoreUpdateStatus();\n  }\n\n  handlePress(e) {\n    console.dir(e);\n  }\n\n  getIncrementButtons() {\n    if (!this.props.filterActive) return '';\n    return (\n      <div className=\"incrementButtons\">\n        <div className=\"decreaseAll incrementButton button\"\n          onPointerDown={this.handlePress}>\n          <span className=\"incrementIcon\">-</span>\n        </div>\n        <div className=\"increaseAll incrementButton button\"\n          onClick={this.handleIncrease}>\n          <span className=\"incrementIcon\">+</span>\n        </div>\n      </div>\n    )\n  }\n\n  getFilter() {\n    if (!this.props.filterActive) return '';\n    const itemTypesArr = Object.values(ItemTypes);\n    return (\n      <select className=\"StoreItemTypeFilter\" \n        defaultValue={this.props.storeFilter}\n        onChange={this.handleFilter}>\n        <option value=\"all\">all</option>\n        {itemTypesArr.map(itemType => {\n          return (\n            <option value={itemType}>{itemType}</option>\n          )\n        })}\n      </select>\n    )\n  }\n\n  toggleFilter() {\n    const newValue = !this.props.filterActive;\n    this.props.setStoreFilterActive(newValue);\n  }\n  \n  render() {\n    return (\n      <div className=\"Store\">\n        <div className=\"StoreMenuBar\">\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\n          <div className=\"FilterGroup\">\n            {this.getIncrementButtons()}\n            {this.getFilter()}\n          </div>\n          <span className=\"Inspect\" role=\"img\" aria-label=\"inspect\" onClick={this.toggleFilter}>&#128269; </span>\n          <div className=\"GoldDisplay\">\n            \n            <div className=\"StoreGold\"><span className=\"CoinSymbol\" role=\"img\" aria-label=\"coin\">&#x2689; </span>{this.props.gold}</div>\n          </div>\n        </div>\n        <StoreInventory />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name,\n    gold: state.storeState.gold,\n    filterActive: state.storeState.filterActive,\n    storeFilter: state.storeState.filter,\n    storeNeedsUpdate: state.storeState.needsUpdate\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold }),\n    fetchGold: () => dispatch(fetchGold()),\n    setStoreFilter: (filter) => dispatch({ type: SET_STORE_FILTER, filter: filter }),\n    setStoreFilterActive: (value) => dispatch({ type: SET_STORE_FILTER_ACTIVE, value: value }),\n    toggleStoreUpdateStatus: () => dispatch({ type: SET_STORE_UPDATE_STATUS })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\nimport './SupplierBuyButton.css';\n\nclass SupplierBuyButton extends React.Component {\n  render() {\n    return (\n      <div className=\"SupplierBuyButton button\">\n        <div className=\"supplierBuyButtonIcon\">\n          buy\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SupplierBuyButton;","import React from 'react';\nimport './Supplier.css';\n\nimport SupplierBuyButton from '../SupplierBuyButton/SupplierBuyButton';\n\n// game module imports\nimport gameItems from '../../game_modules/items';\nimport gameSuppliers from '../../game_modules/suppliers'\nimport gameStore from '../../game_modules/store';\nimport gameStoreInventory from '../../game_modules/storeInventory';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n\nclass Supplier extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSuppllierInventory = this.getSuppllierInventory.bind(this);\n    this.handlePurchase = this.handlePurchase.bind(this);\n  }\n\n  handlePurchase(payload) {\n    const { ids, price } = payload;\n\n    if (price > this.props.storeGold) {\n      return;\n    }\n\n    // sell first item of object\n    const sellId = ids[0];\n    const sellPayload = {\n      id: this.props.supplier.id,\n      itemId: sellId,\n      price: price\n    }\n    let sellRes = gameSuppliers.sellItem(sellPayload);\n    if (!sellRes) {\n      return;\n    }\n\n    // transact sale for vendor\n    gameStore.chargeGold(price);\n    gameStoreInventory.addItem(sellId);\n\n    // update state\n    gameStore.updateGold();\n    gameStoreInventory.updateStoreInventory();\n    gameSuppliers.updateSuppliers();\n\n  }\n\n  getSuppllierInventory() {\n    if (!this.props.initialized) {\n      return ''\n    }\n    // get details on items from ids\n    let thisInventory = [];\n    this.props.supplier.inventory.forEach(id => {\n      let inventoryItem = gameItems.getItem(id);\n      thisInventory.push(inventoryItem);\n    });\n\n    // organize all items by item name\n    let inventoryGroups = {};\n    let valueGroups = {}\n    let typeGroups = {}\n    let idGroups = {}\n    thisInventory.forEach(item => {\n      if (!inventoryGroups[item.name]) {\n        inventoryGroups[item.name] = 1;\n        valueGroups[item.name] = item.value;\n        typeGroups[item.name] = item.type;\n        idGroups[item.name] = [item.id]\n      } else {\n        inventoryGroups[item.name] += 1;\n        idGroups[item.name].push(item.id);\n      }\n    });\n\n    // create array of composed items\n    let composedItems = []\n    for (const [key, value] of Object.entries(inventoryGroups)) {\n      let item = { name: key, count: value, type: typeGroups[key], value: valueGroups[key], ids: idGroups[key] };\n      composedItems.push(item);\n    }\n\n    composedItems.sort((item1, item2) => {\n      const nameA = item1.name.toUpperCase();\n      const nameB = item2.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    return composedItems.map(item => {\n      const offerings = this.props.supplier.offerings;\n      const typeIndex = offerings.findIndex(offering => offering.type === item.type);\n      \n      let composedValue = item.value;\n      if (typeIndex !== -1) {\n        composedValue = composedValue * (1 + (offerings[typeIndex].markup / 1000));\n        composedValue = Math.floor(composedValue);\n      }\n\n      return (\n        <div className=\"SupplierInventoryItem itemBackground\" key={item.id}>\n          <span className=\"SupplierInventoryItemName\">{item.name} ({item.count})</span>\n          <div className=\"SupplierItemsValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{composedValue}</span>\n          </div>\n          <div className=\"BuyButtonContainer\" onClick={() => this.handlePurchase({ ids: item.ids, price: composedValue })}>\n              <SupplierBuyButton />\n            </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Supplier\">\n        <div className=\"SupplierName\">\n          {this.props.supplier.name}\n          <div className=\"SupplierValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{this.props.supplier.gold}</span>\n          </div>\n        </div>\n        <div className=\"supplierInventory\">\n          {this.getSuppllierInventory()}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    supplyReady: state.supplies.ready,\n    storeGold: state.storeState.gold\n  }\n}\n\nexport default connect(mapStateToProps)(Supplier);","import React from 'react';\nimport './Suppliers.css';\nimport Supplier from '../Supplier/Supplier';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n// game imports\nimport gameSupplier from '../../game_modules/suppliers';\nimport gameSupplies from '../../game_modules/supplies';\n\nclass Suppliers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suppliersInitialized: false\n    }\n\n    this.getSuppliers = this.getSuppliers.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (Array.isArray(this.props.suppliers) && this.props.supplySpawned) {\n      if (!this.props.supplyReady) {\n        gameSupplies.fillSupplies();\n      }\n    }\n    if (Array.isArray(this.props.suppliers) && this.props.supplyReady) {\n      if (!this.state.suppliersInitialized) {\n        gameSupplier.takeSupplierTurn();\n        this.setState({\n          suppliersInitialized: true\n        })\n      }\n    }\n  }\n\n  getSuppliers() {\n    let currentSuppliers = this.props.suppliers;    \n    if (Array.isArray(currentSuppliers)) {\n      const suppliersDisplay = currentSuppliers.map(renderSupplier => {\n        return (<Supplier supplier={renderSupplier} initialized={this.state.suppliersInitialized}/>);\n      });\n\n      return (\n        <div className=\"suppliersContainer\">\n          {suppliersDisplay}\n          <div className=\"spacer\"></div>\n        </div>\n      );\n    } else {\n      return 'no suppliers to render';\n    }\n    \n  }\n  \n  render() {\n    return (\n      <div className=\"Suppliers\">\n        {this.getSuppliers()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    suppliers: state.suppliers.suppliers,\n    supplyReady: state.supplies.ready,\n    supplySpawned: state.supplies.spawned\n  }\n}\n\nexport default connect(mapStateToProps)(Suppliers);","import React from 'react';\nimport './Days.css';\n\n// import days controller from game code\nimport days from '../../game_modules/days';\n\n// import redux modules\nimport { fetchDay } from '../../actions';\nimport { connect } from 'react-redux'\n\nclass Days extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.handleNextDay = this.handleNextDay.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchDay();\n  }\n\n  handleNextDay() {\n    const currentDay = this.props.day;\n    // set day in game\n    days.setDay(currentDay + 1);\n    // set day in redux state;\n    this.props.fetchDay();\n  }\n\n  render() {\n    return (\n      <div className=\"Days\">\n        <div className=\"DayTitle\">Day: {this.props.day}</div>\n        <div className=\"nextDay button\" onClick={this.handleNextDay}\n        >Finish Day</div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    day: state.days.day\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchDay: () => dispatch(fetchDay())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\nimport './Details.css';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"Details\">\n        Details\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React from 'react';\nimport './GameScreen.css';\n\n// import Title from '../../Components/Title/Title';\nimport Store from '../../Components/Store/Store';\nimport Suppliers from '../../Components/Suppliers/Suppliers';\nimport Days from '../../Components/Days/Days';\nimport Details from '../../Components/Details/Details';\n\nimport { connect } from 'react-redux';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"GameScreen flex-container\">\n        <div className=\"CommerceColumn\">\n          <Days />\n          <Store />\n          <Suppliers />\n        </div>\n        <Details />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name\n  }\n}\n\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\nimport './Title.css';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"Title\">VENDOR</div>\n    )\n  }\n}\n\nexport default Title;","import days from './days';\nimport gameStore from './store';\nimport suppliers from './suppliers';\nimport supplies from './supplies';\n\nconst main = (function() {\n  \n  const maxSuppliers = 3;\n  let currentMaxLevel = 1;\n\n  return {\n    init: function(payload) {\n      // set day to 1\n      days.setDay(1);\n      \n      // set store name\n      if (!payload.name) {\n        console.log('Game must be started with a payload object that contains a store name!');\n      }\n      gameStore.setName(payload.name);\n\n      const startingGold = gameStore.getStartingGold();\n      gameStore.setGold(startingGold);\n\n      supplies.setSupplyLevel(currentMaxLevel);\n      supplies.fillSupplyPool();\n      suppliers.initializeSuppliers(maxSuppliers);\n\n    },\n\n    getGameLevel: function() {\n      return currentMaxLevel;\n    }\n\n  }\n} ());\n\nexport default main;","import React from 'react';\nimport './StartScreen.css';\n\nimport Title from '../../Components/Title/Title';\n\nimport game from '../../game_modules/main';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\n\n\nclass StartScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleNameInput = this.handleNameInput.bind(this);\n  }\n  \n  handleStart() {\n    const newName = this.props.name;\n    if (!newName || newName === '') {\n      return;\n    }\n    game.init({ name: newName });\n    this.props.setStarted(true);\n  }\n\n  handleNameInput(e) {\n    if (e.charCode === 13) {\n      this.handleStart();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"StartScreen\">\n        <Title />\n        <div className=\"NameInput\">\n          <div className=\"nameInputGroup\">\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\n            <input id=\"name\" \n              value={this.props.name}\n              type=\"text\"\n              onChange={(val) => this.props.setStoreName(val.target.value)}\n              onKeyPress={this.handleNameInput}\n            />\n          </div>\n          <button onClick={this.handleStart} \n            className=\"StartButton\">\n              Start!    \n          </button>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started,\n    name: state.storeState.name\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './MenuBar.css';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderEditorLink = this.renderEditorLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li key=\"login\"><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li key=\"login\"><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderEditorLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"editorLink\"><a className=\"EditorLink\" href=\"/editor\">editor</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderEditorLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\n\nimport MenuBar from '../../Components/MenuBar/MenuBar';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMainView = this.getMainView.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getMainView() {\n    const gameState = this.props.started;\n    if (!gameState) {\n      return (\n        <StartScreen />\n      )\n    } else {\n      return (\n        <GameScreen />\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        {this.getMainView()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);","import { SET_DAY } from '../actions/types';\n\nconst initialState = {\n  day: 1\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day\n      }\n    default:\n      return state;\n  }\n}","import { SET_GAME_STATE,\n  SET_UPDATES,\n  SET_STORE_UPDATE}\n   from '../actions/types';\n\nconst initialState = {\n  started: false,\n  storeUpdate: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        started: action.value\n      }\n    case SET_UPDATES:\n      const updates = action.payload;\n      const { storeUpdate } = updates;\n      return {\n        ...state,\n        storeUpdate: storeUpdate\n      }\n    case SET_STORE_UPDATE:\n      return {\n        ...state,\n        storeUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { SET_STORE_NAME,\n  SET_STORE_GOLD,\n  SET_STORE_INVENTORY,\n  SET_STORE_FILTER,\n  SET_STORE_FILTER_ACTIVE,\n  SET_STORE_UPDATE_STATUS } from '../actions/types';\n\nconst initialState = {\n  name: '',\n  gold: 0,\n  filterActive: false,\n  filter: 'all',\n  needsUpdate: false,\n  inventory: [],\n  inventoryCount: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_STORE_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case SET_STORE_GOLD:\n      return {\n        ...state,\n        gold: action.amount\n      }\n    case SET_STORE_INVENTORY:\n      const newInventory = action.inventory;\n      let newCount = state.inventoryCount;\n      if (Array.isArray(newInventory)) {\n        newCount = newInventory.length;\n      }\n      return {\n        ...state,\n        inventory: newInventory,\n        inventoryCount: newCount\n      }\n    case SET_STORE_FILTER_ACTIVE:\n      return {\n        ...state,\n        filterActive: action.value\n      }\n    case SET_STORE_FILTER:\n      return {\n        ...state,\n        filter: action.filter\n      }\n    case SET_STORE_UPDATE_STATUS:\n      const newStatus = !state.needsUpdate;\n      return {\n        ...state,\n        needsUpdate: newStatus\n      }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLIERS } from '../actions/types';\n\nconst initialState = {\n  suppliers: null,\n  count: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLIERS:\n      let number = 0;\n      if (Array.isArray(action.payload)) {\n        number = action.payload.length;\n      }    \n      return {\n          ...state,\n          suppliers: action.payload,\n          count: number\n        }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst initialState = {\n  ready: false,\n  spawned: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLY_READY:\n      return {\n        ...state,\n        ready: action.value\n      }\n    case SET_SUPPLY_SPAWNED:\n      return {\n        ...state,\n        spawned: action.value\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport daysReducer from './daysReducer';\nimport gameStateReducer from './gameStateReducer'\nimport storeReducer from './storeReducer';\nimport authReducer from './authReducer';\nimport suppliersReducer from './suppliersReducer';\nimport suppliesReducer from './suppliesReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  days: daysReducer,\n  gameState: gameStateReducer,\n  storeState: storeReducer,\n  suppliers: suppliersReducer,\n  supplies: suppliesReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// This is a comment made to test the build pipeline to the backend.\n// and this should test the pipeline to heroku.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}