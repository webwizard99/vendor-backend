{"version":3,"sources":["game_modules/storeInventory.js","actions/types.js","Utilities/itemTypes.js","Utilities/potionTypes.js","game_modules/items.js","Components/StoreInventory/StoreInventory.jsx","game_modules/store.js","game_modules/days.js","game_modules/supplies.js","game_modules/suppliers.js","actions/index.js","Components/Store/Store.jsx","Components/SupplierBuyButton/SupplierBuyButton.jsx","Components/Supplier/Supplier.jsx","Components/Suppliers/Suppliers.jsx","Components/Days/Days.jsx","Components/Details/Details.jsx","Containers/GameScreen/GameScreen.jsx","Components/Title/Title.jsx","game_modules/main.js","Containers/StartScreen/StartScreen.jsx","Components/MenuBar/MenuBar.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/suppliersReducer.js","reducers/suppliesReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["storeInventory","inventory","addItem","id","undefined","push","getStoreInventory","updateStoreInventory","payload","type","store","dispatch","dispatchStoreInventory","itemTypes","potion","weapon","armor","potionTypes","items","ItemTypes","PotionTypes","allItems","lastIndex","Item","name","value","this","Potion","level","Weapon","damage","Armor","createItem","itemPayload","newItem","newPotionType","console","log","newPotionLevel","potionPayload","newWeaponDamage","newWeaponLevel","weaponPayload","newArmorArmor","newArmorLevel","armorPayload","getItem","thisItem","find","item","createTestPotion","lvl","healing","getItemTypes","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","length","composedInventory","forEach","itemId","storeItems","map","className","key","React","Component","connect","state","storeState","gameStore","gold","chargeGold","amount","getName","setName","newName","getStartingGold","getGold","setGold","newGold","updateGold","dispatchStoreGold","days","day","getDay","setDay","newDay","resetDay","supplies","suppliesPool","supplyLevel","itemTypesArr","Object","values","itemTypeCount","itemSpawnCount","fetchItemArrForSupplyPool","a","typeToFetch","maxLvl","fetchURL","fetch","possibleItems","json","getItemForSupplyPool","newItems","then","itemsOfLevel","dispatchSpawned","catch","err","spawnSupply","typeIndex","Math","floor","random","typeToSpawn","newSupplyArr","Array","isArray","Items","getSupplies","fillSupplies","i","dispatchReady","fillSupplyPool","typeItem","depleteSupply","supplyIndex","indexOf","splice","setSupplyLevel","suppliers","currentId","Supplier","offerings","prototype","rankFavorites","bestOfferings","offeringsCount","sort","off1","off2","markup","rankedOfferings","sellItem","price","itemIndex","dispatchSuppliers","newSuppliers","fetchSuppliers","initSuppliers","getSuppliers","initializeSuppliers","maxSuppliers","next","drainSuppliers","pushIndex","newSupplier","supplierPayload","thisSupplier","supplier","takeSupplierTurn","remainingSupplies","supplyTypes","supplyValues","remainingSupply","supplyItem","currentSupplier","supplierCount","remSupply","remNum","supplierTries","thisIndex","taken","supplierIndex","favorites","thisSupply","takeSupplies","dispatchSupplyReady","refSupplier","sellPayload","updateSuppliers","fetchUser","axios","get","res","data","fetchGold","fetchDay","Store","componentDidMount","storeName","role","aria-label","setStoreGold","SupplierBuyButton","getSuppllierInventory","handlePurchase","dir","storeGold","ids","sellId","gameSuppliers","gameStoreInventory","initialized","thisInventory","inventoryItem","gameItems","inventoryGroups","valueGroups","typeGroups","idGroups","composedItems","entries","count","findIndex","offering","composedValue","onClick","supplyReady","ready","Suppliers","suppliersInitialized","componentDidUpdate","supplySpawned","gameSupplies","gameSupplier","setState","currentSuppliers","suppliersDisplay","renderSupplier","spawned","Days","handleNextDay","currentDay","Details","GameScreen","Title","main","init","startingGold","getGameLevel","StartScreen","handleStart","handleNameInput","game","setStarted","e","charCode","htmlFor","onChange","val","setStoreName","target","onKeyPress","started","gameState","MenuBar","renderLogin","renderEditorLink","auth","href","App","getMainView","actions","initialState","storeUpdate","refreshing","refreshed","combineReducers","action","updates","number","Boolean","window","location","hostname","match","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1491873f.chunk.js","sourcesContent":["// redux imports\nimport { store } from '../index';\nimport { SET_STORE_INVENTORY } from '../actions/types';\n\nconst storeInventory = (function(){\n  let inventory = [];\n\n  const dispatchStoreInventory = function() {\n    const payload = {\n      type: SET_STORE_INVENTORY,\n      inventory: inventory\n    }\n    store.dispatch(payload);\n  }\n  return {\n    addItem: function(id) {\n      if (id === null || id === undefined) {\n        return false;\n      }\n      inventory.push(id);\n    },\n\n    getStoreInventory: function() {\n      return inventory;\n    },\n\n    updateStoreInventory: function() {\n      dispatchStoreInventory();\n    }\n  }\n}());\n\nexport default storeInventory;","export const SET_DAY = \"SET_DAY\";\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\nexport const SET_UPDATES = \"SET_UPDATES\";\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\nexport const SET_STORE_INVENTORY = 'SET_STORE_INVENTORY';\nexport const FETCH_USER = 'FETCH_USER';\nexport const SET_SUPPLIERS = 'SET_SUPPLIERS';\nexport const SET_SUPPLY_READY = 'SET_SUPPLY_READY';\nexport const SET_SUPPLY_SPAWNED = 'SET_SUPPLY_SPAWNED'","const itemTypes = {\n  potion: 'potion',\n  weapon: 'weapon',\n  armor: 'armor'\n}\n\nexport default itemTypes;","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import ItemTypes from '../Utilities/itemTypes';\nimport PotionTypes from '../Utilities/potionTypes';\n\nconst items = (function(){\n  const itemTypes = ItemTypes;\n  const potionTypes = PotionTypes;\n\n  let allItems = [];\n  let lastIndex = 0;\n  \n  const Item = function(payload) {\n    const { type, name, value } = payload;\n    this.type = type;\n    this.name = name;\n    this.value = value;\n    this.id = lastIndex;\n    lastIndex++;\n  }\n\n  const Potion = function(payload) {\n    const { type, level } = payload;\n    this.type = type;\n    this.level = level;\n  }\n\n  const Weapon = function(payload) {\n    const { damage, level } = payload;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  const Armor = function(payload) {\n    const { armor, level } = payload;\n    this.armor = armor;\n    this.level = level;\n  }\n  \n  return {\n    createItem: function(payload) {\n      let { type, name, value, itemPayload } = payload;\n      if (!itemTypes[type]) {\n        console.log('invalid item type passed to items.createItem()');\n        return;\n      }\n      \n      const newPayload = { type: type , name: name , value: value }\n      const newItem = new Item(newPayload);\n      \n      switch (newItem.type) {\n        case itemTypes.potion:\n          const newPotionType = itemPayload.type;  \n          if (!newPotionType) {\n            console.log('attempted to create invalid potion type');\n            return;\n          }\n          const newPotionLevel = itemPayload.level;\n          if (!newPotionLevel) {\n            console.log('attempted to create a potion with an invalid level');\n            return;\n          }\n          const potionPayload = { type: newPotionType, level: newPotionLevel };\n          newItem[newItem.type] = new Potion(potionPayload);\n          break;\n        case itemTypes.weapon:\n          const newWeaponDamage = itemPayload.damage;\n          if (!newWeaponDamage) {\n            console.log('attempted to create a weapon without damage');\n            return;\n          }\n          const newWeaponLevel = itemPayload.level;\n          if (!newWeaponLevel) {\n            console.log('attempted to create a weapon with an invalid level');\n            return;\n          }\n          const weaponPayload = { damage: newWeaponDamage, level: newWeaponLevel };\n          newItem[newItem.type] = new Weapon(weaponPayload);\n          break;\n        case itemTypes.armor:\n          const newArmorArmor = itemPayload.armor;\n          if (!newArmorArmor) {\n            console.log('attempted to make a new armor without an armor value');\n            return;\n          }\n          const newArmorLevel = itemPayload.level;\n          if (!newArmorLevel) {\n            console.log('attempted to make a new armor without a level value');\n            return;\n          }\n          const armorPayload = { armor: newArmorArmor, level: newArmorLevel };\n          newItem[newItem.type] = new Armor(armorPayload);\n          break;\n        default:\n          break;\n      }\n\n      allItems.push(newItem);\n      return newItem.id;\n    },\n\n    getItem(id) {\n      let thisItem = allItems.find(item => item.id === id);\n      if (thisItem) {\n        return thisItem;\n      } else {\n        console.log('attempted to retrieve invalid item.')\n      }\n    },\n\n    createTestPotion: function(lvl) {\n      const newItem = new Item({ type: itemTypes.potion, name: 'Healing Potion', value: 60});\n      newItem[itemTypes.potion] = new Potion({ type: potionTypes.healing, level: lvl});\n      return newItem;\n    },\n\n    getItemTypes: function() {\n      return itemTypes;\n    }\n  }\n}());\n\nexport default items;","import React from 'react';\nimport './StoreInventory.css';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_INVENTORY } from '../../actions/types';\n\nimport storeInventory from '../../game_modules/storeInventory';\nimport storeItems from '../../game_modules/items';\n\nclass StoreInventory extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.getInventoryItems = this.getInventoryItems.bind(this);\n  }\n\n  componentDidMount() {\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\n    this.props.setInventory(newInventory);\n  }\n\n  getInventoryItems() {\n    if (this.props.inventory && this.props.inventory.length > 0) {\n      let composedInventory = [];\n      this.props.inventory.forEach(itemId => {\n        let thisItem = storeItems.getItem(itemId);\n        composedInventory.push(thisItem);\n      });\n      return (\n        <div>{composedInventory.map(item => {\n          return (\n            <div className=\"InventoryItem itemBackground\" key={item.id}>\n              <span className=\"InventoryItemName\">{item.name}</span>\n              <div className=\"ItemValueGroup\">\n                <span className=\"CoinSymbol\">&#x2689; </span>\n                <span className=\"InventoryItemValue\">{item.value}</span>\n              </div>\n              \n            </div>\n          )\n        })}</div>\n      )     \n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"StoreInventory\">\n        {this.getInventoryItems()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.storeState.inventory\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","// redux imports\nimport { store } from '../index';\nimport { SET_STORE_GOLD } from '../actions/types';\n\nconst gameStore = (function(){\n  let name = '';\n\n  const startingGold = 1000;\n  let gold = startingGold;\n\n  const dispatchStoreGold = function() {\n    const payload = {\n      type: SET_STORE_GOLD,\n      amount: gold\n    }\n    store.dispatch(payload);\n  }\n  \n  return {\n    chargeGold: function(amount) {\n      if (gold < amount) {\n        console.log('attempted to charge more gold than vendor owns')\n        return false;\n      }\n      gold -= amount;\n    },\n    getName: function() {\n      return name;\n    },\n\n    setName: function(newName) {\n      name = newName;\n    },\n\n    getStartingGold: function() {\n      return startingGold;\n    },\n\n    getGold: function() {\n      return gold;\n    },\n\n    setGold: function(newGold) {\n      gold = newGold;\n    },\n    updateGold: function() {\n      dispatchStoreGold();\n    }\n  }\n}());\n\nexport default gameStore;","const days = (function (){\n  const startDay = 1;\n  let day = startDay;\n\n  return {\n    getDay: function() {\n      return day;\n    },\n\n    setDay: function(newDay) {\n      if (typeof newDay !== \"number\") {\n        console.log(\"trying to set day to a non number value!\");\n        return;\n      }\n      day = newDay;\n    },\n\n    resetDay: function() {\n      day = startDay;\n    }\n  }\n}());\n\nexport default days;","import ItemTypes from '../Utilities/itemTypes';\nimport Items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst supplies = (function(){\n  let supplies = [];\n\n  let suppliesPool = {};\n  let supplyLevel = 1;\n\n  const itemTypesArr = Object.values(ItemTypes);\n  const itemTypeCount = itemTypesArr.length;\n  let itemSpawnCount = 0;\n\n  const dailySupplies = 10;\n\n  const dispatchReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSpawned = function(value) {\n    const payload = {\n      type: SET_SUPPLY_SPAWNED,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  // fill supply pool\n  const fetchSupplyPool = function() {\n    // produce array of type strings and choose one at random\n    itemSpawnCount = 0;\n    itemTypesArr.forEach(typeItem => {\n      if (suppliesPool[typeItem] == null) {\n        suppliesPool[typeItem] = [];\n      }\n      suppliesPool[typeItem].length = 0;\n    });\n\n    getItemForSupplyPool();\n    return true;\n  }\n\n  // fetch an item from backend\n  const fetchItemArrForSupplyPool = async function() {\n    let lvl = supplyLevel;\n    if (!lvl) return;\n\n    let typeToFetch = itemTypesArr[itemSpawnCount];\n\n    if (typeToFetch !== 'armor') {\n      typeToFetch += 's';\n    }\n\n    const minLvl = 1;\n    const maxLvl = lvl;\n\n    const fetchURL = `/${typeToFetch}-in-level-range?min-level=${minLvl}&max-level=${maxLvl}`;\n    \n    let possibleItems;\n    try {\n      possibleItems = await fetch(fetchURL);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (possibleItems) {\n      possibleItems = possibleItems.json();\n    }\n\n    return possibleItems;\n  }\n\n  // take an item that was fetched from backend and create it\n  // with item constructors and put it into state\n  const getItemForSupplyPool = function() {\n    if (itemSpawnCount >= itemTypeCount) {\n      return;\n    }\n    let newItems;\n    fetchItemArrForSupplyPool()\n      .then(itemsOfLevel => {\n        newItems = itemsOfLevel;\n      \n        // initialize field on pool if need be\n        if (suppliesPool[itemTypesArr[itemSpawnCount]] === null) {\n          suppliesPool[itemTypesArr[itemSpawnCount]] = [];\n        }\n        // push item id into supplies\n        suppliesPool[itemTypesArr[itemSpawnCount]].push(newItems);\n\n        itemSpawnCount++;\n        if (itemSpawnCount === itemTypeCount) {\n          dispatchSpawned(true);\n        }\n        getItemForSupplyPool();\n        return true;\n      }).catch(err => console.log(err));\n  }\n\n  const spawnSupply = function() {\n    // produce array of type strings and choose one at random\n    let typeIndex = Math.floor(Math.random() * itemTypesArr.length);\n    let typeToSpawn = itemTypesArr[typeIndex];\n    const newSupplyArr = suppliesPool[typeToSpawn];\n    let randomChoice = Math.floor(Math.random() * newSupplyArr.length);\n    let newItem = newSupplyArr[randomChoice];\n\n    if (Array.isArray(newItem)) {\n      newItem = newItem[0];\n    }\n\n    // compose payload for Item constructor\n    let itemPayload = {};\n    itemPayload.level = newItem.level;\n    switch(newItem.item.type) {\n      case ItemTypes.potion:\n        itemPayload.type = newItem.type;\n        break;\n      case ItemTypes.weapon:\n        itemPayload.damage = newItem.damage;\n        break;\n      case ItemTypes.armor:\n        itemPayload.armor = newItem.armor;\n        break;\n      default:\n        break;\n    }\n    let payload = {};\n    payload.itemPayload = itemPayload;\n    payload.type = newItem.item.type;\n    payload.name = newItem.item.name;\n    payload.value = newItem.item.value;\n\n    // create item and add to total inventory in Items module\n    let itemId = Items.createItem(payload);\n    supplies.push(itemId);\n\n  }\n  \n  return {\n    getSupplies: function() {\n      return supplies;\n    },\n    fillSupplies: function() {\n      for (let i = 0; i < dailySupplies; i++) {\n        spawnSupply();\n      }\n      dispatchReady(true);\n    },\n    fillSupplyPool: function() {\n      fetchSupplyPool();\n    },\n    depleteSupply: function(id) {\n      let supplyIndex = supplies.indexOf(id);\n      if (supplyIndex >= 0) {\n        let chosenSupply = supplies.splice(supplyIndex, 1);\n        return chosenSupply;\n      }\n    },\n    setSupplyLevel: function(lvl) {\n      supplyLevel = lvl;\n    }\n  }\n}());\n\nexport default supplies;","// game imports\nimport supplies from './supplies';\nimport items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLIERS, SET_SUPPLY_READY } from '../actions/types';\n\nconst suppliers = (function(){\n\n  let suppliers = [];\n\n  let currentId = 0;\n\n  const startingGold = 1000;\n\n  const Supplier = function(payload) {\n    const { name, offerings } = payload;\n    this.name = name;\n    this.offerings = offerings;\n    this.inventory = [];\n    this.id = currentId;\n    currentId++;\n  }\n\n  Supplier.prototype.rankFavorites = function() {\n    let bestOfferings = [];\n    const offeringsCount = this.offerings.length;\n    for (let i = 0; i < offeringsCount; i++) {\n      bestOfferings.push(this.offerings[i]);\n    }\n    bestOfferings.sort((off1, off2) => {\n      return off1.markup - off2.markup;\n    });\n    this.rankedOfferings = bestOfferings;\n  }\n\n  Supplier.prototype.sellItem = function(payload) {\n    let { id, price } = payload;\n\n    const itemIndex = this.inventory.indexOf(id);\n    if (!itemIndex && itemIndex !== 0) {\n      return false;\n    }\n\n    this.inventory.splice(itemIndex, 1);\n    this.gold += price;\n\n    return true;\n  }\n\n  const dispatchSuppliers = function(newSuppliers) {\n    const payload = {\n      type: SET_SUPPLIERS,\n      payload: newSuppliers\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSupplyReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const fetchSuppliers = async function() {\n    let initSuppliers;\n      try {\n        initSuppliers = await fetch('/suppliers');\n      } catch (err) {\n        console.log(err);\n      }\n      if (initSuppliers) {\n        initSuppliers = initSuppliers.json();\n      }\n      return initSuppliers;\n  }\n\n  const getSuppliers = function*() {\n    yield fetchSuppliers();\n  }\n\n  const takeSupplies = function() {\n    // copy supplies to local array\n    const remainingSupplies = JSON.parse(JSON.stringify(supplies.getSupplies()));\n    let supplyTypes = [];\n    let supplyValues = [];\n    remainingSupplies.forEach(remainingSupply => {\n      const supplyItem = items.getItem(remainingSupply);\n      supplyTypes.push(supplyItem.type);\n      supplyValues.push(supplyItem.value);\n    });\n    let currentSupplier = 0;\n    const supplierCount = suppliers.length;\n    // loop through each supply item\n    remainingSupplies.forEach((remSupply, remNum) => {\n      // create an order based on last supplier to take an\n      // item and proceeded sequentially to include all\n      // suppliers\n      let supplierTries = [];\n      for (let i = 0; i < supplierCount; i++) {\n        let thisIndex = currentSupplier + i;\n        if (thisIndex >= supplierCount) {\n          thisIndex -= supplierCount;\n        }\n        supplierTries.push(thisIndex);\n      }\n      let taken = false;\n      \n      // check with each supplier if type of current supply is\n      // in their offerings\n      supplierTries.forEach(supplierIndex => {\n        let favorites = suppliers[supplierIndex].rankedOfferings;\n        for (let fave of favorites) {\n          // if type of supplier's offering equals type of this supply\n          if (fave.type === supplyTypes[remNum]) {\n            if (!taken && suppliers[supplierIndex].gold >= supplyValues[remNum]) {\n              // if supplier inventory not initialized, set to empty array\n              if (suppliers[supplierIndex].inventory === null) {\n                suppliers[supplierIndex].inventory = [];\n              }\n\n              // remove item from supply\n              let thisSupply = supplies.depleteSupply(remSupply);\n              if (Array.isArray(thisSupply)) {\n                thisSupply = thisSupply[0];\n              }\n\n              suppliers[supplierIndex].gold -= supplyValues[remNum];\n\n              // put item in supplier's inventory\n              suppliers[supplierIndex].inventory.push(thisSupply);\n\n              // mark item taken;\n              taken = true;\n              currentSupplier = supplierIndex + 1;\n              if (currentSupplier > supplierCount) {\n                currentSupplier = 0;\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    initializeSuppliers: async function(maxSuppliers) {\n      const gGetSuppliers = getSuppliers();\n      gGetSuppliers.next().value\n        .then(initSuppliers => {\n          if (initSuppliers) {\n            let drainSuppliers = initSuppliers;\n            while (suppliers.length < maxSuppliers && drainSuppliers.length > 0) {\n              const pushIndex = Math.floor(Math.random() * drainSuppliers.length);\n              let newSupplier = drainSuppliers.splice(pushIndex, 1);\n              newSupplier = newSupplier[0];\n              const supplierPayload = { name: newSupplier.name, offerings: newSupplier.offerings };\n              let thisSupplier = new Supplier(supplierPayload);\n              thisSupplier.gold = startingGold;\n              suppliers.push(thisSupplier);\n            }\n            suppliers.forEach(supplier => supplier.rankFavorites());\n            dispatchSuppliers(suppliers);\n            return suppliers;\n          }\n        });\n    },\n    getSuppliers: function() {\n      return suppliers;\n    },\n    takeSupplierTurn: function() {\n      takeSupplies();\n      dispatchSuppliers(suppliers);\n      dispatchSupplyReady(false);\n    },\n    sellItem: function (payload) {\n      const { id, itemId, price} = payload;\n      \n      const thisSupplier = suppliers.find(refSupplier => refSupplier.id === id);\n      console.log(thisSupplier);\n      if (!thisSupplier) {\n        return false;\n      }\n      const sellPayload = {\n        id: itemId,\n        price: price\n      }\n\n      const resSale = thisSupplier.sellItem(sellPayload);\n      if (!resSale) {\n        return false;\n      }\n      return true;\n    },\n    updateSuppliers: function() {\n      dispatchSuppliers(suppliers);\n    }\n  }\n}());\n\nexport default suppliers;","import axios from 'axios';\nimport { FETCH_USER, SET_STORE_GOLD, SET_DAY, SET_SUPPLIERS } from './types';\n\n// game imports\nimport gameStore from '../game_modules/store';\nimport days from '../game_modules/days';\nimport suppliers from '../game_modules/suppliers';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchGold = () => async dispatch => {\n  const gold = await gameStore.getGold();\n  dispatch({ type: SET_STORE_GOLD, amount: gold });\n}\n\nexport const fetchDay = () => async dispatch => {\n  const day = await days.getDay();\n  dispatch({ type: SET_DAY, day: day });\n}\n\nexport const fetchSuppliers = () => async dispatch => {\n  const newSuppliers = await suppliers.getSuppliers();\n  dispatch({ type: SET_SUPPLIERS, payload: newSuppliers });\n}","import React from 'react';\nimport './Store.css';\n\n// import gameStore from '../../Utilities/store';\n\nimport StoreInventory from '../StoreInventory/StoreInventory';\n\nimport { SET_STORE_GOLD } from '../../actions/types';\nimport { fetchGold } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  \n  componentDidMount() {\n    this.props.fetchGold();\n  }  \n  \n  render() {\n    return (\n      <div className=\"Store\">\n        <div className=\"StoreMenuBar\">\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\n          <span className=\"Inspect\" role=\"img\" aria-label=\"inspect\">&#128269; </span>\n          <div className=\"GoldDisplay\">\n            <span className=\"CoinSymbol\" role=\"img\" aria-label=\"coin\">&#x2689; </span>\n            {this.props.gold}\n          </div>\n        </div>\n        <StoreInventory />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name,\n    gold: state.storeState.gold\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold }),\n    fetchGold: () => dispatch(fetchGold())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\nimport './SupplierBuyButton.css';\n\nclass SupplierBuyButton extends React.Component {\n  render() {\n    return (\n      <div className=\"SupplierBuyButton\">\n        <div className=\"supplierBuyButtonIcon\">\n          buy\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SupplierBuyButton;","import React from 'react';\nimport './Supplier.css';\n\nimport SupplierBuyButton from '../SupplierBuyButton/SupplierBuyButton';\n\n// game module imports\nimport gameItems from '../../game_modules/items';\nimport gameSuppliers from '../../game_modules/suppliers'\nimport gameStore from '../../game_modules/store';\nimport gameStoreInventory from '../../game_modules/storeInventory';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n\nclass Supplier extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSuppllierInventory = this.getSuppllierInventory.bind(this);\n    this.handlePurchase = this.handlePurchase.bind(this);\n  }\n\n  handlePurchase(payload) {\n    console.log('in handlePurchase');\n    console.dir(payload);\n    console.log(`gold: ${this.props.storeGold}`);\n    const { ids, price } = payload;\n\n    if (price > this.props.storeGold) {\n      return;\n    }\n\n    const sellId = ids[0];\n\n    const sellPayload = {\n      id: this.props.supplier.id,\n      itemId: sellId,\n      price: price\n    }\n    let sellRes = gameSuppliers.sellItem(sellPayload);\n    if (!sellRes) {\n      return;\n    }\n\n    console.log('item sold by supplier');\n\n    gameStore.chargeGold(price);\n    gameStoreInventory.addItem(sellId);\n\n    console.log('item bought by vendor');\n    \n    // update state\n    gameStore.updateGold();\n    gameStoreInventory.updateStoreInventory();\n    gameSuppliers.updateSuppliers();\n\n  }\n\n  getSuppllierInventory() {\n    if (!this.props.initialized) {\n      return ''\n    }\n    let thisInventory = [];\n    this.props.supplier.inventory.forEach(id => {\n      let inventoryItem = gameItems.getItem(id);\n      thisInventory.push(inventoryItem);\n    });\n\n    let inventoryGroups = {};\n    let valueGroups = {}\n    let typeGroups = {}\n    let idGroups = {}\n\n    thisInventory.forEach(item => {\n      if (!inventoryGroups[item.name]) {\n        inventoryGroups[item.name] = 1;\n        valueGroups[item.name] = item.value;\n        typeGroups[item.name] = item.type;\n        idGroups[item.name] = [item.id]\n      } else {\n        inventoryGroups[item.name] += 1;\n        idGroups[item.name].push(item.id);\n      }\n    });\n\n    let composedItems = []\n\n    for (const [key, value] of Object.entries(inventoryGroups)) {\n      let item = { name: key, count: value, type: typeGroups[key], value: valueGroups[key], ids: idGroups[key] };\n      composedItems.push(item);\n    }\n\n    return composedItems.map(item => {\n      const offerings = this.props.supplier.offerings;\n      const typeIndex = offerings.findIndex(offering => offering.type === item.type);\n      \n      let composedValue = item.value;\n      if (typeIndex !== -1) {\n        composedValue = composedValue * (1 + (offerings[typeIndex].markup / 1000));\n        composedValue = Math.floor(composedValue);\n      }\n\n      return (\n        <div className=\"SupplierInventoryItem itemBackground\" key={item.id}>\n          <span className=\"SupplierInventoryItemName\">{item.name}</span>\n          <span className=\"ItemCount\"> ({item.count})</span>\n          <div className=\"SupplierItemsValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{composedValue}</span>\n            <div className=\"BuyButtonContainer\" onClick={() => this.handlePurchase({ ids: item.ids, price: composedValue })}>\n              <SupplierBuyButton />\n            </div>\n          </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Supplier\">\n        <div className=\"SupplierName\">\n          {this.props.supplier.name}\n          <div className=\"SupplierValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{this.props.supplier.gold}</span>\n          </div>\n        </div>\n        <div className=\"supplierInventory\">\n          {this.getSuppllierInventory()}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    supplyReady: state.supplies.ready,\n    storeGold: state.storeState.gold\n  }\n}\n\nexport default connect(mapStateToProps)(Supplier);","import React from 'react';\nimport './Suppliers.css';\nimport Supplier from '../Supplier/Supplier';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n// game imports\nimport gameSupplier from '../../game_modules/suppliers';\nimport gameSupplies from '../../game_modules/supplies';\n\nclass Suppliers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suppliersInitialized: false\n    }\n\n    this.getSuppliers = this.getSuppliers.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (Array.isArray(this.props.suppliers) && this.props.supplySpawned) {\n      if (!this.props.supplyReady) {\n        gameSupplies.fillSupplies();\n      }\n    }\n    if (Array.isArray(this.props.suppliers) && this.props.supplyReady) {\n      if (!this.state.suppliersInitialized) {\n        gameSupplier.takeSupplierTurn();\n        this.setState({\n          suppliersInitialized: true\n        })\n      }\n    }\n  }\n\n  getSuppliers() {\n    let currentSuppliers = this.props.suppliers;    \n    if (Array.isArray(currentSuppliers)) {\n      console.log(currentSuppliers);\n      const suppliersDisplay = currentSuppliers.map(renderSupplier => {\n        return (<Supplier supplier={renderSupplier} initialized={this.state.suppliersInitialized}/>);\n      });\n\n      return (\n        <div className=\"suppliersContainer\">\n          {suppliersDisplay}\n        </div>\n      );\n    } else {\n      return 'no suppliers to render';\n    }\n    \n  }\n  \n  render() {\n    return (\n      <div className=\"Suppliers\">\n        {this.getSuppliers()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    suppliers: state.suppliers.suppliers,\n    supplyReady: state.supplies.ready,\n    supplySpawned: state.supplies.spawned\n  }\n}\n\nexport default connect(mapStateToProps)(Suppliers);","import React from 'react';\nimport './Days.css';\n\n// import days controller from game code\nimport days from '../../game_modules/days';\n\n// import redux modules\nimport { fetchDay } from '../../actions';\nimport { connect } from 'react-redux'\n\nclass Days extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.handleNextDay = this.handleNextDay.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchDay();\n  }\n\n  handleNextDay() {\n    const currentDay = this.props.day;\n    // set day in game\n    days.setDay(currentDay + 1);\n    // set day in redux state;\n    this.props.fetchDay();\n  }\n\n  render() {\n    return (\n      <div className=\"Days\">\n        <span className=\"DayTitle\">Day: {this.props.day}</span>\n        <button className=\"nextDay\" onClick={this.handleNextDay}\n        >Finish Day</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    day: state.days.day\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchDay: () => dispatch(fetchDay())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\nimport './Details.css';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"Details\">\n        Details\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React from 'react';\nimport './GameScreen.css';\n\n// import Title from '../../Components/Title/Title';\nimport Store from '../../Components/Store/Store';\nimport Suppliers from '../../Components/Suppliers/Suppliers';\nimport Days from '../../Components/Days/Days';\nimport Details from '../../Components/Details/Details';\n\nimport { connect } from 'react-redux';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"GameScreen flex-container\">\n        <div className=\"CommerceColumn\">\n          <Days />\n          <Store />\n          <Suppliers />\n        </div>\n        <Details />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name\n  }\n}\n\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\nimport './Title.css';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"Title\">VENDOR</div>\n    )\n  }\n}\n\nexport default Title;","import days from './days';\nimport gameStore from './store';\nimport suppliers from './suppliers';\nimport supplies from './supplies';\n\nconst main = (function() {\n  \n  const maxSuppliers = 3;\n  let currentMaxLevel = 1;\n\n  return {\n    init: function(payload) {\n      // set day to 1\n      days.setDay(1);\n      \n      // set store name\n      if (!payload.name) {\n        console.log('Game must be started with a payload object that contains a store name!');\n      }\n      gameStore.setName(payload.name);\n\n      const startingGold = gameStore.getStartingGold();\n      gameStore.setGold(startingGold);\n\n      supplies.setSupplyLevel(currentMaxLevel);\n      supplies.fillSupplyPool();\n      suppliers.initializeSuppliers(maxSuppliers);\n\n    },\n\n    getGameLevel: function() {\n      return currentMaxLevel;\n    }\n\n  }\n} ());\n\nexport default main;","import React from 'react';\nimport './StartScreen.css';\n\nimport Title from '../../Components/Title/Title';\n\nimport game from '../../game_modules/main';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\n\n\nclass StartScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleNameInput = this.handleNameInput.bind(this);\n  }\n  \n  handleStart() {\n    const newName = this.props.name;\n    if (!newName || newName === '') {\n      return;\n    }\n    game.init({ name: newName });\n    this.props.setStarted(true);\n  }\n\n  handleNameInput(e) {\n    if (e.charCode === 13) {\n      this.handleStart();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"StartScreen\">\n        <Title />\n        <div className=\"NameInput\">\n          <div className=\"nameInputGroup\">\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\n            <input id=\"name\" \n              value={this.props.name}\n              type=\"text\"\n              onChange={(val) => this.props.setStoreName(val.target.value)}\n              onKeyPress={this.handleNameInput}\n            />\n          </div>\n          <button onClick={this.handleStart} \n            className=\"StartButton\">\n              Start!    \n          </button>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started,\n    name: state.storeState.name\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './MenuBar.css';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderEditorLink = this.renderEditorLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li key=\"login\"><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li key=\"login\"><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderEditorLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"editorLink\"><a className=\"EditorLink\" href=\"/editor\">editor</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderEditorLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\n\nimport MenuBar from '../../Components/MenuBar/MenuBar';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMainView = this.getMainView.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getMainView() {\n    const gameState = this.props.started;\n    if (!gameState) {\n      return (\n        <StartScreen />\n      )\n    } else {\n      return (\n        <GameScreen />\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        {this.getMainView()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);","import { SET_DAY } from '../actions/types';\n\nconst initialState = {\n  day: 1\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day\n      }\n    default:\n      return state;\n  }\n}","import { SET_GAME_STATE,\n  SET_UPDATES,\n  SET_STORE_UPDATE}\n   from '../actions/types';\n\nconst initialState = {\n  started: false,\n  storeUpdate: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        started: action.value\n      }\n    case SET_UPDATES:\n      const updates = action.payload;\n      const { storeUpdate } = updates;\n      return {\n        ...state,\n        storeUpdate: storeUpdate\n      }\n    case SET_STORE_UPDATE:\n      return {\n        ...state,\n        storeUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { SET_STORE_NAME,\n  SET_STORE_GOLD,\n  SET_STORE_INVENTORY } from '../actions/types';\n\nconst initialState = {\n  name: '',\n  gold: 0,\n  refreshing: false,\n  refreshed: false,\n  inventory: []\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_STORE_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case SET_STORE_GOLD:\n      return {\n        ...state,\n        gold: action.amount\n      }\n    case SET_STORE_INVENTORY:\n      const newInventory = action.inventory;\n      return {\n        ...state,\n        inventory: newInventory\n      }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLIERS } from '../actions/types';\n\nconst initialState = {\n  suppliers: null,\n  count: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLIERS:\n      let number = 0;\n      if (Array.isArray(action.payload)) {\n        number = action.payload.length;\n      }    \n      return {\n          ...state,\n          suppliers: action.payload,\n          count: number\n        }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst initialState = {\n  ready: false,\n  spawned: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLY_READY:\n      return {\n        ...state,\n        ready: action.value\n      }\n    case SET_SUPPLY_SPAWNED:\n      return {\n        ...state,\n        spawned: action.value\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport daysReducer from './daysReducer';\nimport gameStateReducer from './gameStateReducer'\nimport storeReducer from './storeReducer';\nimport authReducer from './authReducer';\nimport suppliersReducer from './suppliersReducer';\nimport suppliesReducer from './suppliesReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  days: daysReducer,\n  gameState: gameStateReducer,\n  storeState: storeReducer,\n  suppliers: suppliersReducer,\n  supplies: suppliesReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// This is a comment made to test the build pipeline to the backend.\n// and this should test the pipeline to heroku.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}