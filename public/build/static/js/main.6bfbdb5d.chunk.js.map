{"version":3,"sources":["Utilities/itemTypes.js","Utilities/potionTypes.js","Utilities/items.js","Utilities/storeInventory.js","Components/StoreInventory/StoreInventory.jsx","actions/types.js","Utilities/store.js","actions/index.js","Components/Store/Store.jsx","Components/Suppliers/Suppliers.jsx","Utilities/days.js","Components/Days/Days.jsx","Components/Details/Details.jsx","Containers/GameScreen/GameScreen.jsx","Components/Title/Title.jsx","Utilities/suppliers.js","Utilities/main.js","Containers/StartScreen/StartScreen.jsx","Components/MenuBar/MenuBar.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["itemTypes","potion","weapon","armor","potionTypes","items","ItemTypes","PotionTypes","Item","type","name","value","this","Potion","level","createItem","payload","itemPayload","newItem","newPotionType","console","log","newPotionLevel","createTestPotion","lvl","healing","getItemTypes","storeInventory","inventory","currentIdIndex","addItem","id","push","addPotion","Items","newPotion","addTestPotion","testPotion","getStoreInventory","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","length","map","item","className","key","React","Component","connect","state","storeState","dispatch","store","gold","getName","setName","newName","getStartingGold","getGold","setGold","newGold","fetchUser","a","axios","get","res","data","fetchGold","gameStore","amount","Store","componentDidMount","storeName","role","aria-label","setStoreGold","Suppliers","days","day","getDay","setDay","newDay","resetDay","Days","handleNextDay","currentDay","onClick","Details","GameScreen","Title","suppliers","initializeSuppliers","maxSuppliers","fetch","initSuppliers","json","pushIndex","Math","floor","random","newSupplier","splice","getSuppliers","main","init","startingGold","x","createTestPotions","StartScreen","handleStart","handleNameInput","game","setStarted","e","charCode","htmlFor","onChange","val","setStoreName","target","onKeyPress","started","gameState","MenuBar","renderLogin","renderEditorLink","auth","href","App","getMainView","actions","initialState","storeUpdate","refreshing","refreshed","combineReducers","action","updates","Boolean","window","location","hostname","match","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6bfbdb5d.chunk.js","sourcesContent":["const itemTypes = {\n  potion: 'potion',\n  weapon: 'weapon',\n  armor: 'armor'\n}\n\nexport default itemTypes;","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import ItemTypes from './itemTypes';\nimport PotionTypes from './potionTypes';\n\nconst items = (function(){\n  const itemTypes = ItemTypes;\n\n  const potionTypes = PotionTypes;\n  \n  const Item = function(type, name, value) {\n    this.type = type;\n    this.name = name;\n    this.value = value;\n  }\n\n  const Potion = function(type, level) {\n    this.type = type;\n    this.level = level;\n  }\n  \n  return {\n    createItem: function(payload) {\n      let { type, name, value, itemPayload } = payload;\n      if (!type[type]) {\n        console.log('invalid item type passed to items.createItem()');\n        return;\n      }\n      \n      const newItem = new Item(type, name, value);\n      \n      switch (newItem.type) {\n        case itemTypes.potion:\n          const newPotionType = itemPayload.type;  \n          if (!newPotionType) {\n            console.log('attempted to create invalid potion type');\n            return;\n          }\n          const newPotionLevel = itemPayload.level;\n          if (!newPotionLevel) {\n            console.log('attempted to create a potion with an invalid level');\n            return;\n          }\n          newItem[newItem.type] = new Potion(newPotionType, newPotionLevel);\n          break;\n        default:\n          break;\n      }\n      return newItem;\n    },\n\n    createTestPotion: function(lvl) {\n      const newItem = new Item({ type: itemTypes.potion, name: 'Healing Potion', value: 60});\n      newItem[itemTypes.potion] = new Potion(potionTypes.healing, lvl);\n      return newItem;\n    },\n\n    getItemTypes: function() {\n      return itemTypes;\n    }\n  }\n}());\n\nexport default items;","import Items from './items';\n\n\nconst storeInventory = (function(){\n  let inventory = [];\n\n  let currentIdIndex = 0;\n\n  const addItem = function(newItem) {\n    newItem.id = currentIdIndex;\n    currentIdIndex++;\n    inventory.push(newItem);\n  }\n\n  \n  return {\n    addPotion: function(name, value, payload) {\n      const itemTypes = Items.getItemTypes();\n      const newPotion = Items.createItem(itemTypes.potion, name, value, payload);\n      addItem(newPotion);\n    },\n\n    addTestPotion: function() {\n      const testPotion = Items.createTestPotion();\n      addItem(testPotion);\n    },\n\n    getStoreInventory: function() {\n      return inventory;\n    }\n  }\n}());\n\nexport default storeInventory;","import React from 'react';\nimport './StoreInventory.css';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_INVENTORY } from '../../actions/types';\n\nimport storeInventory from '../../Utilities/storeInventory';\n\nclass StoreInventory extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.getInventoryItems = this.getInventoryItems.bind(this);\n  }\n\n  componentDidMount() {\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\n    this.props.setInventory(newInventory);\n  }\n\n  getInventoryItems() {\n    if (this.props.inventory && this.props.inventory.length > 0) {\n      return (\n        <div>{this.props.inventory.map(item => {\n          return (\n            <div className=\"InventoryItem\" key={item.id}>\n              <span className=\"InventoryItemName\">{item.name}</span>\n              <div className=\"ItemValueGroup\">\n                <span className=\"CoinSymbol\">&#x2689; </span>\n                <span className=\"InventoryItemValue\">{item.value}</span>\n              </div>\n              \n            </div>\n          )\n        })}</div>\n      )     \n    } else {\n      return (\n        <div>No inventory</div>\n      )\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"StoreInventory\">\n        {this.getInventoryItems()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.storeState.inventory\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","export const SET_DAY = \"SET_DAY\";\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\nexport const SET_UPDATES = \"SET_UPDATES\";\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\nexport const SET_STORE_INVENTORY = 'SET_STORE_INVENTORY';\nexport const FETCH_USER = 'FETCH_USER';","const store = (function(){\n  let name = '';\n\n  const startingGold = 1000;\n  let gold = startingGold;\n  \n  return {\n    getName: function() {\n      return name;\n    },\n\n    setName: function(newName) {\n      name = newName;\n    },\n\n    getStartingGold: function() {\n      return startingGold;\n    },\n\n    getGold: function() {\n      return gold;\n    },\n\n    setGold: function(newGold) {\n      gold = newGold;\n    }\n  }\n}());\n\nexport default store;","import axios from 'axios';\nimport { FETCH_USER, SET_STORE_GOLD } from './types';\n\n// game imports\nimport gameStore from '../Utilities/store';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchGold = () => async dispatch => {\n  const gold = await gameStore.getGold();\n  dispatch({ type: SET_STORE_GOLD, amount: gold });\n}","import React from 'react';\nimport './Store.css';\n\n// import gameStore from '../../Utilities/store';\n\nimport StoreInventory from '../StoreInventory/StoreInventory';\n\nimport { SET_STORE_GOLD } from '../../actions/types';\nimport { fetchGold } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  \n  componentDidMount() {\n    this.props.fetchGold();\n  }\n\n  \n  \n  render() {\n    return (\n      <div className=\"Store\">\n        <div className=\"StoreMenuBar\">\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\n          <span className=\"Inspect\" role=\"img\" aria-label=\"inspect\">&#128269; </span>\n          <div className=\"GoldDisplay\">\n            <span className=\"CoinSymbol\" role=\"img\" aria-label=\"coin\">&#x2689; </span>\n            {this.props.gold}\n          </div>\n        </div>\n        <StoreInventory />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name,\n    gold: state.storeState.gold\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold }),\n    fetchGold: () => dispatch(fetchGold())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\nimport './Suppliers.css';\n\nclass Suppliers extends React.Component {\n  render() {\n    return (\n      <div className=\"Suppliers\">\n        Suppliers\n      </div>\n    )\n  }\n}\n\nexport default Suppliers;","const days = (function (){\n  const startDay = 1;\n  let day = startDay;\n\n  return {\n    getDay: function() {\n      return day;\n    },\n\n    setDay: function(newDay) {\n      if (typeof newDay !== \"number\") {\n        console.log(\"trying to set day to a non number value!\");\n        return;\n      }\n      day = newDay;\n    },\n\n    resetDay: function() {\n      day = startDay;\n    }\n  }\n}());\n\nexport default days;","import React from 'react';\nimport './Days.css';\n\n// import days controller from game code\nimport days from '../../Utilities/days';\n\n// import redux modules\nimport { SET_DAY } from '../../actions/types';\nimport { connect } from 'react-redux'\n\nclass Days extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.handleNextDay = this.handleNextDay.bind(this);\n  }\n\n  handleNextDay() {\n    const currentDay = this.props.day;\n    // set day in game\n    days.setDay(currentDay + 1);\n    // set day in redux state;\n    this.props.setDay(days.getDay());\n  }\n\n  render() {\n    return (\n      <div className=\"Days\">\n        <span className=\"DayTitle\">Day: {this.props.day}</span>\n        <button className=\"nextDay\" onClick={this.handleNextDay}\n        >Finish Day</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    day: state.days.day\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDay: (day) => dispatch({ type: SET_DAY, day: day })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\nimport './Details.css';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"Details\">\n        Details\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React from 'react';\nimport './GameScreen.css';\n\n// import Title from '../../Components/Title/Title';\nimport Store from '../../Components/Store/Store';\nimport Suppliers from '../../Components/Suppliers/Suppliers';\nimport Days from '../../Components/Days/Days';\nimport Details from '../../Components/Details/Details';\n\nimport { connect } from 'react-redux';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"GameScreen flex-container\">\n        <div className=\"CommerceColumn\">\n          <Days />\n          <Store />\n          <Suppliers />\n        </div>\n        <Details />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name\n  }\n}\n\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\nimport './Title.css';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"Title\">VENDOR</div>\n    )\n  }\n}\n\nexport default Title;","const suppliers = (function(){\n\n  let suppliers = [];\n\n  return {\n    initializeSuppliers: async function(maxSuppliers) {\n      let initSuppliers;\n      try {\n        initSuppliers = await fetch('/suppliers');\n      } catch (err) {\n        console.log(err);\n      }\n      if (initSuppliers) {\n        console.log(initSuppliers);\n        initSuppliers = initSuppliers.json();\n        console.log(initSuppliers);\n        while (suppliers.length < maxSuppliers && initSuppliers.length > 0) {\n          const pushIndex = Math.floor(Math.random() * initSuppliers.length);\n          console.log(`pushIndex: ${pushIndex}`);\n          let newSupplier = initSuppliers.splice(pushIndex, 1);\n          suppliers.push(newSupplier);\n        }\n      }\n      \n      console.log(suppliers);\n    },\n    getSuppliers: function() {\n      return suppliers;\n    }\n  }\n}());\n\nexport default suppliers;","import days from './days';\nimport store from './store';\nimport storeInventory from './storeInventory';\nimport suppliers from './suppliers';\n\nconst main = (function() {\n  \n  const testPotionCount = 5;\n  const maxSuppliers = 3;\n  // const dailySupplies = 10;\n\n  const createTestPotions = function() {\n    for (let x = 0; x < testPotionCount; x++) {\n      storeInventory.addTestPotion();\n    }\n    \n  }\n\n  return {\n    init: function(payload) {\n      // set day to 1\n      days.setDay(1);\n      \n      // set store name\n      if (!payload.name) {\n        console.log('Game must be started with a payload object that contains a store name!');\n      }\n      store.setName(payload.name);\n\n      const startingGold = store.getStartingGold();\n      store.setGold(startingGold);\n\n      createTestPotions();\n\n      suppliers.initializeSuppliers(maxSuppliers);\n      console.log(suppliers.getSuppliers());\n    }\n\n  }\n} ());\n\nexport default main;","import React from 'react';\nimport './StartScreen.css';\n\nimport Title from '../../Components/Title/Title';\n\nimport game from '../../Utilities/main';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\n\n\nclass StartScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleNameInput = this.handleNameInput.bind(this);\n  }\n  \n  handleStart() {\n    const newName = this.props.name;\n    if (!newName || newName === '') {\n      return;\n    }\n    game.init({ name: newName });\n    this.props.setStarted(true);\n  }\n\n  handleNameInput(e) {\n    if (e.charCode === 13) {\n      this.handleStart();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"StartScreen\">\n        <Title />\n        <div className=\"NameInput\">\n          <div className=\"nameInputGroup\">\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\n            <input id=\"name\" \n              value={this.props.name}\n              type=\"text\"\n              onChange={(val) => this.props.setStoreName(val.target.value)}\n              onKeyPress={this.handleNameInput}\n            />\n          </div>\n          <button onClick={this.handleStart} \n            className=\"StartButton\">\n              Start!    \n          </button>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started,\n    name: state.storeState.name\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './MenuBar.css';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderEditorLink = this.renderEditorLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li key=\"login\"><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li key=\"login\"><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderEditorLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"editorLink\"><a className=\"EditorLink\" href=\"/editor\">editor</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderEditorLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\n\nimport MenuBar from '../../Components/MenuBar/MenuBar';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMainView = this.getMainView.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getMainView() {\n    const gameState = this.props.started;\n    if (!gameState) {\n      return (\n        <StartScreen />\n      )\n    } else {\n      return (\n        <GameScreen />\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        {this.getMainView()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);","import { SET_DAY } from '../actions/types';\nimport days from '../Utilities/days';\n\nconst initialState = {\n  day: days.getDay()\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day\n      }\n    default:\n      return state;\n  }\n}","import { SET_GAME_STATE,\n  SET_UPDATES,\n  SET_STORE_UPDATE}\n   from '../actions/types';\n\nconst initialState = {\n  started: false,\n  storeUpdate: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        started: action.value\n      }\n    case SET_UPDATES:\n      const updates = action.payload;\n      const { storeUpdate } = updates;\n      return {\n        ...state,\n        storeUpdate: storeUpdate\n      }\n    case SET_STORE_UPDATE:\n      return {\n        ...state,\n        storeUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { SET_STORE_NAME,\n  SET_STORE_GOLD,\n  SET_STORE_INVENTORY } from '../actions/types';\n\nconst initialState = {\n  name: '',\n  gold: 0,\n  refreshing: false,\n  refreshed: false,\n  inventory: []\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_STORE_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case SET_STORE_GOLD:\n      return {\n        ...state,\n        gold: action.amount\n      }\n    case SET_STORE_INVENTORY:\n      const newInventory = action.inventory;\n      return {\n        ...state,\n        inventory: newInventory\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport daysReducer from './daysReducer';\nimport gameStateReducer from './gameStateReducer'\nimport storeReducer from './storeReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  days: daysReducer,\n  gameState: gameStateReducer,\n  storeState: storeReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// This is a comment made to test the build pipeline to the backend.\n// and this should test the pipeline to heroku.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}