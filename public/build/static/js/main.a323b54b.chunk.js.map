{"version":3,"sources":["Utilities/itemTypes.js","game_modules/storeInventory.js","actions/types.js","Utilities/potionTypes.js","game_modules/items.js","Components/StoreInventory/StoreInventory.jsx","game_modules/store.js","game_modules/days.js","game_modules/supplies.js","game_modules/suppliers.js","actions/index.js","Components/Store/Store.jsx","Components/SupplierBuyButton/SupplierBuyButton.jsx","Components/Supplier/Supplier.jsx","Components/Suppliers/Suppliers.jsx","Components/Days/Days.jsx","Components/Details/Details.jsx","Containers/GameScreen/GameScreen.jsx","Components/Title/Title.jsx","game_modules/main.js","Containers/StartScreen/StartScreen.jsx","Components/MenuBar/MenuBar.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/suppliersReducer.js","reducers/suppliesReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["itemTypes","potion","weapon","armor","storeInventory","inventory","addItem","id","undefined","newStoreItem","itemId","markup","push","getStoreInventory","updateStoreInventory","payload","type","store","dispatch","dispatchStoreInventory","potionTypes","items","ItemTypes","PotionTypes","allItems","lastIndex","Item","name","value","prototypeId","this","Potion","level","Weapon","damage","Armor","createItem","itemPayload","newItem","newPotionType","console","log","newPotionLevel","potionPayload","newWeaponDamage","newWeaponLevel","weaponPayload","newArmorArmor","newArmorLevel","armorPayload","getItem","thisItem","find","item","createTestPotion","lvl","healing","getItemTypes","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","length","filteredInventory","composedInventory","forEach","storeItems","filterActive","storeFilter","filter","map","composedPrice","Math","floor","className","key","React","Component","connect","state","storeState","inventoryCount","gameStore","gold","chargeGold","amount","getName","setName","newName","getStartingGold","getGold","setGold","newGold","updateGold","dispatchStoreGold","days","day","getDay","setDay","newDay","resetDay","supplies","suppliesPool","supplyLevel","itemTypesArr","Object","values","itemTypeCount","itemSpawnCount","fetchItemArrForSupplyPool","a","typeToFetch","maxLvl","fetchURL","fetch","possibleItems","json","getItemForSupplyPool","newItems","then","itemsOfLevel","dispatchSpawned","catch","err","spawnSupply","typeIndex","random","typeToSpawn","newSupplyArr","Array","isArray","Items","getSupplies","fillSupplies","i","dispatchReady","fillSupplyPool","typeItem","depleteSupply","supplyIndex","indexOf","splice","setSupplyLevel","suppliers","currentId","Supplier","offerings","prototype","rankFavorites","bestOfferings","offeringsCount","sort","off1","off2","rankedOfferings","sellItem","price","itemIndex","dispatchSuppliers","newSuppliers","fetchSuppliers","initSuppliers","getSuppliers","initializeSuppliers","maxSuppliers","next","drainSuppliers","pushIndex","newSupplier","supplierPayload","thisSupplier","supplier","takeSupplierTurn","remainingSupplies","supplyTypes","supplyValues","remainingSupply","supplyItem","currentSupplier","supplierCount","remSupply","remNum","supplierTries","thisIndex","taken","supplierIndex","favorites","thisSupply","takeSupplies","dispatchSupplyReady","refSupplier","sellPayload","updateSuppliers","fetchUser","axios","get","res","data","fetchGold","fetchDay","Store","componentDidMount","toggleFilter","getFilter","handleFilter","e","currentType","target","setStoreFilter","defaultValue","onChange","itemType","newValue","setStoreFilterActive","storeName","role","aria-label","onClick","setStoreGold","SupplierBuyButton","getSuppllierInventory","handlePurchase","ids","storeGold","sellId","gameSuppliers","gameStoreInventory","initialized","thisInventory","inventoryItem","gameItems","inventoryGroups","valueGroups","typeGroups","idGroups","composedItems","entries","count","item1","item2","nameA","toUpperCase","nameB","findIndex","offering","composedValue","supplyReady","ready","Suppliers","suppliersInitialized","componentDidUpdate","supplySpawned","gameSupplies","gameSupplier","setState","currentSuppliers","suppliersDisplay","renderSupplier","spawned","Days","handleNextDay","currentDay","Details","GameScreen","Title","main","init","startingGold","getGameLevel","StartScreen","handleStart","handleNameInput","game","setStarted","charCode","htmlFor","val","setStoreName","onKeyPress","started","gameState","MenuBar","renderLogin","renderEditorLink","auth","href","App","getMainView","actions","initialState","storeUpdate","refreshing","refreshed","combineReducers","action","updates","newCount","number","Boolean","window","location","hostname","match","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a323b54b.chunk.js","sourcesContent":["const itemTypes = {\n  potion: 'potion',\n  weapon: 'weapon',\n  armor: 'armor'\n}\n\nexport default itemTypes;","// redux imports\nimport { store } from '../index';\nimport { SET_STORE_INVENTORY } from '../actions/types';\n\nconst storeInventory = (function(){\n  let inventory = [];\n\n  const dispatchStoreInventory = function() {\n    const payload = {\n      type: SET_STORE_INVENTORY,\n      inventory: inventory\n    }\n    store.dispatch(payload);\n  }\n  return {\n    addItem: function(id) {\n      if (id === null || id === undefined) {\n        return false;\n      }\n      const newStoreItem = { itemId: id,\n        markup: 150\n      }\n      inventory.push(newStoreItem);\n    },\n\n    getStoreInventory: function() {\n      return inventory;\n    },\n\n    updateStoreInventory: function() {\n      dispatchStoreInventory();\n    }\n  }\n}());\n\nexport default storeInventory;","export const SET_DAY = \"SET_DAY\";\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\nexport const SET_UPDATES = \"SET_UPDATES\";\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\nexport const SET_STORE_INVENTORY = \"SET_STORE_INVENTORY\";\nexport const FETCH_USER = \"FETCH_USER\";\nexport const SET_SUPPLIERS = \"SET_SUPPLIERS\";\nexport const SET_SUPPLY_READY = \"SET_SUPPLY_READY\";\nexport const SET_SUPPLY_SPAWNED = \"SET_SUPPLY_SPAWNED\";\nexport const SET_STORE_FILTER = \"SET_STORE_FILTER\";\nexport const SET_STORE_FILTER_ACTIVE = \"SET_STORE_FILTER_ACTIVE\";","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import ItemTypes from '../Utilities/itemTypes';\nimport PotionTypes from '../Utilities/potionTypes';\n\nconst items = (function(){\n  const itemTypes = ItemTypes;\n  const potionTypes = PotionTypes;\n\n  let allItems = [];\n  let lastIndex = 0;\n  \n  const Item = function(payload) {\n    const { type, name, value, prototypeId } = payload;\n    this.type = type;\n    this.name = name;\n    this.value = value;\n    this.prototypeId = prototypeId;\n    this.id = lastIndex;\n    lastIndex++;\n  }\n\n  const Potion = function(payload) {\n    const { type, level } = payload;\n    this.type = type;\n    this.level = level;\n  }\n\n  const Weapon = function(payload) {\n    const { damage, level } = payload;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  const Armor = function(payload) {\n    const { armor, level } = payload;\n    this.armor = armor;\n    this.level = level;\n  }\n  \n  return {\n    createItem: function(payload) {\n      let { type, name, value, itemPayload } = payload;\n      if (!itemTypes[type]) {\n        console.log('invalid item type passed to items.createItem()');\n        return;\n      }\n      \n      const newPayload = { type: type , name: name , value: value }\n      const newItem = new Item(newPayload);\n      \n      switch (newItem.type) {\n        case itemTypes.potion:\n          const newPotionType = itemPayload.type;  \n          if (!newPotionType) {\n            console.log('attempted to create invalid potion type');\n            return;\n          }\n          const newPotionLevel = itemPayload.level;\n          if (!newPotionLevel) {\n            console.log('attempted to create a potion with an invalid level');\n            return;\n          }\n          const potionPayload = { type: newPotionType, level: newPotionLevel };\n          newItem[newItem.type] = new Potion(potionPayload);\n          break;\n        case itemTypes.weapon:\n          const newWeaponDamage = itemPayload.damage;\n          if (!newWeaponDamage) {\n            console.log('attempted to create a weapon without damage');\n            return;\n          }\n          const newWeaponLevel = itemPayload.level;\n          if (!newWeaponLevel) {\n            console.log('attempted to create a weapon with an invalid level');\n            return;\n          }\n          const weaponPayload = { damage: newWeaponDamage, level: newWeaponLevel };\n          newItem[newItem.type] = new Weapon(weaponPayload);\n          break;\n        case itemTypes.armor:\n          const newArmorArmor = itemPayload.armor;\n          if (!newArmorArmor) {\n            console.log('attempted to make a new armor without an armor value');\n            return;\n          }\n          const newArmorLevel = itemPayload.level;\n          if (!newArmorLevel) {\n            console.log('attempted to make a new armor without a level value');\n            return;\n          }\n          const armorPayload = { armor: newArmorArmor, level: newArmorLevel };\n          newItem[newItem.type] = new Armor(armorPayload);\n          break;\n        default:\n          break;\n      }\n\n      allItems.push(newItem);\n      return newItem.id;\n    },\n\n    getItem(id) {\n      let thisItem = allItems.find(item => item.id === id);\n      if (thisItem) {\n        return thisItem;\n      } else {\n        console.log('attempted to retrieve invalid item.')\n      }\n    },\n\n    createTestPotion: function(lvl) {\n      const newItem = new Item({ type: itemTypes.potion, name: 'Healing Potion', value: 60});\n      newItem[itemTypes.potion] = new Potion({ type: potionTypes.healing, level: lvl});\n      return newItem;\n    },\n\n    getItemTypes: function() {\n      return itemTypes;\n    }\n  }\n}());\n\nexport default items;","import React from 'react';\nimport './StoreInventory.css';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_INVENTORY } from '../../actions/types';\n\nimport storeInventory from '../../game_modules/storeInventory';\nimport storeItems from '../../game_modules/items';\n\nclass StoreInventory extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.getInventoryItems = this.getInventoryItems.bind(this);\n  }\n\n  componentDidMount() {\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\n    this.props.setInventory(newInventory);\n  }\n\n  getInventoryItems() {\n    if (this.props.inventory && this.props.inventory.length > 0) {\n      let composedInventory = [];\n      this.props.inventory.forEach(item => {\n        let thisItem = storeItems.getItem(item.itemId);\n        composedInventory.push({ ...thisItem, markup: item.markup });\n      });\n      let filteredInventory;\n      if (!this.props.filterActive || this.props.storeFilter === 'all') {\n        filteredInventory = composedInventory;\n      } else {\n        filteredInventory = composedInventory.filter(item => item.type === this.props.storeFilter);\n      }\n      return (\n        <div>{filteredInventory.map(item => {\n          const composedPrice = Math.floor(item.value * (1 + (item.markup / 1000)));\n          return (\n            <div className=\"InventoryItem itemBackground\" key={item.id}>\n              <span className=\"InventoryItemName\">{item.name}</span>\n              <div className=\"ItemValueGroup\">\n                <span className=\"CoinSymbol\">&#x2689; </span>\n                <span className=\"InventoryItemValue\">{composedPrice}</span>\n              </div>\n              \n            </div>\n          )\n        })}</div>\n      )     \n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"StoreInventory\">\n        {this.getInventoryItems()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.storeState.inventory,\n    inventoryCount: state.storeState.inventoryCount,\n    filterActive: state.storeState.filterActive,\n    storeFilter: state.storeState.filter\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","// redux imports\nimport { store } from '../index';\nimport { SET_STORE_GOLD } from '../actions/types';\n\nconst gameStore = (function(){\n  let name = '';\n\n  const startingGold = 1000;\n  let gold = startingGold;\n\n  const dispatchStoreGold = function() {\n    const payload = {\n      type: SET_STORE_GOLD,\n      amount: gold\n    }\n    store.dispatch(payload);\n  }\n  \n  return {\n    chargeGold: function(amount) {\n      if (gold < amount) {\n        console.log('attempted to charge more gold than vendor owns')\n        return false;\n      }\n      gold -= amount;\n    },\n    getName: function() {\n      return name;\n    },\n\n    setName: function(newName) {\n      name = newName;\n    },\n\n    getStartingGold: function() {\n      return startingGold;\n    },\n\n    getGold: function() {\n      return gold;\n    },\n\n    setGold: function(newGold) {\n      gold = newGold;\n    },\n    updateGold: function() {\n      dispatchStoreGold();\n    }\n  }\n}());\n\nexport default gameStore;","const days = (function (){\n  const startDay = 1;\n  let day = startDay;\n\n  return {\n    getDay: function() {\n      return day;\n    },\n\n    setDay: function(newDay) {\n      if (typeof newDay !== \"number\") {\n        console.log(\"trying to set day to a non number value!\");\n        return;\n      }\n      day = newDay;\n    },\n\n    resetDay: function() {\n      day = startDay;\n    }\n  }\n}());\n\nexport default days;","import ItemTypes from '../Utilities/itemTypes';\nimport Items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst supplies = (function(){\n  let supplies = [];\n\n  let suppliesPool = {};\n  let supplyLevel = 1;\n\n  const itemTypesArr = Object.values(ItemTypes);\n  const itemTypeCount = itemTypesArr.length;\n  let itemSpawnCount = 0;\n\n  const dailySupplies = 10;\n\n  const dispatchReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSpawned = function(value) {\n    const payload = {\n      type: SET_SUPPLY_SPAWNED,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  // fill supply pool\n  const fetchSupplyPool = function() {\n    // produce array of type strings and choose one at random\n    itemSpawnCount = 0;\n    itemTypesArr.forEach(typeItem => {\n      if (suppliesPool[typeItem] == null) {\n        suppliesPool[typeItem] = [];\n      }\n      suppliesPool[typeItem].length = 0;\n    });\n\n    getItemForSupplyPool();\n    return true;\n  }\n\n  // fetch an item from backend\n  const fetchItemArrForSupplyPool = async function() {\n    let lvl = supplyLevel;\n    if (!lvl) return;\n\n    let typeToFetch = itemTypesArr[itemSpawnCount];\n\n    if (typeToFetch !== 'armor') {\n      typeToFetch += 's';\n    }\n\n    const minLvl = 1;\n    const maxLvl = lvl;\n\n    const fetchURL = `/${typeToFetch}-in-level-range?min-level=${minLvl}&max-level=${maxLvl}`;\n    \n    let possibleItems;\n    try {\n      possibleItems = await fetch(fetchURL);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (possibleItems) {\n      possibleItems = possibleItems.json();\n    }\n\n    return possibleItems;\n  }\n\n  // take an item that was fetched from backend and create it\n  // with item constructors and put it into state\n  const getItemForSupplyPool = function() {\n    if (itemSpawnCount >= itemTypeCount) {\n      return;\n    }\n    let newItems;\n    fetchItemArrForSupplyPool()\n      .then(itemsOfLevel => {\n        newItems = itemsOfLevel;\n      \n        // initialize field on pool if need be\n        if (suppliesPool[itemTypesArr[itemSpawnCount]] === null) {\n          suppliesPool[itemTypesArr[itemSpawnCount]] = [];\n        }\n        // push item id into supplies\n        suppliesPool[itemTypesArr[itemSpawnCount]].push(newItems);\n\n        itemSpawnCount++;\n        if (itemSpawnCount === itemTypeCount) {\n          dispatchSpawned(true);\n        }\n        getItemForSupplyPool();\n        return true;\n      }).catch(err => console.log(err));\n  }\n\n  const spawnSupply = function() {\n    // produce array of type strings and choose one at random\n    let typeIndex = Math.floor(Math.random() * itemTypesArr.length);\n    let typeToSpawn = itemTypesArr[typeIndex];\n    const newSupplyArr = suppliesPool[typeToSpawn];\n    let randomChoice = Math.floor(Math.random() * newSupplyArr.length);\n    let newItem = newSupplyArr[randomChoice];\n\n    if (Array.isArray(newItem)) {\n      newItem = newItem[0];\n    }\n\n    // compose payload for Item constructor\n    let itemPayload = {};\n    itemPayload.level = newItem.level;\n    switch(newItem.item.type) {\n      case ItemTypes.potion:\n        itemPayload.type = newItem.type;\n        break;\n      case ItemTypes.weapon:\n        itemPayload.damage = newItem.damage;\n        break;\n      case ItemTypes.armor:\n        itemPayload.armor = newItem.armor;\n        break;\n      default:\n        break;\n    }\n    let payload = {};\n    payload.itemPayload = itemPayload;\n    payload.type = newItem.item.type;\n    payload.name = newItem.item.name;\n    payload.value = newItem.item.value;\n    payload.prototypeId = newItem.item.id;\n\n    // create item and add to total inventory in Items module\n    let itemId = Items.createItem(payload);\n    supplies.push(itemId);\n\n  }\n  \n  return {\n    getSupplies: function() {\n      return supplies;\n    },\n    fillSupplies: function() {\n      for (let i = 0; i < dailySupplies; i++) {\n        spawnSupply();\n      }\n      dispatchReady(true);\n    },\n    fillSupplyPool: function() {\n      fetchSupplyPool();\n    },\n    depleteSupply: function(id) {\n      let supplyIndex = supplies.indexOf(id);\n      if (supplyIndex >= 0) {\n        let chosenSupply = supplies.splice(supplyIndex, 1);\n        return chosenSupply;\n      }\n    },\n    setSupplyLevel: function(lvl) {\n      supplyLevel = lvl;\n    }\n  }\n}());\n\nexport default supplies;","// game imports\nimport supplies from './supplies';\nimport items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLIERS, SET_SUPPLY_READY } from '../actions/types';\n\nconst suppliers = (function(){\n\n  let suppliers = [];\n\n  let currentId = 0;\n\n  const startingGold = 1000;\n\n  const Supplier = function(payload) {\n    const { name, offerings } = payload;\n    this.name = name;\n    this.offerings = offerings;\n    this.inventory = [];\n    this.id = currentId;\n    currentId++;\n  }\n\n  Supplier.prototype.rankFavorites = function() {\n    let bestOfferings = [];\n    const offeringsCount = this.offerings.length;\n    for (let i = 0; i < offeringsCount; i++) {\n      bestOfferings.push(this.offerings[i]);\n    }\n    bestOfferings.sort((off1, off2) => {\n      return off1.markup - off2.markup;\n    });\n    this.rankedOfferings = bestOfferings;\n  }\n\n  Supplier.prototype.sellItem = function(payload) {\n    let { id, price } = payload;\n\n    const itemIndex = this.inventory.indexOf(id);\n    if (!itemIndex && itemIndex !== 0) {\n      return false;\n    }\n\n    this.inventory.splice(itemIndex, 1);\n    this.gold += price;\n\n    return true;\n  }\n\n  const dispatchSuppliers = function(newSuppliers) {\n    const payload = {\n      type: SET_SUPPLIERS,\n      payload: newSuppliers\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSupplyReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const fetchSuppliers = async function() {\n    let initSuppliers;\n      try {\n        initSuppliers = await fetch('/suppliers');\n      } catch (err) {\n        console.log(err);\n      }\n      if (initSuppliers) {\n        initSuppliers = initSuppliers.json();\n      }\n      return initSuppliers;\n  }\n\n  const getSuppliers = function*() {\n    yield fetchSuppliers();\n  }\n\n  const takeSupplies = function() {\n    // copy supplies to local array\n    const remainingSupplies = JSON.parse(JSON.stringify(supplies.getSupplies()));\n    let supplyTypes = [];\n    let supplyValues = [];\n    remainingSupplies.forEach(remainingSupply => {\n      const supplyItem = items.getItem(remainingSupply);\n      supplyTypes.push(supplyItem.type);\n      supplyValues.push(supplyItem.value);\n    });\n    let currentSupplier = 0;\n    const supplierCount = suppliers.length;\n    // loop through each supply item\n    remainingSupplies.forEach((remSupply, remNum) => {\n      // create an order based on last supplier to take an\n      // item and proceeded sequentially to include all\n      // suppliers\n      let supplierTries = [];\n      for (let i = 0; i < supplierCount; i++) {\n        let thisIndex = currentSupplier + i;\n        if (thisIndex >= supplierCount) {\n          thisIndex -= supplierCount;\n        }\n        supplierTries.push(thisIndex);\n      }\n      let taken = false;\n      \n      // check with each supplier if type of current supply is\n      // in their offerings\n      supplierTries.forEach(supplierIndex => {\n        let favorites = suppliers[supplierIndex].rankedOfferings;\n        for (let fave of favorites) {\n          // if type of supplier's offering equals type of this supply\n          if (fave.type === supplyTypes[remNum]) {\n            if (!taken && suppliers[supplierIndex].gold >= supplyValues[remNum]) {\n              // if supplier inventory not initialized, set to empty array\n              if (suppliers[supplierIndex].inventory === null) {\n                suppliers[supplierIndex].inventory = [];\n              }\n\n              // remove item from supply\n              let thisSupply = supplies.depleteSupply(remSupply);\n              if (Array.isArray(thisSupply)) {\n                thisSupply = thisSupply[0];\n              }\n\n              suppliers[supplierIndex].gold -= supplyValues[remNum];\n\n              // put item in supplier's inventory\n              suppliers[supplierIndex].inventory.push(thisSupply);\n\n              // mark item taken;\n              taken = true;\n              currentSupplier = supplierIndex + 1;\n              if (currentSupplier > supplierCount) {\n                currentSupplier = 0;\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    initializeSuppliers: async function(maxSuppliers) {\n      const gGetSuppliers = getSuppliers();\n      gGetSuppliers.next().value\n        .then(initSuppliers => {\n          if (initSuppliers) {\n            let drainSuppliers = initSuppliers;\n            while (suppliers.length < maxSuppliers && drainSuppliers.length > 0) {\n              const pushIndex = Math.floor(Math.random() * drainSuppliers.length);\n              let newSupplier = drainSuppliers.splice(pushIndex, 1);\n              newSupplier = newSupplier[0];\n              const supplierPayload = { name: newSupplier.name, offerings: newSupplier.offerings };\n              let thisSupplier = new Supplier(supplierPayload);\n              thisSupplier.gold = startingGold;\n              suppliers.push(thisSupplier);\n            }\n            suppliers.forEach(supplier => supplier.rankFavorites());\n            dispatchSuppliers(suppliers);\n            return suppliers;\n          }\n        });\n    },\n    getSuppliers: function() {\n      return suppliers;\n    },\n    takeSupplierTurn: function() {\n      takeSupplies();\n      dispatchSuppliers(suppliers);\n      dispatchSupplyReady(false);\n    },\n    sellItem: function (payload) {\n      const { id, itemId, price} = payload;\n      \n      const thisSupplier = suppliers.find(refSupplier => refSupplier.id === id);\n      if (!thisSupplier) {\n        return false;\n      }\n      const sellPayload = {\n        id: itemId,\n        price: price\n      }\n\n      const resSale = thisSupplier.sellItem(sellPayload);\n      if (!resSale) {\n        return false;\n      }\n      return true;\n    },\n    updateSuppliers: function() {\n      dispatchSuppliers(suppliers);\n    }\n  }\n}());\n\nexport default suppliers;","import axios from 'axios';\nimport { FETCH_USER, SET_STORE_GOLD, SET_DAY, SET_SUPPLIERS } from './types';\n\n// game imports\nimport gameStore from '../game_modules/store';\nimport days from '../game_modules/days';\nimport suppliers from '../game_modules/suppliers';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchGold = () => async dispatch => {\n  const gold = await gameStore.getGold();\n  dispatch({ type: SET_STORE_GOLD, amount: gold });\n}\n\nexport const fetchDay = () => async dispatch => {\n  const day = await days.getDay();\n  dispatch({ type: SET_DAY, day: day });\n}\n\nexport const fetchSuppliers = () => async dispatch => {\n  const newSuppliers = await suppliers.getSuppliers();\n  dispatch({ type: SET_SUPPLIERS, payload: newSuppliers });\n}","import React from 'react';\nimport './Store.css';\n\n// import gameStore from '../../Utilities/store';\n\nimport ItemTypes from '../../Utilities/itemTypes';\nimport StoreInventory from '../StoreInventory/StoreInventory';\n\nimport { SET_STORE_GOLD, SET_STORE_FILTER, SET_STORE_FILTER_ACTIVE } from '../../actions/types';\nimport { fetchGold } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.toggleFilter = this.toggleFilter.bind(this);\n    this.getFilter = this.getFilter.bind(this);\n    this.handleFilter = this.handleFilter.bind(this);\n  }\n\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  \n  componentDidMount() {\n    this.props.fetchGold();\n  }\n\n  handleFilter(e) {\n    let currentType = e.target.value;\n    this.props.setStoreFilter(currentType);\n  }\n\n  getFilter() {\n    if (!this.props.filterActive) return '';\n    const itemTypesArr = Object.values(ItemTypes);\n    return (\n      <select className=\"StoreItemTypeFilter\" \n        defaultValue=\"all\"\n        onChange={this.handleFilter}>\n        <option value=\"all\">all</option>\n        {itemTypesArr.map(itemType => {\n          return (\n            <option value={itemType}>{itemType}</option>\n          )\n        })}\n      </select>\n    )\n  }\n\n  toggleFilter() {\n    const newValue = !this.props.filterActive;\n    this.props.setStoreFilterActive(newValue);\n  }\n  \n  render() {\n    return (\n      <div className=\"Store\">\n        <div className=\"StoreMenuBar\">\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\n          <div className=\"FilterGroup\">\n            {this.getFilter()}\n          </div>\n          <span className=\"Inspect\" role=\"img\" aria-label=\"inspect\" onClick={this.toggleFilter}>&#128269; </span>\n          <div className=\"GoldDisplay\">\n            \n            <div className=\"StoreGold\"><span className=\"CoinSymbol\" role=\"img\" aria-label=\"coin\">&#x2689; </span>{this.props.gold}</div>\n          </div>\n        </div>\n        <StoreInventory />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name,\n    gold: state.storeState.gold,\n    filterActive: state.storeState.filterActive\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold }),\n    fetchGold: () => dispatch(fetchGold()),\n    setStoreFilter: (filter) => dispatch({ type: SET_STORE_FILTER, filter: filter }),\n    setStoreFilterActive: (value) => dispatch({ type: SET_STORE_FILTER_ACTIVE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\nimport './SupplierBuyButton.css';\n\nclass SupplierBuyButton extends React.Component {\n  render() {\n    return (\n      <div className=\"SupplierBuyButton\">\n        <div className=\"supplierBuyButtonIcon\">\n          buy\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SupplierBuyButton;","import React from 'react';\nimport './Supplier.css';\n\nimport SupplierBuyButton from '../SupplierBuyButton/SupplierBuyButton';\n\n// game module imports\nimport gameItems from '../../game_modules/items';\nimport gameSuppliers from '../../game_modules/suppliers'\nimport gameStore from '../../game_modules/store';\nimport gameStoreInventory from '../../game_modules/storeInventory';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n\nclass Supplier extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSuppllierInventory = this.getSuppllierInventory.bind(this);\n    this.handlePurchase = this.handlePurchase.bind(this);\n  }\n\n  handlePurchase(payload) {\n    const { ids, price } = payload;\n\n    if (price > this.props.storeGold) {\n      return;\n    }\n\n    // sell first item of object\n    const sellId = ids[0];\n    const sellPayload = {\n      id: this.props.supplier.id,\n      itemId: sellId,\n      price: price\n    }\n    let sellRes = gameSuppliers.sellItem(sellPayload);\n    if (!sellRes) {\n      return;\n    }\n\n    // transact sale for vendor\n    gameStore.chargeGold(price);\n    gameStoreInventory.addItem(sellId);\n\n    // update state\n    gameStore.updateGold();\n    gameStoreInventory.updateStoreInventory();\n    gameSuppliers.updateSuppliers();\n\n  }\n\n  getSuppllierInventory() {\n    if (!this.props.initialized) {\n      return ''\n    }\n    // get details on items from ids\n    let thisInventory = [];\n    this.props.supplier.inventory.forEach(id => {\n      let inventoryItem = gameItems.getItem(id);\n      thisInventory.push(inventoryItem);\n    });\n\n    // organize all items by item name\n    let inventoryGroups = {};\n    let valueGroups = {}\n    let typeGroups = {}\n    let idGroups = {}\n    thisInventory.forEach(item => {\n      if (!inventoryGroups[item.name]) {\n        inventoryGroups[item.name] = 1;\n        valueGroups[item.name] = item.value;\n        typeGroups[item.name] = item.type;\n        idGroups[item.name] = [item.id]\n      } else {\n        inventoryGroups[item.name] += 1;\n        idGroups[item.name].push(item.id);\n      }\n    });\n\n    // create array of composed items\n    let composedItems = []\n    for (const [key, value] of Object.entries(inventoryGroups)) {\n      let item = { name: key, count: value, type: typeGroups[key], value: valueGroups[key], ids: idGroups[key] };\n      composedItems.push(item);\n    }\n\n    composedItems.sort((item1, item2) => {\n      const nameA = item1.name.toUpperCase();\n      const nameB = item2.name.toUpperCase();\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    return composedItems.map(item => {\n      const offerings = this.props.supplier.offerings;\n      const typeIndex = offerings.findIndex(offering => offering.type === item.type);\n      \n      let composedValue = item.value;\n      if (typeIndex !== -1) {\n        composedValue = composedValue * (1 + (offerings[typeIndex].markup / 1000));\n        composedValue = Math.floor(composedValue);\n      }\n\n      return (\n        <div className=\"SupplierInventoryItem itemBackground\" key={item.id}>\n          <span className=\"SupplierInventoryItemName\">{item.name} ({item.count})</span>\n          <div className=\"SupplierItemsValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{composedValue}</span>\n          </div>\n          <div className=\"BuyButtonContainer\" onClick={() => this.handlePurchase({ ids: item.ids, price: composedValue })}>\n              <SupplierBuyButton />\n            </div>\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Supplier\">\n        <div className=\"SupplierName\">\n          {this.props.supplier.name}\n          <div className=\"SupplierValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{this.props.supplier.gold}</span>\n          </div>\n        </div>\n        <div className=\"supplierInventory\">\n          {this.getSuppllierInventory()}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    supplyReady: state.supplies.ready,\n    storeGold: state.storeState.gold\n  }\n}\n\nexport default connect(mapStateToProps)(Supplier);","import React from 'react';\nimport './Suppliers.css';\nimport Supplier from '../Supplier/Supplier';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n// game imports\nimport gameSupplier from '../../game_modules/suppliers';\nimport gameSupplies from '../../game_modules/supplies';\n\nclass Suppliers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suppliersInitialized: false\n    }\n\n    this.getSuppliers = this.getSuppliers.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (Array.isArray(this.props.suppliers) && this.props.supplySpawned) {\n      if (!this.props.supplyReady) {\n        gameSupplies.fillSupplies();\n      }\n    }\n    if (Array.isArray(this.props.suppliers) && this.props.supplyReady) {\n      if (!this.state.suppliersInitialized) {\n        gameSupplier.takeSupplierTurn();\n        this.setState({\n          suppliersInitialized: true\n        })\n      }\n    }\n  }\n\n  getSuppliers() {\n    let currentSuppliers = this.props.suppliers;    \n    if (Array.isArray(currentSuppliers)) {\n      const suppliersDisplay = currentSuppliers.map(renderSupplier => {\n        return (<Supplier supplier={renderSupplier} initialized={this.state.suppliersInitialized}/>);\n      });\n\n      return (\n        <div className=\"suppliersContainer\">\n          {suppliersDisplay}\n          <div className=\"spacer\"></div>\n        </div>\n      );\n    } else {\n      return 'no suppliers to render';\n    }\n    \n  }\n  \n  render() {\n    return (\n      <div className=\"Suppliers\">\n        {this.getSuppliers()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    suppliers: state.suppliers.suppliers,\n    supplyReady: state.supplies.ready,\n    supplySpawned: state.supplies.spawned\n  }\n}\n\nexport default connect(mapStateToProps)(Suppliers);","import React from 'react';\nimport './Days.css';\n\n// import days controller from game code\nimport days from '../../game_modules/days';\n\n// import redux modules\nimport { fetchDay } from '../../actions';\nimport { connect } from 'react-redux'\n\nclass Days extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.handleNextDay = this.handleNextDay.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchDay();\n  }\n\n  handleNextDay() {\n    const currentDay = this.props.day;\n    // set day in game\n    days.setDay(currentDay + 1);\n    // set day in redux state;\n    this.props.fetchDay();\n  }\n\n  render() {\n    return (\n      <div className=\"Days\">\n        <span className=\"DayTitle\">Day: {this.props.day}</span>\n        <button className=\"nextDay\" onClick={this.handleNextDay}\n        >Finish Day</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    day: state.days.day\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchDay: () => dispatch(fetchDay())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\nimport './Details.css';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"Details\">\n        Details\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React from 'react';\nimport './GameScreen.css';\n\n// import Title from '../../Components/Title/Title';\nimport Store from '../../Components/Store/Store';\nimport Suppliers from '../../Components/Suppliers/Suppliers';\nimport Days from '../../Components/Days/Days';\nimport Details from '../../Components/Details/Details';\n\nimport { connect } from 'react-redux';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"GameScreen flex-container\">\n        <div className=\"CommerceColumn\">\n          <Days />\n          <Store />\n          <Suppliers />\n        </div>\n        <Details />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name\n  }\n}\n\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\nimport './Title.css';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"Title\">VENDOR</div>\n    )\n  }\n}\n\nexport default Title;","import days from './days';\nimport gameStore from './store';\nimport suppliers from './suppliers';\nimport supplies from './supplies';\n\nconst main = (function() {\n  \n  const maxSuppliers = 3;\n  let currentMaxLevel = 1;\n\n  return {\n    init: function(payload) {\n      // set day to 1\n      days.setDay(1);\n      \n      // set store name\n      if (!payload.name) {\n        console.log('Game must be started with a payload object that contains a store name!');\n      }\n      gameStore.setName(payload.name);\n\n      const startingGold = gameStore.getStartingGold();\n      gameStore.setGold(startingGold);\n\n      supplies.setSupplyLevel(currentMaxLevel);\n      supplies.fillSupplyPool();\n      suppliers.initializeSuppliers(maxSuppliers);\n\n    },\n\n    getGameLevel: function() {\n      return currentMaxLevel;\n    }\n\n  }\n} ());\n\nexport default main;","import React from 'react';\nimport './StartScreen.css';\n\nimport Title from '../../Components/Title/Title';\n\nimport game from '../../game_modules/main';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\n\n\nclass StartScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleNameInput = this.handleNameInput.bind(this);\n  }\n  \n  handleStart() {\n    const newName = this.props.name;\n    if (!newName || newName === '') {\n      return;\n    }\n    game.init({ name: newName });\n    this.props.setStarted(true);\n  }\n\n  handleNameInput(e) {\n    if (e.charCode === 13) {\n      this.handleStart();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"StartScreen\">\n        <Title />\n        <div className=\"NameInput\">\n          <div className=\"nameInputGroup\">\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\n            <input id=\"name\" \n              value={this.props.name}\n              type=\"text\"\n              onChange={(val) => this.props.setStoreName(val.target.value)}\n              onKeyPress={this.handleNameInput}\n            />\n          </div>\n          <button onClick={this.handleStart} \n            className=\"StartButton\">\n              Start!    \n          </button>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started,\n    name: state.storeState.name\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './MenuBar.css';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderEditorLink = this.renderEditorLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li key=\"login\"><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li key=\"login\"><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderEditorLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"editorLink\"><a className=\"EditorLink\" href=\"/editor\">editor</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderEditorLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\n\nimport MenuBar from '../../Components/MenuBar/MenuBar';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMainView = this.getMainView.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getMainView() {\n    const gameState = this.props.started;\n    if (!gameState) {\n      return (\n        <StartScreen />\n      )\n    } else {\n      return (\n        <GameScreen />\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        {this.getMainView()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);","import { SET_DAY } from '../actions/types';\n\nconst initialState = {\n  day: 1\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day\n      }\n    default:\n      return state;\n  }\n}","import { SET_GAME_STATE,\n  SET_UPDATES,\n  SET_STORE_UPDATE}\n   from '../actions/types';\n\nconst initialState = {\n  started: false,\n  storeUpdate: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        started: action.value\n      }\n    case SET_UPDATES:\n      const updates = action.payload;\n      const { storeUpdate } = updates;\n      return {\n        ...state,\n        storeUpdate: storeUpdate\n      }\n    case SET_STORE_UPDATE:\n      return {\n        ...state,\n        storeUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { SET_STORE_NAME,\n  SET_STORE_GOLD,\n  SET_STORE_INVENTORY,\n  SET_STORE_FILTER,\n  SET_STORE_FILTER_ACTIVE } from '../actions/types';\n\nconst initialState = {\n  name: '',\n  gold: 0,\n  filterActive: false,\n  filter: 'all',\n  refreshing: false,\n  refreshed: false,\n  inventory: [],\n  inventoryCount: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_STORE_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case SET_STORE_GOLD:\n      return {\n        ...state,\n        gold: action.amount\n      }\n    case SET_STORE_INVENTORY:\n      const newInventory = action.inventory;\n      let newCount = state.inventoryCount;\n      if (Array.isArray(newInventory)) {\n        newCount = newInventory.length;\n      }\n      return {\n        ...state,\n        inventory: newInventory,\n        inventoryCount: newCount\n      }\n    case SET_STORE_FILTER_ACTIVE:\n      return {\n        ...state,\n        filterActive: action.value\n      }\n    case SET_STORE_FILTER:\n      return {\n        ...state,\n        filter: action.filter\n      }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLIERS } from '../actions/types';\n\nconst initialState = {\n  suppliers: null,\n  count: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLIERS:\n      let number = 0;\n      if (Array.isArray(action.payload)) {\n        number = action.payload.length;\n      }    \n      return {\n          ...state,\n          suppliers: action.payload,\n          count: number\n        }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLY_READY, SET_SUPPLY_SPAWNED } from '../actions/types';\n\nconst initialState = {\n  ready: false,\n  spawned: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLY_READY:\n      return {\n        ...state,\n        ready: action.value\n      }\n    case SET_SUPPLY_SPAWNED:\n      return {\n        ...state,\n        spawned: action.value\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport daysReducer from './daysReducer';\nimport gameStateReducer from './gameStateReducer'\nimport storeReducer from './storeReducer';\nimport authReducer from './authReducer';\nimport suppliersReducer from './suppliersReducer';\nimport suppliesReducer from './suppliesReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  days: daysReducer,\n  gameState: gameStateReducer,\n  storeState: storeReducer,\n  suppliers: suppliersReducer,\n  supplies: suppliesReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// This is a comment made to test the build pipeline to the backend.\n// and this should test the pipeline to heroku.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}