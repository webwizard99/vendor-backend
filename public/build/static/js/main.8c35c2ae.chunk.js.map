{"version":3,"sources":["Utilities/itemTypes.js","Utilities/potionTypes.js","game_modules/items.js","game_modules/storeInventory.js","Components/StoreInventory/StoreInventory.jsx","actions/types.js","game_modules/store.js","game_modules/days.js","game_modules/supplies.js","game_modules/suppliers.js","actions/index.js","Components/Store/Store.jsx","Components/Supplier/Supplier.jsx","Components/Suppliers/Suppliers.jsx","Components/Days/Days.jsx","Components/Details/Details.jsx","Containers/GameScreen/GameScreen.jsx","Components/Title/Title.jsx","game_modules/main.js","Containers/StartScreen/StartScreen.jsx","Components/MenuBar/MenuBar.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/suppliersReducer.js","reducers/suppliesReducer.js","reducers/index.js","reducers/authReducer.js","serviceWorker.js","index.js"],"names":["itemTypes","potion","weapon","armor","potionTypes","items","ItemTypes","PotionTypes","allItems","lastIndex","Item","payload","type","name","value","this","id","Potion","level","Weapon","damage","Armor","createItem","itemPayload","newItem","newPotionType","console","log","newPotionLevel","potionPayload","newWeaponDamage","newWeaponLevel","weaponPayload","newArmorArmor","newArmorLevel","armorPayload","push","getItem","thisItem","find","item","createTestPotion","lvl","healing","getItemTypes","storeInventory","inventory","currentIdIndex","addItem","addPotion","Items","newPotion","addTestPotion","testPotion","getStoreInventory","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","length","map","className","key","React","Component","connect","state","storeState","dispatch","store","gold","getName","setName","newName","getStartingGold","getGold","setGold","newGold","days","day","getDay","setDay","newDay","resetDay","supplies","filledSupplies","fetchItemArrForSupply","a","Object","values","typeIndex","Math","floor","random","typeToFetch","maxLvl","fetchURL","fetch","possibleItems","json","getItemForSupply","then","itemsOfLevel","Array","isArray","randomChoice","itemId","dispatchReady","catch","err","getSupplies","fillSupplies","depleteSupply","supplyIndex","indexOf","splice","suppliers","Supplier","offerings","prototype","rankFavorites","bestOfferings","offeringsCount","i","sort","off1","off2","markup","rankedOfferings","dispatchSuppliers","newSuppliers","fetchSuppliers","initSuppliers","getSuppliers","initializeSuppliers","maxSuppliers","next","drainSuppliers","pushIndex","newSupplier","supplierPayload","thisSupplier","forEach","supplier","takeSupplierTurn","remainingSupplies","supplyTypes","remainingSupply","supplyItem","currentSupplier","supplierCount","remSupply","remNum","supplierTries","thisIndex","taken","supplierIndex","favorites","thisSupply","takeSupplies","dispatchSupplyReady","fetchUser","axios","get","res","data","fetchGold","gameStore","amount","fetchDay","Store","componentDidMount","storeName","role","aria-label","setStoreGold","getSuppllierInventory","initialized","thisInventory","inventoryItem","inventoryGroups","valueGroups","typeGroups","composedItems","entries","count","findIndex","offering","composedValue","supplyReady","ready","Suppliers","suppliersInitialized","componentDidUpdate","gameSupplier","setState","currentSuppliers","suppliersDisplay","renderSupplier","Days","handleNextDay","currentDay","onClick","Details","GameScreen","Title","main","init","startingGold","x","createTestPotions","StartScreen","handleStart","handleNameInput","game","setStarted","e","charCode","htmlFor","onChange","val","setStoreName","target","onKeyPress","started","gameState","MenuBar","renderLogin","renderEditorLink","auth","href","App","getMainView","actions","initialState","storeUpdate","refreshing","refreshed","combineReducers","action","updates","number","Boolean","window","location","hostname","match","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"wtBAMeA,G,8BANG,CAChBC,OAAQ,SACRC,OAAQ,SACRC,MAAO,UCCMC,EAJK,CAClB,WCuHaC,EArHA,WACb,IAAML,EAAYM,EACZF,EAAcG,EAEhBC,EAAW,GACXC,EAAY,EAEVC,EAAO,SAASC,GAAU,IACtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACpBC,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,MAAQA,EACbC,KAAKC,GAAKP,EACVA,KAGIQ,EAAS,SAASN,GAAU,IACxBC,EAAgBD,EAAhBC,KAAMM,EAAUP,EAAVO,MACdH,KAAKH,KAAOA,EACZG,KAAKG,MAAQA,GAGTC,EAAS,SAASR,GAAU,IACxBS,EAAkBT,EAAlBS,OAAQF,EAAUP,EAAVO,MAChBH,KAAKK,OAASA,EACdL,KAAKG,MAAQA,GAGTG,EAAQ,SAASV,GAAU,IACvBR,EAAiBQ,EAAjBR,MAAOe,EAAUP,EAAVO,MACfH,KAAKZ,MAAQA,EACbY,KAAKG,MAAQA,GAGf,MAAO,CACLI,WAAY,SAASX,GAAU,IACvBC,EAAmCD,EAAnCC,KAAMC,EAA6BF,EAA7BE,KAAMC,EAAuBH,EAAvBG,MAAOS,EAAgBZ,EAAhBY,YACzB,GAAKvB,EAAUY,GAAf,CAKA,IACMY,EAAU,IAAId,EADD,CAAEE,KAAMA,EAAOC,KAAMA,EAAOC,MAAOA,IAGtD,OAAQU,EAAQZ,MACd,KAAKZ,EAAUC,OACb,IAAMwB,EAAgBF,EAAYX,KAClC,IAAKa,EAEH,YADAC,QAAQC,IAAI,2CAGd,IAAMC,EAAiBL,EAAYL,MACnC,IAAKU,EAEH,YADAF,QAAQC,IAAI,sDAGd,IAAME,EAAgB,CAAEjB,KAAMa,EAAeP,MAAOU,GACpDJ,EAAQA,EAAQZ,MAAQ,IAAIK,EAAOY,GACnC,MACF,KAAK7B,EAAUE,OACb,IAAM4B,EAAkBP,EAAYH,OACpC,IAAKU,EAEH,YADAJ,QAAQC,IAAI,+CAGd,IAAMI,EAAiBR,EAAYL,MACnC,IAAKa,EAEH,YADAL,QAAQC,IAAI,sDAGd,IAAMK,EAAgB,CAAEZ,OAAQU,EAAiBZ,MAAOa,GACxDP,EAAQA,EAAQZ,MAAQ,IAAIO,EAAOa,GACnC,MACF,KAAKhC,EAAUG,MACb,IAAM8B,EAAgBV,EAAYpB,MAClC,IAAK8B,EAEH,YADAP,QAAQC,IAAI,wDAGd,IAAMO,EAAgBX,EAAYL,MAClC,IAAKgB,EAEH,YADAR,QAAQC,IAAI,uDAGd,IAAMQ,EAAe,CAAEhC,MAAO8B,EAAef,MAAOgB,GACpDV,EAAQA,EAAQZ,MAAQ,IAAIS,EAAMc,GAOtC,OADA3B,EAAS4B,KAAKZ,GACPA,EAAQR,GAvDbU,QAAQC,IAAI,mDA0DhBU,QA9DK,SA8DGrB,GACN,IAAIsB,EAAW9B,EAAS+B,MAAK,SAAAC,GAAI,OAAIA,EAAKxB,KAAOA,KACjD,GAAIsB,EACF,OAAOA,EAEPZ,QAAQC,IAAI,wCAIhBc,iBAAkB,SAASC,GACzB,IAAMlB,EAAU,IAAId,EAAK,CAAEE,KAAMZ,EAAUC,OAAQY,KAAM,iBAAkBC,MAAO,KAElF,OADAU,EAAQxB,EAAUC,QAAU,IAAIgB,EAAO,CAAEL,KAAMR,EAAYuC,QAASzB,MAAOwB,IACpElB,GAGToB,aAAc,WACZ,OAAO5C,IAhHE,GC8BA6C,EA9BS,WACtB,IAAIC,EAAY,GAEZC,EAAiB,EAEfC,EAAU,SAASxB,GACvBA,EAAQR,GAAK+B,EACbA,IACAD,EAAUV,KAAKZ,IAIjB,MAAO,CACLyB,UAAW,SAASpC,EAAMC,EAAOH,GAC/B,IAAMX,EAAYkD,EAAMN,eAClBO,EAAYD,EAAM5B,WAAWtB,EAAUC,OAAQY,EAAMC,EAAOH,GAClEqC,EAAQG,IAGVC,cAAe,WACb,IAAMC,EAAaH,EAAMT,mBACzBO,EAAQK,IAGVC,kBAAmB,WACjB,OAAOR,IAzBW,GCKlBS,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAHR,E,gEAOjB,IAAMC,EAAeC,KAAKC,MAAMD,KAAKE,UAAUjB,EAAeS,sBAC9DvC,KAAKyC,MAAMO,aAAaJ,K,0CAIxB,OAAI5C,KAAKyC,MAAMV,WAAa/B,KAAKyC,MAAMV,UAAUkB,OAAS,EAEtD,6BAAMjD,KAAKyC,MAAMV,UAAUmB,KAAI,SAAAzB,GAC7B,OACE,yBAAK0B,UAAU,+BAA+BC,IAAK3B,EAAKxB,IACtD,0BAAMkD,UAAU,qBAAqB1B,EAAK3B,MAC1C,yBAAKqD,UAAU,kBACb,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,sBAAsB1B,EAAK1B,aASnD,+C,+BAMJ,OACE,yBAAKoD,UAAU,kBACZnD,KAAK0C,yB,GAtCeW,IAAMC,WAwDpBC,eAZS,SAAAC,GACtB,MAAO,CACLzB,UAAWyB,EAAMC,WAAW1B,cAIL,SAAA2B,GACzB,MAAO,CACLV,aAAc,SAACJ,GAAD,OAAkBc,EAAS,CAAE7D,KCtDZ,sBDsDuCkC,UAAWa,QAItEW,CAA6Cf,G,yCEnC7CmB,EA7BA,WACb,IAAI7D,EAAO,GAGP8D,EADiB,IAGrB,MAAO,CACLC,QAAS,WACP,OAAO/D,GAGTgE,QAAS,SAASC,GAChBjE,EAAOiE,GAGTC,gBAAiB,WACf,OAbiB,KAgBnBC,QAAS,WACP,OAAOL,GAGTM,QAAS,SAASC,GAChBP,EAAOO,IAxBE,GCuBAC,EAvBD,WACZ,IACIC,EADa,EAGjB,MAAO,CACLC,OAAQ,WACN,OAAOD,GAGTE,OAAQ,SAASC,GACO,kBAAXA,EAIXH,EAAMG,EAHJ7D,QAAQC,IAAI,6CAMhB6D,SAAU,WACRJ,EAjBa,IADL,G,QC0HCK,EAnHG,WAChB,IAAIA,EAAW,GAEXC,EAAiB,EAcfC,EAAqB,uCAAG,WAAejD,GAAf,yBAAAkD,EAAA,yDACvBlD,EADuB,wDAIxB1C,EAAY6F,OAAOC,OAAOxF,GAC1ByF,EAAYC,KAAKC,MAAMD,KAAKE,SAAWlG,EAAUgE,QAGjC,WAFhBmC,EAAcnG,EAAU+F,MAG1BI,GAAe,KAGF,EACTC,EAAS1D,EAET2D,EAfsB,WAePF,EAfO,qCAYb,EAZa,sBAeqDC,GAfrD,mBAmBJE,MAAMD,GAnBF,QAmB1BE,EAnB0B,yDAqB1B7E,QAAQC,IAAR,MArB0B,eAwBxB4E,IACFA,EAAgBA,EAAcC,QAzBJ,kBA4BrBD,GA5BqB,0DAAH,sDAiCrBE,EAAmB,SAAnBA,EAA4B/D,GAIhC,IAAIlB,EAHAkE,GA7CgB,IAiDpBC,EAAsBjD,GACnBgE,MAAK,SAAAC,GACJ,GAAIC,MAAMC,QAAQF,GAAe,CAC/B,IAAIG,EAAed,KAAKC,MAAMD,KAAKE,SAAWS,EAAa3C,QAC3DxC,EAAUmF,EAAaG,GAIzB,IAAIvF,EAAc,GAElB,OADAA,EAAYL,MAAQM,EAAQN,MACrBM,EAAQgB,KAAK5B,MAClB,KAAKN,EAAUL,OACbsB,EAAYX,KAAOY,EAAQZ,KAC3B,MACF,KAAKN,EAAUJ,OACbqB,EAAYH,OAASI,EAAQJ,OAC7B,MACF,KAAKd,EAAUH,MACboB,EAAYpB,MAAQqB,EAAQrB,MAKhC,IAAIQ,EAAU,GACdA,EAAQY,YAAcA,EACtBZ,EAAQC,KAAOY,EAAQgB,KAAK5B,KAC5BD,EAAQE,KAAOW,EAAQgB,KAAK3B,KAC5BF,EAAQG,MAAQU,EAAQgB,KAAK1B,MAG7B,IAAIiG,EAAS7D,EAAM5B,WAAWX,GAS9B,OAPA8E,EAASrD,KAAK2E,GAjFE,OAmFhBrB,GAjFgB,SAAS5E,GAC7B,IAAMH,EAAU,CACdC,KHR0B,mBGS1BE,MAAOA,GAET4D,GAAMD,SAAS9D,GA8ETqG,EAAc,GAEhBP,EAAiB/D,IACV,KACNuE,OAAM,SAAAC,GAAG,OAAIxF,QAAQC,IAAIuF,OAGhC,MAAO,CACLC,YAAa,WACX,OAAO1B,GAET2B,aAAc,SAAS1E,GACrB+D,EAAiB/D,IAEnB2E,cAAe,SAASrG,GACtB,IAAIsG,EAAc7B,EAAS8B,QAAQvG,GACnC,GAAIsG,GAAe,EAEjB,OADmB7B,EAAS+B,OAAOF,EAAa,KA5GtC,GCqJHG,EApJI,WAEjB,IAAIA,EAAY,GAEVC,EAAW,SAAS/G,GAAU,IAC1BE,EAAoBF,EAApBE,KAAM8G,EAAchH,EAAdgH,UACd5G,KAAKF,KAAOA,EACZE,KAAK4G,UAAYA,EACjB5G,KAAK+B,UAAY,IAGnB4E,EAASE,UAAUC,cAAgB,WAGjC,IAFA,IAAIC,EAAgB,GACdC,EAAiBhH,KAAK4G,UAAU3D,OAC7BgE,EAAI,EAAGA,EAAID,EAAgBC,IAClCF,EAAc1F,KAAKrB,KAAK4G,UAAUK,IAEpCF,EAAcG,MAAK,SAACC,EAAMC,GACxB,OAAOD,EAAKE,OAASD,EAAKC,UAE5BrH,KAAKsH,gBAAkBP,GAGzB,IAAMQ,EAAoB,SAASC,GACjC,IAAM5H,EAAU,CACdC,KJzBuB,gBI0BvBD,QAAS4H,GAEX7D,GAAMD,SAAS9D,IAWX6H,EAAc,uCAAG,4BAAA5C,EAAA,+EAGKU,MAAM,cAHX,OAGjBmC,EAHiB,sDAKjB/G,QAAQC,IAAR,MALiB,cAOf8G,IACFA,EAAgBA,EAAcjC,QARb,kBAUZiC,GAVY,yDAAH,qDAadC,EAAY,UAAG,SAAfA,IAAe,iEACnB,OADmB,SACbF,IADa,oCAAfE,MAgEN,MAAO,CACLC,oBAAoB,WAAD,4BAAE,WAAeC,GAAf,SAAAhD,EAAA,sDACG8C,IACRG,OAAO/H,MAClB4F,MAAK,SAAA+B,GACJ,GAAIA,EAAe,CAEjB,IADA,IAAIK,EAAiBL,EACdhB,EAAUzD,OAAS4E,GAAgBE,EAAe9E,OAAS,GAAG,CACnE,IAAM+E,EAAY/C,KAAKC,MAAMD,KAAKE,SAAW4C,EAAe9E,QACxDgF,EAAcF,EAAetB,OAAOuB,EAAW,GAE7CE,EAAkB,CAAEpI,MAD1BmI,EAAcA,EAAY,IACkBnI,KAAM8G,UAAWqB,EAAYrB,WACrEuB,EAAe,IAAIxB,EAASuB,GAChCxB,EAAUrF,KAAK8G,GAIjB,OAFAzB,EAAU0B,SAAQ,SAAAC,GAAQ,OAAIA,EAASvB,mBACvCS,EAAkBb,GACXA,MAhBM,2CAAF,mDAAC,GAoBpBiB,aAAc,WACZ,OAAOjB,GAET4B,iBAAkB,YApFC,WAEnB,IAAMC,EAAoB1F,KAAKC,MAAMD,KAAKE,UAAU2B,EAAS0B,gBACzDoC,EAAc,GAClBD,EAAkBH,SAAQ,SAAAK,GACxB,IAAMC,EAAapJ,EAAMgC,QAAQmH,GACjCD,EAAYnH,KAAKqH,EAAW7I,SAE9B,IAAI8I,EAAkB,EAChBC,EAAgBlC,EAAUzD,OAEhCsF,EAAkBH,SAAQ,SAACS,EAAWC,GAKpC,IADA,IAAIC,EAAgB,GACX9B,EAAI,EAAGA,EAAI2B,EAAe3B,IAAK,CACtC,IAAI+B,EAAYL,EAAkB1B,EAC9B+B,GAAaJ,IACfI,GAAaJ,GAEfG,EAAc1H,KAAK2H,GAErB,IAAIC,GAAQ,EAIZF,EAAcX,SAAQ,SAAAc,GACpB,IADqC,EACjCC,EAAYzC,EAAUwC,GAAe5B,gBADJ,cAEpB6B,GAFoB,IAErC,2BAA4B,CAE1B,GAF0B,QAEjBtJ,OAAS2I,EAAYM,KACvBG,EAAO,CAEiC,OAAvCvC,EAAUwC,GAAenH,YAC3B2E,EAAUwC,GAAenH,UAAY,IAIvC,IAAIqH,EAAa1E,EAAS4B,cAAcuC,GACxClI,QAAQC,IAAIwI,GACRvD,MAAMC,QAAQsD,KAChBA,EAAaA,EAAW,IAG1B1C,EAAUwC,GAAenH,UAAUV,KAAK+H,GAGxCH,GAAQ,GACRN,EAAkBO,EAAgB,GACZN,IACpBD,EAAkB,KAxBW,qCA0DvCU,GACA9B,EAAkBb,GA/GM,SAAS3G,GACnC,IAAMH,EAAU,CACdC,KJhC0B,mBIiC1BE,MAAOA,GAET4D,GAAMD,SAAS9D,GA2Gb0J,EAAoB,KA/IP,GCANC,EAAY,yDAAM,WAAM7F,GAAN,eAAAmB,EAAA,sEACX2E,IAAMC,IAAI,qBADC,OACvBC,EADuB,OAE7BhG,EAAS,CAAE7D,KLHa,aKGKD,QAAS8J,EAAIC,OAFb,2CAAN,uDAKZC,EAAY,yDAAM,WAAMlG,GAAN,eAAAmB,EAAA,sEACVgF,EAAU5F,UADA,OACvBL,EADuB,OAE7BF,EAAS,CAAE7D,KLZiB,iBKYKiK,OAAQlG,IAFZ,2CAAN,uDAKZmG,EAAW,yDAAM,WAAMrG,GAAN,eAAAmB,EAAA,sEACVT,EAAKE,SADK,OACtBD,EADsB,OAE5BX,EAAS,CAAE7D,KLpBU,UKoBKwE,IAAKA,IAFH,2CAAN,uDAKXoD,EAAiB,yDAAM,WAAM/D,GAAN,eAAAmB,EAAA,sEACP6B,EAAUiB,eADH,OAC5BH,EAD4B,OAElC9D,EAAS,CAAE7D,KLjBgB,gBKiBKD,QAAS4H,IAFP,2CAAN,uDCZxBwC,E,kDACJ,WAAYvH,GAAQ,IAAD,8BACjB,cAAMA,IAEDwH,kBAAoB,EAAKA,kBAAkBtH,KAAvB,gBAHR,E,gEAWjB3C,KAAKyC,MAAMmH,c,+BAIX,OACE,yBAAKzG,UAAU,SACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,aAAanD,KAAKyC,MAAMyH,WACtC,0BAAM/G,UAAU,UAAUgH,KAAK,MAAMC,aAAW,WAAhD,iBACA,yBAAKjH,UAAU,eACb,0BAAMA,UAAU,aAAagH,KAAK,MAAMC,aAAW,QAAnD,WACCpK,KAAKyC,MAAMmB,OAGhB,kBAAC,EAAD,W,GA1BYP,IAAMC,WAgDXC,eAfS,SAAAC,GACtB,MAAO,CACL0G,UAAW1G,EAAMC,WAAW3D,KAC5B8D,KAAMJ,EAAMC,WAAWG,SAKA,SAAAF,GACzB,MAAO,CACL2G,aAAc,SAAClG,GAAD,OAAaT,EAAS,CAAE7D,KNnDZ,iBMmDkCiK,OAAQ3F,KACpEyF,UAAW,kBAAMlG,EAASkG,SAIfrG,CAA6CyG,G,gBCnDtDrD,G,wDACJ,WAAYlE,GAAQ,IAAD,8BACjB,cAAMA,IAED6H,sBAAwB,EAAKA,sBAAsB3H,KAA3B,gBAHZ,E,oEAKM,IAAD,OAEtB,GADAhC,QAAQC,IAAIZ,KAAKyC,MAAM4F,SAAStG,YAC3B/B,KAAKyC,MAAM8H,YACd,MAAO,GAET,IAAIC,EAAgB,GACpBxK,KAAKyC,MAAM4F,SAAStG,UAAUqG,SAAQ,SAAAnI,GACpC,IAAIwK,EAAgBtI,EAAMb,QAAQrB,GAClCuK,EAAcnJ,KAAKoJ,MAGrB,IAAIC,EAAkB,GAClBC,EAAc,GACdC,EAAa,GAEjBJ,EAAcpC,SAAQ,SAAA3G,GACfiJ,EAAgBjJ,EAAK3B,MAKxB4K,EAAgBjJ,EAAK3B,OAAS,GAJ9B4K,EAAgBjJ,EAAK3B,MAAQ,EAC7B6K,EAAYlJ,EAAK3B,MAAQ2B,EAAK1B,MAC9B6K,EAAWnJ,EAAK3B,MAAQ2B,EAAK5B,SAQjC,IAFA,IAAIgL,EAAgB,GAEpB,MAA2B/F,OAAOgG,QAAQJ,GAA1C,eAA4D,CAAC,IAAD,sBAAhDtH,EAAgD,KACtD3B,EAAO,CAAE3B,KAAMsD,EAAK2H,MADkC,KACpBlL,KAAM+K,EAAWxH,GAAMrD,MAAO4K,EAAYvH,IAChFyH,EAAcxJ,KAAKI,GAIrB,OADAd,QAAQC,IAAIiK,GACLA,EAAc3H,KAAI,SAAAzB,GACvB,IAAMmF,EAAY,EAAKnE,MAAM4F,SAASzB,UAChC5B,EAAY4B,EAAUoE,WAAU,SAAAC,GAAQ,OAAIA,EAASpL,OAAS4B,EAAK5B,QAErEqL,EAAgBzJ,EAAK1B,MAKzB,OAJmB,IAAfiF,IACFkG,GAAiC,EAAKtE,EAAU5B,GAAWqC,OAAS,KAIpE,yBAAKlE,UAAU,uCAAuCC,IAAK3B,EAAKxB,IAC9D,0BAAMkD,UAAU,6BAA6B1B,EAAK3B,MAClD,0BAAMqD,UAAU,aAAhB,KAA+B1B,EAAKsJ,OACpC,yBAAK5H,UAAU,2BACb,0BAAMA,UAAU,cAAhB,WACA,0BAAMA,UAAU,sBAAsB+H,U,+BAO9C,OACE,yBAAK/H,UAAU,YACb,yBAAKA,UAAU,gBACZnD,KAAKyC,MAAM4F,SAASvI,MAEvB,yBAAKqD,UAAU,qBACZnD,KAAKsK,8B,GAnEOjH,IAAMC,YAgFdC,eANS,SAAAC,GACtB,MAAO,CACL2H,YAAa3H,EAAMkB,SAAS0G,SAIjB7H,CAAyBoD,GC9ElC0E,E,kDACJ,WAAY5I,GAAQ,IAAD,8BACjB,cAAMA,IAEDe,MAAQ,CACX8H,sBAAsB,GAGxB,EAAK3D,aAAe,EAAKA,aAAahF,KAAlB,gBACpB,EAAK4I,mBAAqB,EAAKA,mBAAmB5I,KAAxB,gBART,E,iEAYbkD,MAAMC,QAAQ9F,KAAKyC,MAAMiE,YAAc1G,KAAKyC,MAAM0I,cAC/CnL,KAAKwD,MAAM8H,uBACdE,EAAalD,mBACbtI,KAAKyL,SAAS,CACZH,sBAAsB,Q,qCAMd,IAAD,OACTI,EAAmB1L,KAAKyC,MAAMiE,UAClC,GAAIb,MAAMC,QAAQ4F,GAAmB,CACnC/K,QAAQC,IAAI8K,GACZ,IAAMC,EAAmBD,EAAiBxI,KAAI,SAAA0I,GAC5C,OAAQ,kBAAC,EAAD,CAAUvD,SAAUuD,EAAgBrB,YAAa,EAAK/G,MAAM8H,0BAGtE,OACE,yBAAKnI,UAAU,sBACZwI,GAIL,MAAO,2B,+BAMT,OACE,yBAAKxI,UAAU,aACZnD,KAAK2H,oB,GA7CUtE,IAAMC,WA0DfC,eAPS,SAAAC,GACtB,MAAO,CACLkD,UAAWlD,EAAMkD,UAAUA,UAC3ByE,YAAa3H,EAAMkB,SAAS0G,SAIjB7H,CAAyB8H,GC1DlCQ,G,wDAEJ,WAAYpJ,GAAQ,IAAD,8BACjB,cAAMA,IAEDqJ,cAAgB,EAAKA,cAAcnJ,KAAnB,gBACrB,EAAKsH,kBAAoB,EAAKA,kBAAkBtH,KAAvB,gBAJR,E,gEAQjB3C,KAAKyC,MAAMsH,a,sCAIX,IAAMgC,EAAa/L,KAAKyC,MAAM4B,IAE9BD,EAAKG,OAAOwH,EAAa,GAEzB/L,KAAKyC,MAAMsH,a,+BAIX,OACE,yBAAK5G,UAAU,QACb,0BAAMA,UAAU,YAAhB,QAAiCnD,KAAKyC,MAAM4B,KAC5C,4BAAQlB,UAAU,UAAU6I,QAAShM,KAAK8L,eAA1C,mB,GAzBWzI,IAAMC,YA4CVC,eAZS,SAAAC,GACtB,MAAO,CACLa,IAAKb,EAAMY,KAAKC,QAIO,SAAAX,GACzB,MAAO,CACLqG,SAAU,kBAAMrG,EAASqG,SAIdxG,CAA6CsI,GCzC7CI,G,6KARX,OACE,yBAAK9I,UAAU,WAAf,e,GAHgBE,IAAMC,YCQtB4I,E,uKAEF,OACE,yBAAK/I,UAAU,6BACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GATiBE,IAAMC,WAsBhBC,eANS,SAAAC,GACtB,MAAO,CACL0G,UAAW1G,EAAMC,WAAW3D,QAIjByD,CAAyB2I,GCtBzBC,G,mLANX,OACE,yBAAKhJ,UAAU,SAAf,c,GAHcE,IAAMC,YC4CX8I,EAzBN,CACLC,KAAM,SAASzM,GAEbwE,EAAKG,OAAO,GAGP3E,EAAQE,MACXa,QAAQC,IAAI,0EAEdiJ,EAAU/F,QAAQlE,EAAQE,MAE1B,IAAMwM,EAAezC,EAAU7F,kBAC/B6F,EAAU3F,QAAQoI,GAnBI,WACxB,IAAK,IAAIC,EAAI,EAAGA,EALM,EAKeA,IACnCzK,EAAeO,gBAmBfmK,GAEA9H,EAAS2B,aAzBS,GA0BlB1F,QAAQC,IAAI8D,EAAS0B,eACrBM,EAAUkB,oBA5BO,KCDjB6E,E,kDACJ,WAAYhK,GAAQ,IAAD,8BACjB,cAAMA,IAEDiK,YAAc,EAAKA,YAAY/J,KAAjB,gBACnB,EAAKgK,gBAAkB,EAAKA,gBAAgBhK,KAArB,gBAJN,E,0DAQjB,IAAMoB,EAAU/D,KAAKyC,MAAM3C,KACtBiE,GAAuB,KAAZA,IAGhB6I,EAAKP,KAAK,CAAEvM,KAAMiE,IAClB/D,KAAKyC,MAAMoK,YAAW,M,sCAGRC,GACK,KAAfA,EAAEC,UACJ/M,KAAK0M,gB,+BAIC,IAAD,OACP,OACE,yBAAKvJ,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBACb,2BAAO6J,QAAQ,OAAO7J,UAAU,aAAhC,UACA,2BAAOlD,GAAG,OACRF,MAAOC,KAAKyC,MAAM3C,KAClBD,KAAK,OACLoN,SAAU,SAACC,GAAD,OAAS,EAAKzK,MAAM0K,aAAaD,EAAIE,OAAOrN,QACtDsN,WAAYrN,KAAK2M,mBAGrB,4BAAQX,QAAShM,KAAK0M,YACpBvJ,UAAU,eADZ,gB,GArCgBE,IAAMC,WA8DjBC,eAdS,SAAAC,GACtB,MAAO,CACL8J,QAAS9J,EAAM+J,UAAUD,QACzBxN,KAAM0D,EAAMC,WAAW3D,SAIA,SAAA4D,GACzB,MAAO,CACLyJ,aAAc,SAACrN,GAAD,OAAU4D,EAAS,CAAE7D,KdlET,iBckE+BC,KAAMA,KAC/D+M,WAAY,SAAC9M,GAAD,OAAW2D,EAAS,CAAE7D,KdpER,iBcoE8BE,MAAOA,QAIpDwD,CAA6CkJ,GCrEtDe,G,wDACJ,WAAY/K,GAAQ,IAAD,8BACjB,cAAMA,IAEDgL,YAAc,EAAKA,YAAY9K,KAAjB,gBACnB,EAAK+K,iBAAmB,EAAKA,iBAAiB/K,KAAtB,gBAJP,E,0DASjB,OAAO3C,KAAKyC,MAAMkL,MAChB,KAAK,KACH,OACF,KAAK,EACH,OACE,wBAAIvK,IAAI,SAAQ,uBAAGwK,KAAK,kBAAR,wBAEpB,QACE,OACE,wBAAIxK,IAAI,SAAQ,uBAAGwK,KAAK,eAAR,c,yCAMtB,OAAO5N,KAAKyC,MAAMkL,MAChB,KAAK,KAEL,KAAK,EACH,OAAO,EACT,QAEE,MAAiB,UADA3N,KAAKyC,MAAMkL,KAAK9N,MAG7B,wBAAIuD,IAAI,cAAa,uBAAGD,UAAU,aAAayK,KAAK,WAA/B,c,+BAU7B,OACE,yBAAKzK,UAAU,WACb,0BAAMA,UAAU,aAAY,uBAAGyK,KAAK,KAAR,WAC5B,wBAAIzK,UAAU,kBACXnD,KAAK0N,mBACL1N,KAAKyN,oB,GAjDMpK,IAAMC,YA8DbC,eANS,SAAAC,GACtB,MAAO,CACLmK,KAAMnK,EAAMmK,QAIDpK,CAAyBiK,GCtDlCK,G,kDACJ,WAAYpL,GAAQ,IAAD,8BACjB,cAAMA,IAEDqL,YAAc,EAAKA,YAAYnL,KAAjB,gBACnB,EAAKsH,kBAAoB,EAAKA,kBAAkBtH,KAAvB,gBAJR,E,gEAQjB3C,KAAKyC,MAAM8G,c,oCAKX,OADkBvJ,KAAKyC,MAAM6K,QAOzB,kBAAC,EAAD,MAJA,kBAAC,EAAD,Q,+BAUJ,OACE,yBAAKnK,UAAU,OACb,kBAAC,EAAD,MACCnD,KAAK8N,mB,GA7BIzK,IAAMC,WAyCTC,gBANS,SAAAC,GACtB,MAAO,CACL8J,QAAS9J,EAAM+J,UAAUD,WAIWS,EAAzBxK,CAAkCsK,I,QCnD3CG,GAAe,CACnB3J,IAAK,GCED2J,GAAe,CACnBV,SAAS,EACTW,aAAa,GCHTD,GAAe,CACnBlO,KAAM,GACN8D,KAAM,EACNsK,YAAY,EACZC,WAAW,EACXpM,UAAW,ICPPiM,GAAe,CACnBtH,UAAW,KACXqE,MAAO,GCFHiD,GAAe,CACnB5C,OAAO,GCKMgD,eAAgB,CAC7BT,KCPa,WAAgC,IAAvBnK,EAAsB,uDAAd,KAAM6K,EAAQ,uCAC5C,OAAOA,EAAOxO,MACZ,IvBGsB,auBFpB,OAAOwO,EAAOzO,UAAW,EAC3B,QACE,OAAO4D,IDGXY,KLJa,WAAwC,IAA/BZ,EAA8B,uDAAtBwK,GAAcK,EAAQ,uCACpD,OAAQA,EAAOxO,MACb,IjBRmB,UiBSjB,OAAO,6BACF2D,GADL,IAEEa,IAAKgK,EAAOhK,MAEhB,QACE,OAAOb,IKHX+J,UJDa,WAAwC,IAA/B/J,EAA8B,uDAAtBwK,GAAcK,EAAQ,uCACpD,OAAQA,EAAOxO,MACb,IlBX0B,iBkBYxB,OAAO,6BACF2D,GADL,IAEE8J,QAASe,EAAOtO,QAEpB,IlBbuB,ckBcrB,IAAMuO,EAAUD,EAAOzO,QACfqO,EAAgBK,EAAhBL,YACR,OAAO,6BACFzK,GADL,IAEEyK,YAAaA,IAEjB,IlBnB4B,mBkBoB1B,OAAO,6BACFzK,GADL,IAEEyK,YAAaI,EAAOtO,QAExB,QACE,OAAOyD,IIlBXC,WHAa,WAAwC,IAA/BD,EAA8B,uDAAtBwK,GAAcK,EAAQ,uCACpD,OAAQA,EAAOxO,MACb,InBZ0B,iBmBaxB,OAAO,6BACF2D,GADL,IAEE1D,KAAMuO,EAAOvO,OAEjB,InBhB0B,iBmBiBxB,OAAO,6BACF0D,GADL,IAEEI,KAAMyK,EAAOvE,SAEjB,InBlB+B,sBmBmB7B,IAAMlH,EAAeyL,EAAOtM,UAC5B,OAAO,6BACFyB,GADL,IAEEzB,UAAWa,IAEf,QACE,OAAOY,IGlBXkD,UFNa,WAAwC,IAA/BlD,EAA8B,uDAAtBwK,GAAcK,EAAQ,uCACpD,OAAQA,EAAOxO,MACb,IpBDyB,gBoBEvB,IAAI0O,EAAS,EAIb,OAHI1I,MAAMC,QAAQuI,EAAOzO,WACvB2O,EAASF,EAAOzO,QAAQqD,QAEnB,6BACAO,GADP,IAEIkD,UAAW2H,EAAOzO,QAClBmL,MAAOwD,IAEb,QACE,OAAO/K,IENXkB,SDRa,WAAwC,IAA/BlB,EAA8B,uDAAtBwK,GAAcK,EAAQ,uCACpD,OAAQA,EAAOxO,MACb,IrBC4B,mBqBA1B,OAAO,6BACF2D,GADL,IAEE4H,MAAOiD,EAAOtO,QAElB,QACE,OAAOyD,MGFOgL,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRC,IAAMjL,GAAQkL,YAAYC,GAAU,GAAIC,YAAgBC,MAE/DC,IAASC,OACP,kBAAC,IAAD,CAAUvL,MAAOA,IACf,kBAAC,IAAMwL,WAAP,KACE,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcnE,MACrBzF,MAAK,SAAA6J,GACJA,EAAaC,gBAEdvJ,OAAM,SAAAwJ,GACL/O,QAAQ+O,MAAMA,EAAMC,c","file":"static/js/main.8c35c2ae.chunk.js","sourcesContent":["const itemTypes = {\n  potion: 'potion',\n  weapon: 'weapon',\n  armor: 'armor'\n}\n\nexport default itemTypes;","const potionTypes = [\n  'healing'\n];\n\nexport default potionTypes;","import ItemTypes from '../Utilities/itemTypes';\nimport PotionTypes from '../Utilities/potionTypes';\n\nconst items = (function(){\n  const itemTypes = ItemTypes;\n  const potionTypes = PotionTypes;\n\n  let allItems = [];\n  let lastIndex = 0;\n  \n  const Item = function(payload) {\n    const { type, name, value } = payload;\n    this.type = type;\n    this.name = name;\n    this.value = value;\n    this.id = lastIndex;\n    lastIndex++;\n  }\n\n  const Potion = function(payload) {\n    const { type, level } = payload;\n    this.type = type;\n    this.level = level;\n  }\n\n  const Weapon = function(payload) {\n    const { damage, level } = payload;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  const Armor = function(payload) {\n    const { armor, level } = payload;\n    this.armor = armor;\n    this.level = level;\n  }\n  \n  return {\n    createItem: function(payload) {\n      let { type, name, value, itemPayload } = payload;\n      if (!itemTypes[type]) {\n        console.log('invalid item type passed to items.createItem()');\n        return;\n      }\n      \n      const newPayload = { type: type , name: name , value: value }\n      const newItem = new Item(newPayload);\n      \n      switch (newItem.type) {\n        case itemTypes.potion:\n          const newPotionType = itemPayload.type;  \n          if (!newPotionType) {\n            console.log('attempted to create invalid potion type');\n            return;\n          }\n          const newPotionLevel = itemPayload.level;\n          if (!newPotionLevel) {\n            console.log('attempted to create a potion with an invalid level');\n            return;\n          }\n          const potionPayload = { type: newPotionType, level: newPotionLevel };\n          newItem[newItem.type] = new Potion(potionPayload);\n          break;\n        case itemTypes.weapon:\n          const newWeaponDamage = itemPayload.damage;\n          if (!newWeaponDamage) {\n            console.log('attempted to create a weapon without damage');\n            return;\n          }\n          const newWeaponLevel = itemPayload.level;\n          if (!newWeaponLevel) {\n            console.log('attempted to create a weapon with an invalid level');\n            return;\n          }\n          const weaponPayload = { damage: newWeaponDamage, level: newWeaponLevel };\n          newItem[newItem.type] = new Weapon(weaponPayload);\n          break;\n        case itemTypes.armor:\n          const newArmorArmor = itemPayload.armor;\n          if (!newArmorArmor) {\n            console.log('attempted to make a new armor without an armor value');\n            return;\n          }\n          const newArmorLevel = itemPayload.level;\n          if (!newArmorLevel) {\n            console.log('attempted to make a new armor without a level value');\n            return;\n          }\n          const armorPayload = { armor: newArmorArmor, level: newArmorLevel };\n          newItem[newItem.type] = new Armor(armorPayload);\n          break;\n        default:\n          break;\n      }\n\n      allItems.push(newItem);\n      return newItem.id;\n    },\n\n    getItem(id) {\n      let thisItem = allItems.find(item => item.id === id);\n      if (thisItem) {\n        return thisItem;\n      } else {\n        console.log('attempted to retrieve invalid item.')\n      }\n    },\n\n    createTestPotion: function(lvl) {\n      const newItem = new Item({ type: itemTypes.potion, name: 'Healing Potion', value: 60});\n      newItem[itemTypes.potion] = new Potion({ type: potionTypes.healing, level: lvl});\n      return newItem;\n    },\n\n    getItemTypes: function() {\n      return itemTypes;\n    }\n  }\n}());\n\nexport default items;","import Items from './items';\n\n\nconst storeInventory = (function(){\n  let inventory = [];\n\n  let currentIdIndex = 0;\n\n  const addItem = function(newItem) {\n    newItem.id = currentIdIndex;\n    currentIdIndex++;\n    inventory.push(newItem);\n  }\n\n  \n  return {\n    addPotion: function(name, value, payload) {\n      const itemTypes = Items.getItemTypes();\n      const newPotion = Items.createItem(itemTypes.potion, name, value, payload);\n      addItem(newPotion);\n    },\n\n    addTestPotion: function() {\n      const testPotion = Items.createTestPotion();\n      addItem(testPotion);\n    },\n\n    getStoreInventory: function() {\n      return inventory;\n    }\n  }\n}());\n\nexport default storeInventory;","import React from 'react';\nimport './StoreInventory.css';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_INVENTORY } from '../../actions/types';\n\nimport storeInventory from '../../game_modules/storeInventory';\n\nclass StoreInventory extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.getInventoryItems = this.getInventoryItems.bind(this);\n  }\n\n  componentDidMount() {\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\n    this.props.setInventory(newInventory);\n  }\n\n  getInventoryItems() {\n    if (this.props.inventory && this.props.inventory.length > 0) {\n      return (\n        <div>{this.props.inventory.map(item => {\n          return (\n            <div className=\"InventoryItem itemBackground\" key={item.id}>\n              <span className=\"InventoryItemName\">{item.name}</span>\n              <div className=\"ItemValueGroup\">\n                <span className=\"CoinSymbol\">&#x2689; </span>\n                <span className=\"InventoryItemValue\">{item.value}</span>\n              </div>\n              \n            </div>\n          )\n        })}</div>\n      )     \n    } else {\n      return (\n        <div>No inventory</div>\n      )\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"StoreInventory\">\n        {this.getInventoryItems()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    inventory: state.storeState.inventory\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","export const SET_DAY = \"SET_DAY\";\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\nexport const SET_UPDATES = \"SET_UPDATES\";\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\nexport const SET_STORE_INVENTORY = 'SET_STORE_INVENTORY';\nexport const FETCH_USER = 'FETCH_USER';\nexport const SET_SUPPLIERS = 'SET_SUPPLIERS';\nexport const SET_SUPPLY_READY = 'SET_SUPPLY_READY';","const store = (function(){\n  let name = '';\n\n  const startingGold = 1000;\n  let gold = startingGold;\n  \n  return {\n    getName: function() {\n      return name;\n    },\n\n    setName: function(newName) {\n      name = newName;\n    },\n\n    getStartingGold: function() {\n      return startingGold;\n    },\n\n    getGold: function() {\n      return gold;\n    },\n\n    setGold: function(newGold) {\n      gold = newGold;\n    }\n  }\n}());\n\nexport default store;","const days = (function (){\n  const startDay = 1;\n  let day = startDay;\n\n  return {\n    getDay: function() {\n      return day;\n    },\n\n    setDay: function(newDay) {\n      if (typeof newDay !== \"number\") {\n        console.log(\"trying to set day to a non number value!\");\n        return;\n      }\n      day = newDay;\n    },\n\n    resetDay: function() {\n      day = startDay;\n    }\n  }\n}());\n\nexport default days;","import ItemTypes from '../Utilities/itemTypes';\nimport Items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLY_READY } from '../actions/types';\n\nconst supplies = (function(){\n  let supplies = [];\n\n  let filledSupplies = 0;\n  // console.log(filledSupplies);\n\n  const dailySupplies = 10;\n\n  const dispatchReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  // fetch an item from backend\n  const fetchItemArrForSupply = async function(lvl) {\n    if (!lvl) return;\n\n    // produce array of type strings and choose one at random\n    let itemTypes = Object.values(ItemTypes);\n    let typeIndex = Math.floor(Math.random() * itemTypes.length);\n    let typeToFetch = itemTypes[typeIndex];\n\n    if (typeToFetch !== 'armor') {\n      typeToFetch += 's';\n    }\n\n    const minLvl = 1;\n    const maxLvl = lvl;\n\n    const fetchURL = `/${typeToFetch}-in-level-range?min-level=${minLvl}&max-level=${maxLvl}`;\n    \n    let possibleItems;\n    try {\n      possibleItems = await fetch(fetchURL);\n    } catch (err) {\n      console.log(err);\n    }\n\n    if (possibleItems) {\n      possibleItems = possibleItems.json();\n    }\n\n    return possibleItems;\n  }\n\n  // take an item that was fetched from backend and create it\n  // with item constructors and put it into state\n  const getItemForSupply = function(lvl) {\n    if (filledSupplies >= dailySupplies) {\n      return;\n    }\n    let newItem;\n    fetchItemArrForSupply(lvl)\n      .then(itemsOfLevel => {\n        if (Array.isArray(itemsOfLevel)) {\n          let randomChoice = Math.floor(Math.random() * itemsOfLevel.length);\n          newItem = itemsOfLevel[randomChoice];\n        }\n\n        // compose payload for Item constructor\n        let itemPayload = {};\n        itemPayload.level = newItem.level;\n        switch(newItem.item.type) {\n          case ItemTypes.potion:\n            itemPayload.type = newItem.type;\n            break;\n          case ItemTypes.weapon:\n            itemPayload.damage = newItem.damage;\n            break;\n          case ItemTypes.armor:\n            itemPayload.armor = newItem.armor;\n            break;\n          default:\n            break;\n        }\n        let payload = {};\n        payload.itemPayload = itemPayload;\n        payload.type = newItem.item.type;\n        payload.name = newItem.item.name;\n        payload.value = newItem.item.value;\n\n        // create item and add to total inventory in Items module\n        let itemId = Items.createItem(payload);\n        // push item id into supplies\n        supplies.push(itemId);\n\n        filledSupplies++;\n        if (filledSupplies === dailySupplies) {\n          dispatchReady(true);\n        }\n        getItemForSupply(lvl);\n        return true;\n      }).catch(err => console.log(err));\n  }\n  \n  return {\n    getSupplies: function() {\n      return supplies;\n    },\n    fillSupplies: function(lvl) {\n      getItemForSupply(lvl); \n    },\n    depleteSupply: function(id) {\n      let supplyIndex = supplies.indexOf(id);\n      if (supplyIndex >= 0) {\n        let chosenSupply = supplies.splice(supplyIndex, 1);\n        return chosenSupply;\n      }\n    }\n  }\n}());\n\nexport default supplies;","// game imports\nimport supplies from './supplies';\nimport items from './items';\n\n// redux imports\nimport { store } from '../index';\nimport { SET_SUPPLIERS, SET_SUPPLY_READY } from '../actions/types';\n\nconst suppliers = (function(){\n\n  let suppliers = [];\n\n  const Supplier = function(payload) {\n    const { name, offerings } = payload;\n    this.name = name;\n    this.offerings = offerings;\n    this.inventory = [];\n  }\n\n  Supplier.prototype.rankFavorites = function() {\n    let bestOfferings = [];\n    const offeringsCount = this.offerings.length;\n    for (let i = 0; i < offeringsCount; i++) {\n      bestOfferings.push(this.offerings[i]);\n    }\n    bestOfferings.sort((off1, off2) => {\n      return off1.markup - off2.markup;\n    });\n    this.rankedOfferings = bestOfferings;\n  }\n\n  const dispatchSuppliers = function(newSuppliers) {\n    const payload = {\n      type: SET_SUPPLIERS,\n      payload: newSuppliers\n    }\n    store.dispatch(payload);\n  }\n\n  const dispatchSupplyReady = function(value) {\n    const payload = {\n      type: SET_SUPPLY_READY,\n      value: value\n    }\n    store.dispatch(payload);\n  }\n\n  const fetchSuppliers = async function() {\n    let initSuppliers;\n      try {\n        initSuppliers = await fetch('/suppliers');\n      } catch (err) {\n        console.log(err);\n      }\n      if (initSuppliers) {\n        initSuppliers = initSuppliers.json();\n      }\n      return initSuppliers;\n  }\n\n  const getSuppliers = function*() {\n    yield fetchSuppliers();\n  }\n\n  const takeSupplies = function() {\n    // copy supplies to local array\n    const remainingSupplies = JSON.parse(JSON.stringify(supplies.getSupplies()));\n    let supplyTypes = [];\n    remainingSupplies.forEach(remainingSupply => {\n      const supplyItem = items.getItem(remainingSupply);\n      supplyTypes.push(supplyItem.type);\n    });\n    let currentSupplier = 0;\n    const supplierCount = suppliers.length;\n    // loop through each supply item\n    remainingSupplies.forEach((remSupply, remNum) => {\n      // create an order based on last supplier to take an\n      // item and proceeded sequentially to include all\n      // suppliers\n      let supplierTries = [];\n      for (let i = 0; i < supplierCount; i++) {\n        let thisIndex = currentSupplier + i;\n        if (thisIndex >= supplierCount) {\n          thisIndex -= supplierCount;\n        }\n        supplierTries.push(thisIndex);\n      }\n      let taken = false;\n      \n      // check with each supplier if type of current supply is\n      // in their offerings\n      supplierTries.forEach(supplierIndex => {\n        let favorites = suppliers[supplierIndex].rankedOfferings;\n        for (let fave of favorites) {\n          // if type of supplier's offering equals type of this supply\n          if (fave.type === supplyTypes[remNum]) {\n            if (!taken) {\n              // if supplier inventory not initialized, set to empty array\n              if (suppliers[supplierIndex].inventory === null) {\n                suppliers[supplierIndex].inventory = [];\n              }\n\n              // remove item from supply\n              let thisSupply = supplies.depleteSupply(remSupply);\n              console.log(thisSupply);\n              if (Array.isArray(thisSupply)) {\n                thisSupply = thisSupply[0];\n              }\n              // put item in supplier's inventory\n              suppliers[supplierIndex].inventory.push(thisSupply);\n\n              // mark item taken;\n              taken = true;\n              currentSupplier = supplierIndex + 1;\n              if (currentSupplier > supplierCount) {\n                currentSupplier = 0;\n              }\n            }\n          }\n        }\n      });\n    });\n  }\n\n  return {\n    initializeSuppliers: async function(maxSuppliers) {\n      const gGetSuppliers = getSuppliers();\n      gGetSuppliers.next().value\n        .then(initSuppliers => {\n          if (initSuppliers) {\n            let drainSuppliers = initSuppliers;\n            while (suppliers.length < maxSuppliers && drainSuppliers.length > 0) {\n              const pushIndex = Math.floor(Math.random() * drainSuppliers.length);\n              let newSupplier = drainSuppliers.splice(pushIndex, 1);\n              newSupplier = newSupplier[0];\n              const supplierPayload = { name: newSupplier.name, offerings: newSupplier.offerings };\n              let thisSupplier = new Supplier(supplierPayload);\n              suppliers.push(thisSupplier);\n            }\n            suppliers.forEach(supplier => supplier.rankFavorites());\n            dispatchSuppliers(suppliers);\n            return suppliers;\n          }\n        });\n    },\n    getSuppliers: function() {\n      return suppliers;\n    },\n    takeSupplierTurn: function() {\n      takeSupplies();\n      dispatchSuppliers(suppliers);\n      dispatchSupplyReady(false);\n    }\n  }\n}());\n\nexport default suppliers;","import axios from 'axios';\nimport { FETCH_USER, SET_STORE_GOLD, SET_DAY, SET_SUPPLIERS } from './types';\n\n// game imports\nimport gameStore from '../game_modules/store';\nimport days from '../game_modules/days';\nimport suppliers from '../game_modules/suppliers';\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({ type: FETCH_USER, payload: res.data });\n};\n\nexport const fetchGold = () => async dispatch => {\n  const gold = await gameStore.getGold();\n  dispatch({ type: SET_STORE_GOLD, amount: gold });\n}\n\nexport const fetchDay = () => async dispatch => {\n  const day = await days.getDay();\n  dispatch({ type: SET_DAY, day: day });\n}\n\nexport const fetchSuppliers = () => async dispatch => {\n  const newSuppliers = await suppliers.getSuppliers();\n  dispatch({ type: SET_SUPPLIERS, payload: newSuppliers });\n}","import React from 'react';\nimport './Store.css';\n\n// import gameStore from '../../Utilities/store';\n\nimport StoreInventory from '../StoreInventory/StoreInventory';\n\nimport { SET_STORE_GOLD } from '../../actions/types';\nimport { fetchGold } from '../../actions';\nimport { connect } from 'react-redux';\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\n  \n  componentDidMount() {\n    this.props.fetchGold();\n  }  \n  \n  render() {\n    return (\n      <div className=\"Store\">\n        <div className=\"StoreMenuBar\">\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\n          <span className=\"Inspect\" role=\"img\" aria-label=\"inspect\">&#128269; </span>\n          <div className=\"GoldDisplay\">\n            <span className=\"CoinSymbol\" role=\"img\" aria-label=\"coin\">&#x2689; </span>\n            {this.props.gold}\n          </div>\n        </div>\n        <StoreInventory />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name,\n    gold: state.storeState.gold\n\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold }),\n    fetchGold: () => dispatch(fetchGold())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\nimport './Supplier.css';\n\nimport Items from '../../game_modules/items';\n\n// redux imports\nimport { connect } from 'react-redux';\n\nclass Supplier extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSuppllierInventory = this.getSuppllierInventory.bind(this);\n  }\n  getSuppllierInventory() {\n    console.log(this.props.supplier.inventory);\n    if (!this.props.initialized) {\n      return ''\n    }\n    let thisInventory = [];\n    this.props.supplier.inventory.forEach(id => {\n      let inventoryItem = Items.getItem(id);\n      thisInventory.push(inventoryItem);\n    });\n\n    let inventoryGroups = {};\n    let valueGroups = {}\n    let typeGroups = {}\n\n    thisInventory.forEach(item => {\n      if (!inventoryGroups[item.name]) {\n        inventoryGroups[item.name] = 1;\n        valueGroups[item.name] = item.value;\n        typeGroups[item.name] = item.type;\n      } else {\n        inventoryGroups[item.name] += 1;\n      }\n    });\n\n    let composedItems = []\n\n    for (const [key, value] of Object.entries(inventoryGroups)) {\n      let item = { name: key, count: value, type: typeGroups[key], value: valueGroups[key] };\n      composedItems.push(item);\n    }\n\n    console.log(composedItems);\n    return composedItems.map(item => {\n      const offerings = this.props.supplier.offerings;\n      const typeIndex = offerings.findIndex(offering => offering.type === item.type);\n      \n      let composedValue = item.value;\n      if (typeIndex !== -1) {\n        composedValue = composedValue * (1 + (offerings[typeIndex].markup / 1000));\n      }\n\n      return (\n        <div className=\"SupplierInventoryItem itemBackground\" key={item.id}>\n          <span className=\"SupplierInventoryItemName\">{item.name}</span>\n          <span className=\"ItemCount\"> X{item.count}</span>\n          <div className=\"SupplierItemsValueGroup\">  \n            <span className=\"CoinSymbol\">&#x2689; </span>\n            <span className=\"InventoryItemValue\">{composedValue}</span>\n          </div>\n        </div>\n      )\n    })\n  }\n  render() {\n    return (\n      <div className=\"Supplier\">\n        <div className=\"SupplierName\">\n          {this.props.supplier.name}\n        </div>\n        <div className=\"supplierInventory\">\n          {this.getSuppllierInventory()}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    supplyReady: state.supplies.ready\n  }\n}\n\nexport default connect(mapStateToProps)(Supplier);","import React from 'react';\nimport './Suppliers.css';\nimport Supplier from '../Supplier/Supplier';\n\n// redux imports\nimport { connect } from 'react-redux';\n\n// game imports\nimport gameSupplier from '../../game_modules/suppliers';\n\nclass Suppliers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      suppliersInitialized: false\n    }\n\n    this.getSuppliers = this.getSuppliers.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (Array.isArray(this.props.suppliers) && this.props.supplyReady) {\n      if (!this.state.suppliersInitialized) {\n        gameSupplier.takeSupplierTurn();\n        this.setState({\n          suppliersInitialized: true\n        })\n      }\n    }\n  }\n\n  getSuppliers() {\n    let currentSuppliers = this.props.suppliers;    \n    if (Array.isArray(currentSuppliers)) {\n      console.log(currentSuppliers);\n      const suppliersDisplay = currentSuppliers.map(renderSupplier => {\n        return (<Supplier supplier={renderSupplier} initialized={this.state.suppliersInitialized}/>);\n      });\n\n      return (\n        <div className=\"suppliersContainer\">\n          {suppliersDisplay}\n        </div>\n      );\n    } else {\n      return 'no suppliers to render';\n    }\n    \n  }\n  \n  render() {\n    return (\n      <div className=\"Suppliers\">\n        {this.getSuppliers()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    suppliers: state.suppliers.suppliers,\n    supplyReady: state.supplies.ready\n  }\n}\n\nexport default connect(mapStateToProps)(Suppliers);","import React from 'react';\nimport './Days.css';\n\n// import days controller from game code\nimport days from '../../game_modules/days';\n\n// import redux modules\nimport { fetchDay } from '../../actions';\nimport { connect } from 'react-redux'\n\nclass Days extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    \n    this.handleNextDay = this.handleNextDay.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchDay();\n  }\n\n  handleNextDay() {\n    const currentDay = this.props.day;\n    // set day in game\n    days.setDay(currentDay + 1);\n    // set day in redux state;\n    this.props.fetchDay();\n  }\n\n  render() {\n    return (\n      <div className=\"Days\">\n        <span className=\"DayTitle\">Day: {this.props.day}</span>\n        <button className=\"nextDay\" onClick={this.handleNextDay}\n        >Finish Day</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    day: state.days.day\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchDay: () => dispatch(fetchDay())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\nimport './Details.css';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"Details\">\n        Details\n      </div>\n    )\n  }\n}\n\nexport default Details;","import React from 'react';\nimport './GameScreen.css';\n\n// import Title from '../../Components/Title/Title';\nimport Store from '../../Components/Store/Store';\nimport Suppliers from '../../Components/Suppliers/Suppliers';\nimport Days from '../../Components/Days/Days';\nimport Details from '../../Components/Details/Details';\n\nimport { connect } from 'react-redux';\n\nclass GameScreen extends React.Component {\n  render() {\n    return (\n      <div className=\"GameScreen flex-container\">\n        <div className=\"CommerceColumn\">\n          <Days />\n          <Store />\n          <Suppliers />\n        </div>\n        <Details />\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    storeName: state.storeState.name\n  }\n}\n\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\nimport './Title.css';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"Title\">VENDOR</div>\n    )\n  }\n}\n\nexport default Title;","import days from './days';\nimport gameStore from './store';\nimport storeInventory from './storeInventory';\nimport suppliers from './suppliers';\nimport supplies from './supplies';\n\n// redux imports\n\n\nconst main = (function() {\n  \n  const testPotionCount = 5;\n  const maxSuppliers = 3;\n  let currentMaxLevel = 1;\n\n  const createTestPotions = function() {\n    for (let x = 0; x < testPotionCount; x++) {\n      storeInventory.addTestPotion();\n    }\n    \n  }\n\n  return {\n    init: function(payload) {\n      // set day to 1\n      days.setDay(1);\n      \n      // set store name\n      if (!payload.name) {\n        console.log('Game must be started with a payload object that contains a store name!');\n      }\n      gameStore.setName(payload.name);\n\n      const startingGold = gameStore.getStartingGold();\n      gameStore.setGold(startingGold);\n\n      createTestPotions();\n\n      supplies.fillSupplies(currentMaxLevel);\n      console.log(supplies.getSupplies());\n      suppliers.initializeSuppliers(maxSuppliers);\n\n    }\n\n  }\n} ());\n\nexport default main;","import React from 'react';\nimport './StartScreen.css';\n\nimport Title from '../../Components/Title/Title';\n\nimport game from '../../game_modules/main';\n\nimport { connect } from 'react-redux';\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\n\n\nclass StartScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStart = this.handleStart.bind(this);\n    this.handleNameInput = this.handleNameInput.bind(this);\n  }\n  \n  handleStart() {\n    const newName = this.props.name;\n    if (!newName || newName === '') {\n      return;\n    }\n    game.init({ name: newName });\n    this.props.setStarted(true);\n  }\n\n  handleNameInput(e) {\n    if (e.charCode === 13) {\n      this.handleStart();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"StartScreen\">\n        <Title />\n        <div className=\"NameInput\">\n          <div className=\"nameInputGroup\">\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\n            <input id=\"name\" \n              value={this.props.name}\n              type=\"text\"\n              onChange={(val) => this.props.setStoreName(val.target.value)}\n              onKeyPress={this.handleNameInput}\n            />\n          </div>\n          <button onClick={this.handleStart} \n            className=\"StartButton\">\n              Start!    \n          </button>\n        </div>\n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started,\n    name: state.storeState.name\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\nimport { connect } from 'react-redux';\nimport './MenuBar.css';\n\nclass MenuBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderLogin = this.renderLogin.bind(this);\n    this.renderEditorLink = this.renderEditorLink.bind(this);\n  }\n\n  renderLogin() {\n    \n    switch(this.props.auth) {\n      case null:\n        return;\n      case false:\n        return (\n          <li key=\"login\"><a href=\"/auth/facebook\">Login with Facebook</a></li>\n        );\n      default:\n        return (\n          <li key=\"login\"><a href=\"/api/logout\">Logout</a></li>\n        );\n    }\n  }\n\n  renderEditorLink() {\n    switch(this.props.auth) {\n      case null:\n        return false;\n      case false:\n        return false;\n      default:\n        const userType = this.props.auth.type;\n        if (userType === 'owner') {\n          return (\n            <li key=\"editorLink\"><a className=\"EditorLink\" href=\"/editor\">editor</a></li>\n          )\n        } else {\n          return false;\n        }\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"MenuBar\">\n        <span className=\"MenuTitle\"><a href=\"/\">VENDOR</a></span>\n        <ul className=\"LoginContainer\">\n          {this.renderEditorLink()}\n          {this.renderLogin()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  }\n}\n\nexport default connect(mapStateToProps)(MenuBar);","import React from 'react';\nimport './reset.css';\nimport './App.css';\n\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\n\nimport MenuBar from '../../Components/MenuBar/MenuBar';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getMainView = this.getMainView.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  getMainView() {\n    const gameState = this.props.started;\n    if (!gameState) {\n      return (\n        <StartScreen />\n      )\n    } else {\n      return (\n        <GameScreen />\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MenuBar />\n        {this.getMainView()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    started: state.gameState.started\n  }\n}\n\nexport default connect(mapStateToProps, actions)(App);","import { SET_DAY } from '../actions/types';\n\nconst initialState = {\n  day: 1\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_DAY:\n      return {\n        ...state,\n        day: action.day\n      }\n    default:\n      return state;\n  }\n}","import { SET_GAME_STATE,\n  SET_UPDATES,\n  SET_STORE_UPDATE}\n   from '../actions/types';\n\nconst initialState = {\n  started: false,\n  storeUpdate: false\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_GAME_STATE:\n      return {\n        ...state,\n        started: action.value\n      }\n    case SET_UPDATES:\n      const updates = action.payload;\n      const { storeUpdate } = updates;\n      return {\n        ...state,\n        storeUpdate: storeUpdate\n      }\n    case SET_STORE_UPDATE:\n      return {\n        ...state,\n        storeUpdate: action.value\n      }\n    default:\n      return state;\n  }\n}","import { SET_STORE_NAME,\n  SET_STORE_GOLD,\n  SET_STORE_INVENTORY } from '../actions/types';\n\nconst initialState = {\n  name: '',\n  gold: 0,\n  refreshing: false,\n  refreshed: false,\n  inventory: []\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_STORE_NAME:\n      return {\n        ...state,\n        name: action.name\n      }\n    case SET_STORE_GOLD:\n      return {\n        ...state,\n        gold: action.amount\n      }\n    case SET_STORE_INVENTORY:\n      const newInventory = action.inventory;\n      return {\n        ...state,\n        inventory: newInventory\n      }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLIERS } from '../actions/types';\n\nconst initialState = {\n  suppliers: null,\n  count: 0\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLIERS:\n      let number = 0;\n      if (Array.isArray(action.payload)) {\n        number = action.payload.length;\n      }    \n      return {\n          ...state,\n          suppliers: action.payload,\n          count: number\n        }\n    default:\n      return state;\n  }\n}","import { SET_SUPPLY_READY } from '../actions/types';\n\nconst initialState = {\n  ready: false\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_SUPPLY_READY:\n      return {\n        ...state,\n        ready: action.value\n      }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport daysReducer from './daysReducer';\nimport gameStateReducer from './gameStateReducer'\nimport storeReducer from './storeReducer';\nimport authReducer from './authReducer';\nimport suppliersReducer from './suppliersReducer';\nimport suppliesReducer from './suppliesReducer';\n\nexport default combineReducers({\n  auth: authReducer,\n  days: daysReducer,\n  gameState: gameStateReducer,\n  storeState: storeReducer,\n  suppliers: suppliersReducer,\n  supplies: suppliesReducer\n});","import { FETCH_USER } from '../actions/types';\n\nexport default function(state = null, action) {\n  switch(action.type) {\n    case FETCH_USER:\n      return action.payload || false;\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nexport const store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// This is a comment made to test the build pipeline to the backend.\n// and this should test the pipeline to heroku.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}