{"version":3,"sources":["Utilities/days.js","Utilities/store.js","Utilities/items.js","Utilities/storeInventory.js","Utilities/main.js","Components/Title/Title.jsx","Components/StoreInventory/StoreInventory.jsx","actions/types.js","Components/Store/Store.jsx","Components/Days/Days.jsx","Containers/GameScreen/GameScreen.jsx","Containers/StartScreen/StartScreen.jsx","Components/App/App.jsx","reducers/daysReducer.js","reducers/gameStateReducer.js","reducers/storeReducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["days","day","getDay","setDay","newDay","console","log","resetDay","store","name","gold","getName","setName","newName","getStartingGold","getGold","setGold","newGold","items","itemTypes","potion","weapon","armor","potionTypes","Item","type","value","this","Potion","level","createItem","payload","newItem","newPotionType","newPotionLevel","createTestPotion","lvl","getItemTypes","storeInventory","inventory","currentIdIndex","addItem","id","push","addPotion","Items","newPotion","addTestPotion","testPotion","getStoreInventory","main","init","startingGold","x","createTestPotions","Title","className","React","Component","StoreInventory","props","getInventoryItems","bind","newInventory","JSON","parse","stringify","setInventory","length","map","item","key","connect","state","storeState","dispatch","Store","currentGold","gameStore","setStoreGold","storeName","amount","Days","handleNextDay","currentDay","onClick","GameScreen","StartScreen","handleStart","handleNameInput","game","setStarted","e","charCode","htmlFor","onChange","val","setStoreName","target","onKeyPress","started","gameState","App","getMainView","initialState","storeUpdate","refreshing","refreshed","combineReducers","action","updates","Boolean","window","location","hostname","match","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.704f5928.chunk.js","sourcesContent":["const days = (function (){\r\n  const startDay = 1;\r\n  let day = startDay;\r\n\r\n  return {\r\n    getDay: function() {\r\n      return day;\r\n    },\r\n\r\n    setDay: function(newDay) {\r\n      if (typeof newDay !== \"number\") {\r\n        console.log(\"trying to set day to a non number value!\");\r\n        return;\r\n      }\r\n      day = newDay;\r\n    },\r\n\r\n    resetDay: function() {\r\n      day = startDay;\r\n    }\r\n  }\r\n}());\r\n\r\nexport default days;","const store = (function(){\r\n  let name = '';\r\n\r\n  const startingGold = 1000;\r\n  let gold = startingGold;\r\n  \r\n  return {\r\n    getName: function() {\r\n      return name;\r\n    },\r\n\r\n    setName: function(newName) {\r\n      name = newName;\r\n    },\r\n\r\n    getStartingGold: function() {\r\n      return startingGold;\r\n    },\r\n\r\n    getGold: function() {\r\n      return gold;\r\n    },\r\n\r\n    setGold: function(newGold) {\r\n      gold = newGold;\r\n    }\r\n  }\r\n}());\r\n\r\nexport default store;","const items = (function(){\r\n  const itemTypes = {\r\n    potion: 'potion',\r\n    weapon: 'weapon',\r\n    armor: 'armor'\r\n  }\r\n\r\n  const potionTypes = {\r\n    healing: 'healing'\r\n  }\r\n  \r\n  const Item = function(type, name, value) {\r\n    this.type = type;\r\n    this.name = name;\r\n    this.value = value;\r\n  }\r\n\r\n  const Potion = function(type, level) {\r\n    this.type = type;\r\n    this.level = level;\r\n  }\r\n  \r\n  return {\r\n    createItem: function(type, name, value, payload) {\r\n      if (!type[type]) {\r\n        console.log('invalid item type passed to items.createItem()');\r\n        return;\r\n      }\r\n      \r\n      const newItem = new Item(type, name, value);\r\n      \r\n      switch (newItem.type) {\r\n        case itemTypes.potion:\r\n          const newPotionType = payload.type;  \r\n          if (!newPotionType) {\r\n            console.log('attempted to create invalid potion type');\r\n            return;\r\n          }\r\n          const newPotionLevel = payload.level;\r\n          if (!newPotionLevel) {\r\n            console.log('attempted to create a potion with an invalid level');\r\n            return;\r\n          }\r\n          newItem[newItem.type] = new Potion(newPotionType, newPotionLevel);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return newItem;\r\n    },\r\n\r\n    createTestPotion: function(lvl) {\r\n      const newItem = new Item(itemTypes.potion, 'Healing Potion', 60);\r\n      newItem[itemTypes.potion] = new Potion(potionTypes.healing, lvl);\r\n      return newItem;\r\n    },\r\n\r\n    getItemTypes: function() {\r\n      return itemTypes;\r\n    }\r\n  }\r\n}());\r\n\r\nexport default items;","import Items from './items';\r\nimport gameStore from './store';\r\n\r\n\r\nconst storeInventory = (function(){\r\n  let inventory = [];\r\n\r\n  let currentIdIndex = 0;\r\n\r\n  const addItem = function(newItem) {\r\n    newItem.id = currentIdIndex;\r\n    currentIdIndex++;\r\n    inventory.push(newItem);\r\n  }\r\n\r\n  \r\n  return {\r\n    addPotion: function(name, value, payload) {\r\n      const itemTypes = Items.getItemTypes();\r\n      const newPotion = Items.createItem(itemTypes.potion, name, value, payload);\r\n      addItem(newPotion);\r\n    },\r\n\r\n    addTestPotion: function() {\r\n      const testPotion = Items.createTestPotion();\r\n      addItem(testPotion);\r\n    },\r\n\r\n    getStoreInventory: function() {\r\n      return inventory;\r\n    }\r\n  }\r\n}());\r\n\r\nexport default storeInventory;","import days from './days';\r\nimport store from './store';\r\nimport storeInventory from './storeInventory';\r\n\r\nconst main = (function() {\r\n  \r\n  const testPotionCount = 5;\r\n\r\n  const createTestPotions = function() {\r\n    for (let x = 0; x < testPotionCount; x++) {\r\n      storeInventory.addTestPotion();\r\n    }\r\n    \r\n  }\r\n\r\n  return {\r\n    init: function(payload) {\r\n      // set day to 1\r\n      days.setDay(1);\r\n      \r\n      // set store name\r\n      if (!payload.name) {\r\n        console.log('Game must be started with a payload object that contains a store name!');\r\n      }\r\n      store.setName(payload.name);\r\n\r\n      const startingGold = store.getStartingGold();\r\n      store.setGold(startingGold);\r\n\r\n      createTestPotions();\r\n    }\r\n\r\n  }\r\n} ());\r\n\r\nexport default main;","import React from 'react';\r\nimport './Title.css';\r\n\r\nclass Title extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Title\">VENDOR</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport './StoreInventory.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { SET_STORE_INVENTORY } from '../../actions/types';\r\n\r\nimport storeInventory from '../../Utilities/storeInventory';\r\n\r\nclass StoreInventory extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.getInventoryItems = this.getInventoryItems.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const newInventory = JSON.parse(JSON.stringify(storeInventory.getStoreInventory()));\r\n    this.props.setInventory(newInventory);\r\n  }\r\n\r\n  getInventoryItems() {\r\n    if (this.props.inventory && this.props.inventory.length > 0) {\r\n      return (\r\n        <div>{this.props.inventory.map(item => {\r\n          return (\r\n            <div className=\"InventoryItem\" key={item.id}>\r\n              <span className=\"InventoryItemName\">{item.name}</span>\r\n              <div className=\"ItemValueGroup\">\r\n                <span className=\"CoinSymbol\">&#x2689; </span>\r\n                <span className=\"InventoryItemValue\">{item.value}</span>\r\n              </div>\r\n              \r\n            </div>\r\n          )\r\n        })}</div>\r\n      )     \r\n    } else {\r\n      return (\r\n        <div>No inventory</div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"StoreInventory\">\r\n        {this.getInventoryItems()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    inventory: state.storeState.inventory\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setInventory: (newInventory) => dispatch({ type: SET_STORE_INVENTORY, inventory: newInventory })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreInventory);","export const SET_DAY = \"SET_DAY\";\r\nexport const SET_GAME_STATE = \"SET_GAME_STATE\";\r\nexport const SET_STORE_NAME = \"SET_STORE_NAME\";\r\nexport const SET_STORE_GOLD = \"SET_STORE_GOLD\";\r\nexport const SET_UPDATES = \"SET_UPDATES\";\r\nexport const SET_STORE_UPDATE = \"SET_STORE_UPDATE\";\r\nexport const SET_STORE_INVENTORY = 'SET_STORE_INVENTORY';","import React from 'react';\r\nimport './Store.css';\r\n\r\nimport gameStore from '../../Utilities/store';\r\n\r\nimport StoreInventory from '../StoreInventory/StoreInventory';\r\n\r\nimport { SET_STORE_GOLD } from '../../actions/types';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Store extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\r\n  // ~~*~~*~*~~* lifecycle methods ~~*~~*~*~~*~\r\n  // ~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*~~*~~*~*\r\n  \r\n  componentDidMount() {\r\n    const currentGold = gameStore.getGold();\r\n    this.props.setStoreGold(currentGold);\r\n  }\r\n\r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"Store\">\r\n        <div className=\"StoreMenuBar\">\r\n          <h2 className=\"StoreName\">{this.props.storeName}</h2>\r\n          <span className=\"Inspect\">&#128269; </span>\r\n          <div className=\"GoldDisplay\">\r\n            <span className=\"CoinSymbol\">&#x2689; </span>\r\n            {this.props.gold}\r\n          </div>\r\n        </div>\r\n        <StoreInventory />\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    storeName: state.storeState.name,\r\n    gold: state.storeState.gold\r\n\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setStoreGold: (newGold) => dispatch({ type: SET_STORE_GOLD, amount: newGold })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Store);","import React from 'react';\r\nimport './Days.css';\r\n\r\n// import days controller from game code\r\nimport days from '../../Utilities/days';\r\n\r\n// import redux modules\r\nimport { SET_DAY } from '../../actions/types';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Days extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNextDay = this.handleNextDay.bind(this);\r\n  }\r\n\r\n  handleNextDay() {\r\n    const currentDay = this.props.day;\r\n    // set day in game\r\n    days.setDay(currentDay + 1);\r\n    // set day in redux state;\r\n    this.props.setDay(days.getDay());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Days\">\r\n        Day: {this.props.day}\r\n        <br />\r\n        <button className=\"nextDay\" onClick={this.handleNextDay}\r\n        >Finish Day</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    day: state.days.day\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setDay: (day) => dispatch({ type: SET_DAY, day: day })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Days);","import React from 'react';\r\nimport './GameScreen.css';\r\n\r\nimport Title from '../../Components/Title/Title';\r\nimport Store from '../../Components/Store/Store';\r\nimport Days from '../../Components/Days/Days';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass GameScreen extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"GameScreen\">\r\n        <Title />\r\n        <Store />\r\n        <Days />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    storeName: state.storeState.name\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(GameScreen);","import React from 'react';\r\nimport './StartScreen.css';\r\n\r\nimport Title from '../../Components/Title/Title';\r\n\r\nimport game from '../../Utilities/main';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { SET_STORE_NAME, SET_GAME_STATE } from '../../actions/types';\r\n\r\nclass StartScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.handleNameInput = this.handleNameInput.bind(this);\r\n  }\r\n  \r\n  handleStart() {\r\n    const newName = this.props.name;\r\n    if (!newName || newName == '') {\r\n      return;\r\n    }\r\n    game.init({ name: newName });\r\n    this.props.setStarted(true);\r\n  }\r\n\r\n  handleNameInput(e) {\r\n    if (e.charCode === 13) {\r\n      this.handleStart();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"StartScreen\">\r\n        <Title />\r\n        <div className=\"NameInput\">\r\n          <div className=\"nameInputGroup\">\r\n            <label htmlFor=\"name\" className=\"NameLabel\">Name: </label>\r\n            <input id=\"name\" \r\n              value={this.props.name}\r\n              type=\"text\"\r\n              onChange={(val) => this.props.setStoreName(val.target.value)}\r\n              onKeyPress={this.handleNameInput}\r\n            />\r\n          </div>\r\n          <button onClick={this.handleStart} \r\n            className=\"StartButton\">\r\n              Start!    \r\n          </button>\r\n        </div>\r\n          \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    started: state.gameState.started,\r\n    name: state.storeState.name\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setStoreName: (name) => dispatch({ type: SET_STORE_NAME, name: name }),\r\n    setStarted: (value) => dispatch({ type: SET_GAME_STATE, value: value })\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartScreen);","import React from 'react';\r\nimport './reset.css';\r\nimport './App.css';\r\n\r\nimport MainGame from '../../Utilities/main';\r\nimport GameScreen from '../../Containers/GameScreen/GameScreen';\r\nimport StartScreen from '../../Containers/StartScreen/StartScreen';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getMainView = this.getMainView.bind(this);\r\n  }\r\n\r\n  getMainView() {\r\n    const gameState = this.props.started;\r\n    if (!gameState) {\r\n      return (\r\n        <StartScreen />\r\n      )\r\n    } else {\r\n      return (\r\n        <GameScreen />\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.getMainView()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    started: state.gameState.started\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);","import { SET_DAY } from '../actions/types';\r\nimport days from '../Utilities/days';\r\n\r\nconst initialState = {\r\n  day: days.getDay()\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_DAY:\r\n      return {\r\n        ...state,\r\n        day: action.day\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_GAME_STATE,\r\n  SET_UPDATES,\r\n  SET_STORE_UPDATE}\r\n   from '../actions/types';\r\n\r\nconst initialState = {\r\n  started: false,\r\n  storeUpdate: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_GAME_STATE:\r\n      return {\r\n        ...state,\r\n        started: action.value\r\n      }\r\n    case SET_UPDATES:\r\n      const updates = action.payload;\r\n      const { storeUpdate } = updates;\r\n      return {\r\n        ...state,\r\n        storeUpdate: storeUpdate\r\n      }\r\n    case SET_STORE_UPDATE:\r\n      return {\r\n        ...state,\r\n        storeUpdate: action.value\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { SET_STORE_NAME,\r\n  SET_STORE_GOLD,\r\n  SET_STORE_INVENTORY } from '../actions/types';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  gold: 0,\r\n  refreshing: false,\r\n  refreshed: false,\r\n  inventory: []\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_STORE_NAME:\r\n      return {\r\n        ...state,\r\n        name: action.name\r\n      }\r\n    case SET_STORE_GOLD:\r\n      return {\r\n        ...state,\r\n        gold: action.amount\r\n      }\r\n    case SET_STORE_INVENTORY:\r\n      const newInventory = action.inventory;\r\n      return {\r\n        ...state,\r\n        inventory: newInventory\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport daysReducer from './daysReducer';\r\nimport gameStateReducer from './gameStateReducer'\r\nimport storeReducer from './storeReducer';\r\n\r\nexport default combineReducers({\r\n  days: daysReducer,\r\n  gameState: gameStateReducer,\r\n  storeState: storeReducer\r\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport App from './Components/App/App.jsx';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}